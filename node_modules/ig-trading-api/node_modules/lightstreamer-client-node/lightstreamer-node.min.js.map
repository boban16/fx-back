{"version":3,"file":"lightstreamer-node.min.js","sources":["../../source/LogMessages.js","../../source/alt/DummyMpnManager.js","../../source/subscriptions/RealMaxFrequencyManager.js","../../source/descriptors/NameDescriptor.js","../../source/descriptors/ListDescriptor.js","../../source/descriptors/Descriptor.js","../../source/subscriptions/ItemUpdate.js","../../source/subscriptions/SecondLevelSubscriptionListener.js","../../source/engine/LightstreamerEngine.js","../../source/control/ControlRequest.js","../../source/engine/SessionHandler.js","../../source/engine/EvalQueue.js","../../source/engine/TlcpServerMessage.js","../../source/control/SendMessageHandler.js","../../source/control/SendMessageBridge.js","../../source/control/ControlConnectionHandler.js","../../source/engine/SlowingHandler.js","../../source/engine/SessionWS.js","../../source/engine/SessionHTTP.js","../../source/net/Hourglass.js","../../source/net/ConnectionSelector.js","../../source/net/XHRStreamingConnection.js","../../source/net/XHRConnection.js","../../source/net/AjaxFrameHandler.js","../../source/net/FrameConnection.js","../../source/net/FormConnection.js","../../source/encoders/LegacyEncoder.js","../../source/encoders/QueryStringEncoder.js","../../source/net/FakeNotifyConnection.js","../../source/net/IEXSXHRConnection.js","../../source/net/StreamAsStringHandler.js","../../source/engine/Session.js","../../source/engine/RecoveryBean.js","../../source/control/ForceRebindTutor.js","../../source/encoders/WSEncoder.js","../../source/engine/PushPageCollectionHandler.js","../../source/control/SubscriptionChangeTutor.js","../../source/control/SubscribeTutor.js","../../source/control/UnsubscribeTutor.js","../../source/control/Tutor.js","../../source/engine/PushEvents.js","../../source/subscriptions/SubscriptionsHandler.js","../../source/pushpage/MessageProxy.js","../../source/net/ServerConnection.js","../../source/encoders/HTTPEncoder.js","../../source/encoders/Encoder.js","../../source/net/Request.js","../../source/pushpage/NewEngineHandler.js","../../source/beans/ConnectionDetails.js","../../source/beans/ConnectionOptions.js","../../source/engine/ConnectTimeoutCounter.js","../../source/engine/RetryDelayCounter.js","../../source/beans/Configuration.js","../../source/beans/Bean.js","../../source/cross-tab/CallDefinition.js","../../source/subscriptions/UpdateCopy.js","../../source/net/WebSocketConnection.js","../../source/net/XSXHRConnection.js","../../source/control/ControlRequestBatch.js","../../source/engine/NewPushPageHandler.js","../../source/alt/dummy_ls_sbc.js","../../src-tool/IllegalStateException.js","../../src-tool/Environment.js","../../src-tool/Helpers.js","../../source/Constants.js","../../src-tool/BrowserDetection.js","../../src-tool/List.js","../../src-tool/EnvironmentStatus.js","../../source/Global.js","../../src-tool/Executor.js","../../src-log/LoggerProxy.js","../../src-tool/IllegalArgumentException.js","../../src-log/LoggerManager.js","../../source/Utils.js","../../src-tool/Inheritance.js","../../src-tool/Setter.js","../../src-test/ASSERT.js","../../source/engine/RequestsHelper.js","../../source/cross-tab/StandardHandler.js","../../source/LightstreamerClient.js","../../source/platform/NodeUtils.js","../../source/utils/Assertions.js","../../source/Subscription.js","../../src-tool/EventDispatcher.js","../../source/engine/MadTester.js","../../src-tool/IFrameHandler.js","../../src-tool/Dismissable.js","../../source/engine/EncodingUtils.js","../../src-tool/Matrix.js","../../source/utils/ValidationUtils.js","../../src-log/SimpleLogLevels.js","../../src-log/SimpleLogAppender.js","../../src-log/BufferAppender.js","../../source/RemoteAppender.js","../../src-log/ConsoleAppender.js","../../src-log/FunctionAppender.js","../../src-log/SimpleLogger.js","../../src-log/SimpleLoggerProvider.js"],"sourcesContent":["import LoggerManager from \"../src-log/LoggerManager\";\n  \n  //WARN: do not rename this variable as it is used by the build script!\n  var messageStrings = [];\n  \n  //WARN: do not touch the following comment as it is replaced with the messageString initialization during build!\n  //ARRAY_IMPLEMENTATION_PLACEHOLDER\n  \n  \n  \n  LoggerManager.resolve = function(id){\n    return id + \"] \" + messageStrings[id];\n  };\n  \n  /**\n   * This is a fake constructor that should not be used.\n   * @constructor\n   * \n   * @exports LogMessages\n   *\n   * @class Used internally by the library to produce \"real\" log messages\n   * in the log generated by the internal classes. If this class is not included in the \n   * generated library, only codes will be printed.\n   * <BR>Note that if the library is used in the AMD version then it may be necessary,\n   * depending on the AMD implementation in use, to require this class to make the \n   * \"real\" log messages appear in the log. \n   * <BR>It is suggested not to import this class unless a client log is needed \n   * for debugging purposes.\n   * <BR>It is possible to include this class in a JavaScript application to \n   * programmatically obtain a log message associated to a given log code\n   * exploiting the {@link LogMessages.getMessage} method.\n   */\n  var LogMessages = function() {\n  };\n  \n  /**\n   * Given a log code as generated by a library running without the LogMessages module,\n   * this method can be used to extract the associated log message.\n   *  \n   * @param {Number} id The id of the essage to be extracted.\n   */\n  LogMessages.getMessage = function(id) {\n    return LoggerManager.resolve(id);\n  };\n  \n  LoggerManager[\"resolve\"] = LoggerManager.resolve;\n  LogMessages[\"getMessage\"] = LogMessages.getMessage;\n  \n  export default LogMessages; \n\n","\n    var dummy = function() {};\n    \n    export default function() {\n        this.eventManager = {\n                onSessionStart: dummy,\n                onSessionClose: dummy\n        };\n    };\n","/**\n * Manages the maximum real frequency of a subscription. \n * In case of change, SubscriptionListener.onRealMaxFrequency is triggered.\n * If the subscription is a two-level command subscription, the notified frequency is the maximum real frequency\n * of the first-level and second-level subscriptions.\n * \n * @since February 2018\n */\n\n    \n    /**\n     * A frequency is a decimal number or the string \"unlimited\".\n     */\n    var Frequency = function(frequency) {\n        this.frequency = frequency;\n    }\n\n    Frequency.prototype = {\n            /**\n             * Returns whether this frequency is greater than or equal to the given frequency. \n             */\n            isGTE: function(otherFrequency) {\n                if (this.frequency == \"unlimited\") {\n                    return true;\n                } else if (otherFrequency.frequency == \"unlimited\") {\n                    return false;\n                } else {\n                    return this.frequency > otherFrequency.frequency;\n                }\n            },\n\n            equals: function(otherFrequency) {\n                return this.frequency == otherFrequency.frequency;\n            }\n    };\n\n    /**\n     * Manages a subscription which is neither a first-level nor a second-level subscription.\n     */\n    var FlatPushRealMaxFrequencyManager = function(subscription) {\n        this.subscription = subscription;\n    }\n\n    FlatPushRealMaxFrequencyManager.prototype = {\n            /**\n             * Changes the maximum real frequency of a subscription\n             * and notifies SubscriptionListener.onRealMaxFrequency if there is a change.\n             */\n            configure: function(frequency) {\n                var oldRealMaxFrequency = this.subscription.realMaxFrequency;\n                this.subscription.realMaxFrequency = new Frequency(frequency);\n                if (!oldRealMaxFrequency.equals(this.subscription.realMaxFrequency)) {\n                    this.subscription.dispatchEvent(\"onRealMaxFrequency\", [this.subscription.realMaxFrequency.frequency]);\n                }\n            }\n    };\n\n    /**\n     * Manages the first-level subscription of a two-level command subscription.\n     */\n    var FirstLevelMultiMetaPushRealMaxFrequencyManager = function(subscription) {\n        this.subscription = subscription;\n        this.multiMetaPushRealMaxFrequency = new Frequency(null);\n    }\n\n    FirstLevelMultiMetaPushRealMaxFrequencyManager.prototype = {\n            /**\n             * Changes the maximum real frequency of a subscription\n             * and notifies SubscriptionListener.onRealMaxFrequency if there is a change.\n             */\n            configure: function(frequency) {\n                this.subscription.realMaxFrequency = new Frequency(frequency);\n                this.configureMultiMetaPushRealMaxFrequency();\n            },\n\n            /**\n             * Calculates the maximum frequency among first-/second-level subscriptions \n             * and notifies SubscriptionListener.onRealMaxFrequency if there is a change.\n             */\n            configureMultiMetaPushRealMaxFrequency: function() {\n                var maxFrequency = this.subscription.realMaxFrequency;\n                this.subscription.subTables.forEachElement(function(secondLevelSubscription) {\n                    if (secondLevelSubscription.realMaxFrequency.isGTE(maxFrequency)) {\n                        maxFrequency = secondLevelSubscription.realMaxFrequency;\n                    }\n                });\n                if (!maxFrequency.equals(this.multiMetaPushRealMaxFrequency)) {\n                    this.multiMetaPushRealMaxFrequency = maxFrequency;\n                    this.subscription.dispatchEvent(\"onRealMaxFrequency\", [this.multiMetaPushRealMaxFrequency.frequency]);\n                }\n            },\n\n            /**\n             * Recalculates the maximum frequency when a second-level subscription is deleted\n             * and notifies SubscriptionListener.onRealMaxFrequency if there is a change.\n             */\n            onDeleteSecondLevelSubscription: function() {\n                this.configureMultiMetaPushRealMaxFrequency();\n            }\n    };\n\n    /**\n     * Manages a second-level subscription of a two-level command subscription.\n     */\n    var SecondLevelMultiMetaPushRealMaxFrequencyManager = function(subscription, firstLevelSubscription) {\n        this.subscription = subscription;\n        this.firstLevelSubscription = firstLevelSubscription;\n    }\n\n    SecondLevelMultiMetaPushRealMaxFrequencyManager.prototype = {\n            /**\n             * Changes the maximum real frequency of a subscription\n             * and notifies SubscriptionListener.onRealMaxFrequency of the first-level subscription \n             * if there is a change.\n             */\n            configure: function(frequency) {\n                this.subscription.realMaxFrequency = new Frequency(frequency);\n                this.firstLevelSubscription.realMaxFrequencyManager.configureMultiMetaPushRealMaxFrequency();\n            }\n    };\n    \n    export default {\n        Frequency: Frequency,\n        FlatPushRealMaxFrequencyManager: FlatPushRealMaxFrequencyManager,\n        FirstLevelMultiMetaPushRealMaxFrequencyManager: FirstLevelMultiMetaPushRealMaxFrequencyManager,\n        SecondLevelMultiMetaPushRealMaxFrequencyManager: SecondLevelMultiMetaPushRealMaxFrequencyManager\n    }\n","import Inheritance from \"../../src-tool/Inheritance\";\nimport Descriptor from \"./Descriptor\";\n\n  var NameDescriptor = function(val) {\n    this._callSuperConstructor(NameDescriptor); \n    this.name = val;\n  };\n  \n  NameDescriptor.prototype = {\n      getComposedString: function() {\n        return this.name;\n      },\n      \n      getPos: function(name) {\n        if (this.subDescriptor) {\n          var fromSub = this.subDescriptor.getPos(name);\n          return fromSub!==null ? fromSub+this.len : null;\n        }\n        return null;\n      },\n      \n      getName: function(pos) {\n        if (this.subDescriptor) {\n          return this.subDescriptor.getName(pos-this.len);\n        }\n        return null;\n      },\n      \n      getOriginal: function() {\n        return this.name;\n      },\n      \n      isList: function() {\n          return false;\n      }\n  };\n  \n  Inheritance(NameDescriptor, Descriptor);\n  export default NameDescriptor;\n  \n","import Inheritance from \"../../src-tool/Inheritance\";\nimport Descriptor from \"./Descriptor\";\n  \n  function getReverseList(list) {\n    var reverseList = {};\n    for (var i=0; i<list.length; i++) {\n      reverseList[list[i]] = i+1;\n    }\n    return reverseList;\n  }\n  \n  var ListDescriptor = function(val) {\n    this._callSuperConstructor(ListDescriptor); \n    this.list = val;\n    this.reverseList = getReverseList(val);\n    this.len = val.length;\n  };\n  \n  ListDescriptor.prototype = {\n      \n      setSize: function(len) {\n        return;\n      },\n      \n      getComposedString: function() {\n        return this.list.join(\" \");\n      },\n      \n      getPos: function(name) {\n        if(this.reverseList[name]) {\n          return this.reverseList[name];\n        } else if (this.subDescriptor) {\n          var fromSub = this.subDescriptor.getPos(name);\n          return fromSub !== null ? fromSub+this.len : null;\n        }\n        return null;\n      },\n      \n      getName: function(pos) {\n        if (pos > this.len) {\n          if (this.subDescriptor) {\n            return this.subDescriptor.getName(pos-this.len);\n          }\n         \n        } \n        return this.list[pos-1] || null;\n        \n      },\n      \n      getOriginal: function() {\n        return this.list;\n      },\n      \n      isList: function() {\n          return true;\n      }\n      \n  };\n  \n  Inheritance(ListDescriptor, Descriptor);\n  export default ListDescriptor;\n  \n","\n  \n  var Descriptor = function() {\n    this.subDescriptor = null;\n    this.len = 0;\n  };\n  \n  Descriptor.prototype = {\n      setSubDescriptor: function(subDescriptor) {\n        this.subDescriptor = subDescriptor;\n      },\n      \n      getSubDescriptor: function() {\n        return this.subDescriptor;\n      },\n      \n      getSize: function() {\n        return this.len;\n      },\n      \n      getFullSize: function() {\n        if (this.subDescriptor) {\n          return this.getSize() + this.subDescriptor.getSize();\n        }\n        return this.getSize();\n      },\n      \n      setSize: function(len) {\n        this.len = len;\n      }\n      \n      /*abstract*/ /*getComposedString*/\n      /*abstract*/ /*getPos*/\n      /*abstract*/ /*getName*/\n      /*abstract*/ /*isList*/\n  };\n  \n  export default Descriptor;\n  \n  \n","import LoggerManager from \"../../src-log/LoggerManager\";\nimport IllegalArgumentException from \"../../src-tool/IllegalArgumentException\";\nimport Constants from \"../Constants\";\n  \n\n   var actionsLogger = LoggerManager.getLoggerProxy(Constants.ACTIONS);\n   \n   \n   /**\n    * Used by the client library to provide a value object to each call of the \n    * {@link SubscriptionListener#onItemUpdate} event.\n    * @constructor\n    * \n    * @exports ItemUpdate\n    * @class Contains all the information related to an update of the field values \n    * for an item. It reports all the new values of the fields.\n    * <BR>\n    * <BR>\n    * <B>COMMAND Subscription</B><BR>\n    * If the involved Subscription is a COMMAND Subscription, then the values for \n    * the current update are meant as relative to the same key.\n    * <BR>Moreover, if the involved Subscription has a two-level behavior enabled,\n    * then each update may be associated with either a first-level or a second-level \n    * item. In this case, the reported fields are always the union of the first-level \n    * and second-level fields and each single update can only change either the \n    * first-level or the second-level fields (but for the \"command\" field, which is \n    * first-level and is always set to \"UPDATE\" upon a second-level update); note \n    * that the second-level field values are always null until the first second-level\n    * update occurs).\n    * When the two-level behavior is enabled, in all methods where a field name\n    * has to be supplied, the following convention should be followed:\n    * <ul>\n    * <li>\n    * The field name can always be used, both for the first-level and the second-level \n    * fields. In case of name conflict, the first-level field is meant. \n    * </li>\n    * <li>\n    * The field position can always be used; however, the field positions for \n    * the second-level fields start at the highest position of the first-level \n    * field list + 1. If a field schema had been specified for either first-level or \n    * second-level Subscriptions, then client-side knowledge of the first-level schema \n    * length would be required.\n    * </li>\n    * </ul>\n    */\n   var ItemUpdate = function() {\n     \n     // function(itemName, itemPos, fieldDescriptor, _isSnapshot, updateValues)\n     \n     //need to use arguments array to avoid documenting parameters in the public jsdocs\n     /**\n      * @private\n      */\n     this.itemPos = arguments[1];\n     /**\n      * @private\n      */\n     this.itemName = arguments[0];\n     /**\n      * @private\n      */\n     this._isSnapshot = arguments[3];\n     /**\n      * @private\n      */\n     this.fieldDescriptor = arguments[2];\n     /**\n      * @private\n      */\n     this.updateValues = arguments[4];\n   };\n   \n   ItemUpdate.prototype = {\n       \n       /**  \n        * Inquiry method that retrieves the name of the item to which this update \n        * pertains.\n        * <BR>The name will be null if the related Subscription was initialized\n        * using an \"Item Group\".\n        * \n        * @return {String} the name of the item to which this update pertains.\n        * \n        * @see Subscription#setItemGroup\n        * @see Subscription#setItems\n        */\n       getItemName: function() {\n         return this.itemName;\n       },\n       \n       /**  \n        * Inquiry method that retrieves the position in the \"Item List\" or \"Item Group\"\n        * of the item to which this update pertains.\n        * \n        * @return {Number} the 1-based position of the item to which this update pertains.\n        * \n        * @see Subscription#setItemGroup\n        * @see Subscription#setItems\n        */\n       getItemPos: function() {\n         return this.itemPos;\n       },\n       \n       /**\n        * Inquiry method that gets the value for a specified field, as received \n        * from the Server with the current or previous update.\n        * \n        * @throws {IllegalArgumentException} if the specified field is not\n        * part of the Subscription.\n        * \n        * @param {String} fieldNameOrPos The field name or the 1-based position of the field\n        * within the \"Field List\" or \"Field Schema\".\n        * \n        * @return {String} The value of the specified field; it can be null in the following \n        * cases:\n        * <ul>\n        * <li>a null value has been received from the Server, as null is a \n        * possible value for a field;</li>\n        * <li>no value has been received for the field yet;</li>\n        * <li>the item is subscribed to with the COMMAND mode and a DELETE command \n        * is received (only the fields used to carry key and command information \n        * are valued).</li>\n        * </ul>\n        * \n        * @see Subscription#setFieldSchema\n        * @see Subscription#setFields\n        */\n       getValue: function(fieldNameOrPos) {\n         var arrPos = this.toPos(fieldNameOrPos);\n         var el = this.updateValues[arrPos];\n         if (el && el.isUnchanged) {\n           return el.value;\n         }\n         return el;\n       },\n       \n       /**\n        * Inquiry method that asks whether the value for a field has changed after \n        * the reception of the last update from the Server for an item.\n        * If the Subscription mode is COMMAND then the change is meant as \n        * relative to the same key.\n        * \n        * @param {String} fieldNameOrPos The field name or the 1-based position of the field\n        * within the field list or field schema.\n        * \n        * @return {boolean} Unless the Subscription mode is COMMAND, the return value is true \n        * in the following cases:\n        * <ul>\n        * <li>It is the first update for the item;</li>\n        * <li>the new field value is different than the previous field value received \n        * for the item.</li>\n        * </ul>\n        * If the Subscription mode is COMMAND, the return value is true in the \n        * following cases:\n        * <ul>\n        * <li>it is the first update for the involved key value \n        * (i.e. the event carries an \"ADD\" command);</li>\n        * <li>the new field value is different than the previous field value \n        * received for the item, relative to the same key value (the event \n        * must carry an \"UPDATE\" command);</li>\n        * <li>the event carries a \"DELETE\" command (this applies to all fields \n        * other than the field used to carry key information).</li>\n        * </ul>\n        * In all other cases, the return value is false.\n        * \n        * @throws {IllegalArgumentException} if the specified field is not\n        * part of the Subscription.\n        */\n       isValueChanged: function(fieldNameOrPos) {\n         var arrPos = this.toPos(fieldNameOrPos);\n         return !this.updateValues.unchangedMap[arrPos];\n       },\n       \n       /**\n        * Inquiry method that asks whether the current update belongs to the \n        * item snapshot (which carries the current item state at the time of \n        * Subscription). Snapshot events are sent only if snapshot information\n        * was requested for the items through {@link Subscription#setRequestedSnapshot}\n        * and precede the real time events. \n        * Snapshot information take different forms in different subscription\n        * modes and can be spanned across zero, one or several update events. \n        * In particular:\n        * <ul>\n        * <li>if the item is subscribed to with the RAW subscription mode, \n        * then no snapshot is sent by the Server;</li>\n        * <li>if the item is subscribed to with the MERGE subscription mode, \n        * then the snapshot consists of exactly one event, carrying the current \n        * value for all fields;</li>\n        * <li>if the item is subscribed to with the DISTINCT subscription mode, then\n        * the snapshot consists of some of the most recent updates; these updates \n        * are as many as specified through \n        * {@link Subscription#setRequestedSnapshot}, unless fewer are available;</li>\n        * <li>if the item is subscribed to with the COMMAND subscription mode, \n        * then the snapshot consists of an \"ADD\" event for each key that is \n        * currently present.</li>\n        * </ul>\n        * Note that, in case of two-level behavior, snapshot-related updates \n        * for both the first-level item (which is in COMMAND mode) and any \n        * second-level items (which are in MERGE mode) are qualified with this flag.\n        * \n        * @return {boolean} true if the current update event belongs to the item snapshot; \n        * false otherwise.\n        */\n       isSnapshot: function() {\n         return this._isSnapshot;\n       },\n       \n       \n       \n       /**\n        * Receives an iterator function and invokes it once per each field \n        * changed with the last server update. \n        * <BR>Note that if the Subscription mode of the involved Subscription is \n        * COMMAND, then changed fields are meant as relative to the previous update \n        * for the same key. On such tables if a DELETE command is received, all the \n        * fields, excluding the key field, will be iterated as changed, with null value. All of this \n        * is also true on tables that have the two-level behavior enabled, but in \n        * case of DELETE commands second-level fields will not be iterated. \n        * <BR>Note that the iterator is executed before this method returns.\n        * \n        * @param {ItemUpdateChangedFieldCallback} iterator Function instance that will be called once \n        * per each field changed on the last update received from the server. \n        */\n       forEachChangedField: function(iterator) {\n         var ch = this.updateValues.changedFields;\n         for (var i = 0; i < ch.length; i++) {\n           var name = this.fieldDescriptor.getName(ch[i]); \n           var newV = this.updateValues[ch[i] + 1];\n           \n           try {\n             iterator(name,ch[i],newV);\n           } catch(_e) {\n             actionsLogger.logErrorExc(_e,\"An exception was thrown while executing the Function passed to the forEachChangedField method\");\n           }\n           \n         }\n       },\n       \n       /**\n        * Receives an iterator function and invokes it once per each field \n        * in the Subscription. \n        * <BR>Note that the iterator is executed before this method returns.\n        * \n        * @param {ItemUpdateChangedFieldCallback} iterator Function instance that will be called once \n        * per each field in the Subscription. \n        */\n       forEachField: function(iterator) {\n         for (var i = 2; i < this.updateValues.length; i++) {\n           \n           var fieldPos = i-1;\n           var name = this.fieldDescriptor.getName(fieldPos);\n           var newV = this.updateValues[i];\n           \n           try {\n             iterator(name,fieldPos,newV);\n           } catch(_e) {\n             actionsLogger.logErrorExc(_e,\"An exception was thrown while executing the Function passed to the forEachField method\");\n           }\n           \n         }\n       },\n       \n       /**\n        * @private\n        */\n       /*private*/ toPos: function(fieldNameOrPos) {\n         var arrPos = (isNaN(fieldNameOrPos) ? this.fieldDescriptor.getPos(fieldNameOrPos) : fieldNameOrPos);\n         \n         if (arrPos == null) {\n           throw new IllegalArgumentException( \"the specified field does not exist\");\n           \n         } else if (arrPos <= 0 || arrPos > this.fieldDescriptor.getFullSize()+1) {\n           throw new IllegalArgumentException(\"the specified field position is out of bounds\");\n           \n         }\n         \n         //need to shift because before the updates in the array we have table and item.\n         //table is shifted by the fact that the array index starts from 0 not from 1, item is shifted via the +1\n         return arrPos+1; \n         \n       },\n       /**\n        * @private\n        */\n       /*internal*/ extract: function() {\n         return this.updateValues;\n       },\n       \n       //I need this method to keep compatibility with the flash bridge\n       /**\n        * @private\n        */\n       /*internal*/ getNumFields: function() {\n         return this.updateValues.length - 2;\n       },\n       \n       //I need this method to keep compatibility with the flash bridge\n       /**\n        * @private\n        */\n       /*internal*/ getFieldName: function(pos) {\n         return this.fieldDescriptor.getName(pos);\n       }\n           \n   };\n   \n   ItemUpdate.prototype[\"getItemName\"] = ItemUpdate.prototype.getItemName;\n   ItemUpdate.prototype[\"getItemPos\"] = ItemUpdate.prototype.getItemPos;\n   ItemUpdate.prototype[\"getValue\"] = ItemUpdate.prototype.getValue;\n   ItemUpdate.prototype[\"isValueChanged\"] = ItemUpdate.prototype.isValueChanged;\n   ItemUpdate.prototype[\"isSnapshot\"] = ItemUpdate.prototype.isSnapshot;\n   ItemUpdate.prototype[\"forEachChangedField\"] = ItemUpdate.prototype.forEachChangedField;\n   ItemUpdate.prototype[\"forEachField\"] = ItemUpdate.prototype.forEachField;\n\n   export default ItemUpdate;\n   \n   /**\n    * Callback for {@link ItemUpdate#forEachChangedField} and {@link ItemUpdate#forEachField} \n    * @callback ItemUpdateChangedFieldCallback\n    * @param {String} fieldName of the involved changed field. If the related Subscription was\n    * initialized using a \"Field Schema\" it will be null.\n    * @param {Number} fieldPos 1-based position of the field within\n    * the \"Field List\" or \"Field Schema\".\n    * @param {String} value the value for the field. See {@link ItemUpdate#getValue} for details.\n    */\n   ","import Constants from \"../Constants\";\nimport Assertions from \"../utils/Assertions\";\n  \n  var SecondLevelSubscriptionListener = function(parentTable,itemRef,relKey) {\n    this.parentTable = parentTable;\n    this.itemReference = itemRef;\n    this.relKey = relKey;\n  };\n  \n  SecondLevelSubscriptionListener.prototype = {\n  \n    /*onEndOfSnapshot: function(itemName, itemPos) {\n      return;\n    },\n    \n    onClearSnapshot: function(itemName, itemPos) {\n      // not expected, as MERGE mode is implied here\n      return;\n    },\n    \n    onSubscription: function() {\n      return;\n    },\n    \n    onUnsubscription: function() {\n      return;\n    },*/  \n      \n    /*public*/ onItemLostUpdates: function(itemName, itemPos, lostUpdates) {\n      if (!this.shouldDispatch()) {\n        return;\n      }\n    //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n      Assertions.verifyValue(itemPos,1, \"Unexpected item position\");\n    //>>excludeEnd(\"debugExclude\");\n      this.parentTable.sonLostUpdates(this.relKey,lostUpdates);\n    },        \n    \n    /*public*/ onSubscriptionError: function(flag, msg) {\n      if (!this.shouldDispatch()) {\n        return;\n      }\n      \n      this.parentTable.sonServerDeny(flag,msg,this.relKey);\n    },\n    \n    /*public*/ onItemUpdate: function(updateInfo) {\n      if (!this.shouldDispatch()) {\n        return;\n      }\n    //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n      Assertions.verifyValue(updateInfo.getItemPos(),1, \"Unexpected item position\");\n    //>>excludeEnd(\"debugExclude\");\n      var args = updateInfo.extract();\n      this.parentTable.setSecondLevelSchemaSize(args.length - 2);\n      \n      //args contiene l'update per la sola sotto-tabella.\n      //qui viene convertito in modo che rappresenti un update per \n      //la tabella padre\n      args = this.convertMultiSonUpdate(args);\n\n      //una volta convertito l'update la table di riferimento diventa il padre\n      return this.parentTable.update(args,false,true);\n      \n    },\n    \n    /*private*/ shouldDispatch: function() {\n      return this.parentTable.hasSubTable(this.itemReference,this.relKey);\n    },\n    \n    /*private*/ convertMultiSonUpdate: function(args) {\n      var fatherTable = this.parentTable;\n      var _item = this.itemReference;\n      \n      var newArgs = [];\n      newArgs[0] = fatherTable.getTableNumber();\n      newArgs[1] = _item;\n      newArgs.changedFields = [];\n      \n      var newLen = fatherTable.getFullSchemaSize()+2; //the combined length of the schemas + 2 (table number and item number)\n      \n      \n      var y = 2; //y represents the 1-based position shifted by 1 (so field 1 is in position 2) of the underlying schema \n      //i represents the 1-based position shifted by 1 (so field 1 is in position 2) of the combined schema\n      for (var i = 2; i < newLen; i++) {\n        if (i == (fatherTable.getKeyPos() + 1)) {\n          //l'item interessato risulta sempre come groupID\n          \n          newArgs[i] = this.relKey;\n        } else if (i == (fatherTable.getCommandPos() + 1)) {\n          // the command can only be an update\n          newArgs[i] =  \"UPDATE\";\n        } else if (i <= (fatherTable.getMainSchemaSize() + 1)) {\n          // for fields that depend on the table in COMMAND, sign always unchanged (this update\n          // is already prepared on item | key)\n          newArgs[i] = Constants.UNCHANGED;\n        } else {\n          //fields from subtable\n          newArgs[i] = args[y];\n\n          //args has alrady been filled with real values!\n          if (!args.unchangedMap[y]) {\n          //if(args[y] != Constants.UNCHANGED) {\n            newArgs.changedFields.push(i-1);\n          } else {\n            newArgs[i] = Constants.UNCHANGED;\n          }\n          \n          y++;\n          \n        } \n      }\n      return newArgs;\n    }\n    \n  };\n  \n  //export these methods as they're called by the dispatcher\n  SecondLevelSubscriptionListener.prototype[\"onSubscriptionError\"] = SecondLevelSubscriptionListener.prototype.onSubscriptionError;\n  SecondLevelSubscriptionListener.prototype[\"onItemUpdate\"] = SecondLevelSubscriptionListener.prototype.onItemUpdate;\n  SecondLevelSubscriptionListener.prototype[\"onItemLostUpdates\"] = SecondLevelSubscriptionListener.prototype.onItemLostUpdates;\n  \n  export default SecondLevelSubscriptionListener;\n\n\n\n","\nimport Global from \"../Global\";\nimport Constants from \"../Constants\";\nimport LoggerManager from \"../../src-log/LoggerManager\";\nimport Configuration from \"../beans/Configuration\";\nimport ConnectionDetails from \"../beans/ConnectionDetails\";\nimport ConnectionOptions from \"../beans/ConnectionOptions\";\nimport PushPageCollectionHandler from \"./PushPageCollectionHandler\";\nimport SessionHandler from \"./SessionHandler\";\nimport ControlRequest from \"../control/ControlRequest\";\nimport Executor from \"../../src-tool/Executor\";\nimport NewPushPageHandler from \"./NewPushPageHandler\";\nimport Helpers from \"../../src-tool/Helpers\";\n  \n  //THIS CLASS IMPLEMENTS BeanParent\n\n  var idPivot = Helpers.randomG();\n  \n  var buildNum = Constants.BUILD;\n  if (isNaN(buildNum)) {\n    buildNum = 0;\n  }\n  \n  var sessionLogger = LoggerManager.getLoggerProxy(Constants.SESSION);\n  \n  var LightstreamerEngine = function(conf,options,details,sharing,engineHandler,dontDieFor,mpnManager) {\n\n    this._configuration = new Configuration(conf);\n    this._configuration.setBroadcaster(this,true);\n\n    this._connection = new ConnectionDetails(details);\n    this._connection.setBroadcaster(this,true);\n    \n    this._policy = new ConnectionOptions(options);\n    this._policy.setBroadcaster(this,true);\n\n    this.lastStatus = null;\n\n    this.pushPages = new PushPageCollectionHandler(this,this._configuration,this._connection,this._policy);\n    if (sharing && sharing.isPossible()) {\n      this.sharedStatus = sharing.createSharedStatus(this,Executor.packTask(this.dispose,this),dontDieFor);\n      var bridge = this.sharedStatus.getBridge();\n      if (bridge != null) {\n        this.channels = sharing.createChannelsManager(this, bridge);\n        this.channels.addListener(this.pushPages);\n      }\n      this.id = this.sharedStatus.getId();\n    } else {\n      this.sharedStatus = null;\n      do {\n        this.id = \"NS\" + (idPivot++);\n      } while(Global.hasGlobal(this.id,'lsEngine'));\n    }\n\n    Global.exportGlobal(this.id,'lsEngine',this);\n\n    this.sessionHandler = new SessionHandler(\n    \t\tthis,\n    \t\tthis.pushPages,\n    \t\tmpnManager);\n\n    this.bindLocalClient(engineHandler,Constants.MAIN_CLIENT);\n\n    //restore the status now\n    if (this._configuration.connectionRequested) {\n      this.doConnect();\n    }\n   \n  };\n  \n  LightstreamerEngine.prototype = {\n\n\n    toString: function() {\n      return \"[LightstreamerEngine \"+this.id+\"]\";\n    },\n\n    bindLocalClient: function(eHandler,name) {\n      if (!name) {\n        name = \"LOCAL\"+idPivot++;\n      }\n\n      var ppHandler = new NewPushPageHandler(this,name);\n      ppHandler.setEngineHandler(eHandler);\n      eHandler.setPushPageHandler(ppHandler);\n\n      this.pushPages.onNewPushPage(name,ppHandler);\n    },\n\n    getEngineId: function() {\n      return this.id;\n    },\n\n    /*public*/ isSessionOpen: function() {\n      return this.sessionHandler.isSessionOpen();\n    },\n    \n    /*public*/ isSessionOpenOrRecovering: function() {\n        return this.sessionHandler.isSessionOpenOrRecovering();\n    },\n\n    getSharedStatus: function() {\n      return this.sharedStatus;\n    },\n\n    getSessionPhase: function() {\n      return this.pushPages.getSessionPhase();\n    },\n\n    onSessionEnd: function() {\n      this.pushPages.onSessionEnd();\n    },\n    onSessionStart: function() {\n      this.pushPages.onSessionStart();\n    },\n\n    dispose: function() {\n\n      this.sessionHandler.closeSession(false,\"suicide\",true);\n      this.sessionHandler.dispose();\n\n      Global.cleanAllGlobals(this.id); //no one should be able to find me now\n\n      if (this.sharedStatus) {\n        this.sharedStatus.dispose();\n      }\n\n      this.pushPages.notifyEngineDeath(true);\n      this.pushPages.dispose();\n\n      if (this.channels) {\n        this.channels.dispose();\n      }\n\n    },\n\n    doDisconnect: function() {\n      sessionLogger.logInfo(\"Dismissing current session and stopping automatic reconnections.\");\n\n      this._configuration.simpleSetter('connectionRequested',false);\n\n      this.sessionHandler.closeSession(true,\"api\",true);\n    },\n    \n    doDisconnectAndReconnect: function() {\n        this._configuration.simpleSetter('connectionRequested',false);\n        this.sessionHandler.disconnectAndReconnect();\n    },\n    \n    doChangeTransport: function() {\n        var ft = this._policy.forcedTransport;\n        sessionLogger.logInfo(\"Transport change requested\", ft);\n        if (ft === null) {\n            var fromAPI = true;\n            var isTransportForced = false;\n            var isComboForced = false;\n            var isPolling = false;\n            var isHTTP = false;\n            this.sessionHandler.changeTransport(fromAPI, isTransportForced, isComboForced, isPolling, isHTTP);\n        } else {\n            var fromAPI = true;\n            var isTransportForced = ft == Constants.WS_ALL || ft == Constants.HTTP_ALL;\n            var isComboForced = !isTransportForced;\n            var isPolling = ft == Constants.WS_POLLING || ft == Constants.HTTP_POLLING;\n            var isHTTP = ft == Constants.HTTP_POLLING || ft == Constants.HTTP_STREAMING || ft == Constants.HTTP_ALL;\n            this.sessionHandler.changeTransport(fromAPI, isTransportForced, isComboForced, isPolling, isHTTP);\n        }\n    },\n\n\n    doConnect: function() {\n      sessionLogger.logInfo(\"Opening a new session and starting automatic reconnections.\");\n\n      this._configuration.simpleSetter('connectionRequested',true);\n\n      var ft = this._policy.forcedTransport;\n      if (ft === null) {\n        //fromAPI,isTransportForced,isComboForced,isPolling,isHTTP,_reason,avoidSwitch\n        this.sessionHandler.createOrSwitchSession(true,false,false,false,false);\n\n      } else {\n        this.doConnectForced(ft);\n      }\n    },\n\n    doConnectForced: function(ft) {\n      var isPolling = ft == Constants.WS_POLLING || ft == Constants.HTTP_POLLING;\n      var isHTTP = ft == Constants.HTTP_POLLING || ft == Constants.HTTP_STREAMING || ft == Constants.HTTP_ALL;\n      var isTransportForced = ft == Constants.WS_ALL || ft == Constants.HTTP_ALL;\n      var isComboForced = !isTransportForced;\n\n      //fromAPI,isTransportForced,isComboForced,isPolling,isHTTP,_reason,avoidSwitch\n      this.sessionHandler.createOrSwitchSession(true,isTransportForced,isComboForced,isPolling,isHTTP);\n    },\n\n    broadcastSetting: function(objClass,prop,val) {\n      this.pushPages.forEachPushPage(function(pp) {\n        pp.onEngineConfigurationChange(objClass,prop,val);\n      });\n\n      if (prop == \"requestedMaxBandwidth\") {\n        //broadcast to the server too\n        this.sessionHandler.changeBandwidth(val);\n      } else if (prop == \"forcedTransport\") {\n\n        if (this._configuration.connectionRequested) {\n            this.doChangeTransport();\n        }\n\n      } else if (prop == \"reverseHeartbeatInterval\") {\n        //change heartbeat handling\n        this.sessionHandler.handleReverseHeartbeat(false);\n      } else if (prop == \"corsXHREnabled\" || prop == \"xDomainStreamingEnabled\") {\n        this.sessionHandler.connectionsEnableFlagsChanged();\n      }\n\n      return true;\n    },\n\n    onObsoleteControlLink: function(serverAddress) {\n      if(this.sharedStatus) {\n        this.sharedStatus.removeConnectionToServerFlag(serverAddress);\n      }\n    },\n\n    onNewControlLink: function(serverAddress) {\n      if(this.sharedStatus) {\n        this.sharedStatus.addConnectionToServerFlag(serverAddress);\n      }\n    },\n\n    getStatus: function() {\n      return this.sessionHandler.getHighLevelStatus();\n      // but the pushpage proxies will not need this remote call (they cache state as it changes)\n    },\n\n    notifyLSStatus: function() {\n      var newStatus = this.getStatus();\n      if (this.lastStatus == newStatus) {\n        return;\n      }\n\n      var oldStatus = this.lastStatus;\n      this.lastStatus = newStatus;\n\n      this.pushPages.notifyNewStatus(newStatus,oldStatus);\n\n      //NOTE: this is only called to do a favor to the test\n      if (this.onStatusChange) {\n        this.onStatusChange(newStatus);\n      }\n\n    },\n\n\n    sendAMessage: function(msg, sequence, listener, delayTimeout) {\n      // NOTE: in spite of what is documented,\n      // the proxy on the pushpage will not pass a pointer to the listener,\n      // but an object containing the necessary information\n      var cs = this.getStatus();\n      if (cs == Constants.DISCONNECTED || cs == Constants.WILL_RETRY) {\n        return false;\n        // but the return value is not sent back to the proxy;\n        // the case is rare, because the state check has just been done on the proxy;\n        // the message is not sent, but it is as if it was sent and not received,\n        // which is consistent, since the session is closing;\n        // in this case, it is the pushpage that notifies the listener\n      }\n\n      this.sessionHandler.sendAMessage(msg, sequence, listener, delayTimeout);\n\n      return true;\n    },\n\n    sendLog: function(msg) {\n      this.sessionHandler.sendLog(msg,buildNum);\n\n      return true;\n    },\n\n\n    subscribe: function(pageId,body) {\n      return this.pushPages.handleTable(pageId,body);\n    },\n\n    unsubscribe: function(tableNum) {\n      this.pushPages.removeTable(tableNum);\n    },\n\n    updateSubscriptionParams: function(tableNum,changingParams) {\n      this.pushPages.updateSubscriptionParams(tableNum,changingParams);\n    },\n\n\n\n    checkClientHealth: function() {\n      this.pushPages.cleanThread();\n    },\n    \n    onServerKeepalive: function() {\n        this.pushPages.onServerKeepalive();\n    },\n    \n    sendRegisterForMpn: function(mpnRegisterRequest, mpnRegisterTutor) {\n        this.sessionHandler.sendRegisterForMpn(mpnRegisterRequest, mpnRegisterTutor);\n    },\n    \n    sendMpnSubscription: function(mpnSubscribeRequest, mpnSubscribeTutor) {\n        this.sessionHandler.sendMpnSubscription(mpnSubscribeRequest, mpnSubscribeTutor);\n    },\n    \n    sendMpnUnsubscription: function(mpnUnsubscribeRequest, mpnUnsubscribeTutor) {\n        this.sessionHandler.sendMpnUnsubscription(mpnUnsubscribeRequest, mpnUnsubscribeTutor);\n    },\n    \n    sendMpnFilteredUnsubscription: function(mpnUnsubscribeFilterRequest, mpnUnsubscribeFilterTutor) {\n        this.sessionHandler.sendMpnFilteredUnsubscription(mpnUnsubscribeFilterRequest, mpnUnsubscribeFilterTutor);\n    },\n    \n    /**\n     * A non-recoverable error causing the closing of the session.\n     */\n    onFatalError: function(error) {\n        this.sessionHandler.onFatalError(error);\n    }\n    \n  };\n  \n  \n  export default LightstreamerEngine;\n  \n\n","//we may make this an extension of request?\n\nimport LoggerManager from \"../../src-log/LoggerManager\";\nimport Constants from \"../Constants\";\n    \n  var requestsLogger = LoggerManager.getLoggerProxy(Constants.REQUESTS);\n\n  function ControlRequest(request,related,_type,relatedKey,retryingOrHost) {\n    this.request = request;\n    this.related = related;\n    this.relatedKey = relatedKey;\n    this._type = _type;\n    this.retryingOrHost = retryingOrHost;\n  }\n\n  ControlRequest.ADD = 1;\n  ControlRequest.REMOVE = 2;\n  ControlRequest.CONSTRAINT = 3;\n  ControlRequest.MESSAGE = 4;\n  ControlRequest.LOG = 5;\n  ControlRequest.DESTROY = 6;\n  ControlRequest.FORCE_REBIND = 7;\n  ControlRequest.HEARTBEAT = 8;  \n  ControlRequest.CHANGE_SUB = 9;\n  ControlRequest.MPN = 10;\n\n\n  ControlRequest.prototype = {\n    toString: function() {\n      var req = (requestsLogger.isDebugLogEnabled() ? JSON.stringify(this.request) : this.request);\n      return [\"[\",\"ControlRequest\",this.relatedKey,this._type,this.retryingOrHost,req,\"]\"].join(\"|\");\n    },\n    \n    getBridge: function() {\n      return this.related;\n    },\n    \n    getKey: function() {\n      return this.relatedKey;\n    },\n    \n    getType: function() {\n      return this._type;\n    },\n    \n    getRequest: function() {\n      return this.request;\n    }\n    \n   \n  };\n  \n  export default ControlRequest;\n  \n","import Executor from \"../../src-tool/Executor\";\nimport BrowserDetection from \"../../src-tool/BrowserDetection\";\nimport ASSERT from \"../../src-test/ASSERT\";\nimport LoggerManager from \"../../src-log/LoggerManager\";\nimport Helpers from \"../../src-tool/Helpers\";\nimport RequestsHelper from \"./RequestsHelper\";\nimport MadTester from \"./MadTester\";\nimport WebSocketConnection from \"../net/WebSocketConnection\";\nimport SessionHTTP from \"./SessionHTTP\";\nimport SessionWS from \"./SessionWS\";\nimport EnvironmentStatus from \"../../src-tool/EnvironmentStatus\";\nimport Global from \"../Global\";\nimport PushEvents from \"./PushEvents\";\nimport ControlRequest from \"../control/ControlRequest\";\nimport Constants from \"../Constants\";\nimport SlowingHandler from \"./SlowingHandler\";\nimport ControlConnectionHandler from \"../control/ControlConnectionHandler\";\nimport SendMessageHandler from \"../control/SendMessageHandler\";\nimport EvalQueue from \"./EvalQueue\";\nimport Utils from \"../Utils\";\nimport Assertions from \"../utils/Assertions\";\n  \n  var _OFF = 1;\n  var STREAMING_WS = 2;\n  var SWITCHING_STREAMING_WS = 3;\n  var POLLING_WS = 4;\n  var SWITCHING_POLLING_WS = 5;\n  var STREAMING_HTTP = 6;\n  var SWITCHING_STREAMING_HTTP = 7;\n  var POLLING_HTTP = 8;\n  var SWITCHING_POLLING_HTTP = 9;\n  var END = 10;\n  \n  //frozen is used if a status can't change transport because the setForcedTransport simply specified WS or HTTP \n  var FROZEN = \"_\";\n  var NOT_FROZEN = \"\";\n  \n  function toStr(_type){\n    switch(_type) {\n      case _OFF:\n        return \"No session\";\n      case STREAMING_WS:\n        return \"WS Streaming\";\n      case SWITCHING_STREAMING_WS:\n        return \"prepare WS Streaming\";\n      case POLLING_WS:\n        return \"WS Polling\";\n      case SWITCHING_POLLING_WS:\n        return \"prepare WS Polling\";\n      case STREAMING_HTTP:\n        return \"HTTP Streaming\";\n      case SWITCHING_STREAMING_HTTP:\n        return \"prepare HTTP Streaming\";\n      case POLLING_HTTP:\n        return \"HTTP Polling\";\n      case SWITCHING_POLLING_HTTP:\n        return \"prepare HTTP Polling\";\n      case END:\n        return \"Shutting down\";\n    }\n  }\n  \n  var CREATE_FALLS = {};\n  CREATE_FALLS[STREAMING_WS] = SWITCHING_STREAMING_HTTP;\n  CREATE_FALLS[STREAMING_HTTP] = SWITCHING_POLLING_HTTP;\n  CREATE_FALLS[POLLING_WS] = SWITCHING_STREAMING_WS;\n  CREATE_FALLS[POLLING_HTTP] = SWITCHING_STREAMING_WS;\n  \n  CREATE_FALLS[FROZEN+STREAMING_WS] = SWITCHING_STREAMING_WS; \n  CREATE_FALLS[FROZEN+STREAMING_HTTP] = SWITCHING_POLLING_HTTP; \n  CREATE_FALLS[FROZEN+POLLING_WS] = SWITCHING_STREAMING_WS; \n  CREATE_FALLS[FROZEN+POLLING_HTTP] = SWITCHING_STREAMING_HTTP;\n  \n  //NOTE, Polling HTTP actually never gives up http://goo.gl/81k22\n  var GIVEUP_FALLS = {};\n  GIVEUP_FALLS[STREAMING_WS] = SWITCHING_STREAMING_HTTP;\n  GIVEUP_FALLS[STREAMING_HTTP] = SWITCHING_POLLING_HTTP;\n  GIVEUP_FALLS[POLLING_WS] = SWITCHING_STREAMING_WS;\n  GIVEUP_FALLS[POLLING_HTTP] = SWITCHING_STREAMING_WS;\n  \n  GIVEUP_FALLS[FROZEN+STREAMING_WS] = SWITCHING_STREAMING_WS;\n  GIVEUP_FALLS[FROZEN+STREAMING_HTTP] = SWITCHING_POLLING_HTTP;\n  GIVEUP_FALLS[FROZEN+POLLING_WS] = SWITCHING_STREAMING_WS;\n  GIVEUP_FALLS[FROZEN+POLLING_HTTP] = SWITCHING_POLLING_HTTP;\n  \n  var FROZEN_CHECK = {};\n  FROZEN_CHECK[STREAMING_WS] = SWITCHING_STREAMING_WS;\n  FROZEN_CHECK[STREAMING_HTTP] = SWITCHING_STREAMING_HTTP;\n  FROZEN_CHECK[POLLING_WS] = SWITCHING_POLLING_WS;\n  FROZEN_CHECK[POLLING_HTTP] = SWITCHING_POLLING_HTTP;\n  \n  \n  \n  var SLOW_FALLS = {};\n  SLOW_FALLS[STREAMING_WS] = SWITCHING_POLLING_WS;\n  SLOW_FALLS[STREAMING_HTTP] = SWITCHING_POLLING_HTTP;\n  //a slow command can be issued while we're switching (while we wait for the loop command)\n  SLOW_FALLS[SWITCHING_STREAMING_HTTP] = SWITCHING_POLLING_HTTP;\n  SLOW_FALLS[SWITCHING_POLLING_HTTP] = SWITCHING_POLLING_HTTP;\n  //it's still not possible during SWITCHING_STREAMING_WS (unless we manually ask to switch) \n  //and during SWITCHING_POLLING_WS (unless we manually ask to switch we only switch to polling ws because\n  //of a slowing so that a second call is not possible because of the isSlowRequired check.) \n  \n  var SWITCHING_STATUSES = {};\n  SWITCHING_STATUSES[SWITCHING_STREAMING_WS] = true;\n  SWITCHING_STATUSES[SWITCHING_POLLING_WS] = true;\n  SWITCHING_STATUSES[SWITCHING_STREAMING_HTTP] = true;\n  SWITCHING_STATUSES[SWITCHING_POLLING_HTTP] = true;\n  \n  var STREAMING_SESSION = false;\n  var POLLING_SESSION = true;\n  var WS_SESSION = false;\n  var HTTP_SESSION = true;\n  \n  var AVOID_SWITCH = true;\n  var NO_RECOVERY = true;\n  var YES_RECOVERY = false;\n  \n  var protocolLogger = LoggerManager.getLoggerProxy(Constants.PROTOCOL);\n  var sessionLogger = LoggerManager.getLoggerProxy(Constants.SESSION);\n  \n  var objectIdCounter = 1;\n  \n  var SessionHandler = function(owner,ppHandler,mpnManager) {\n    this.objectId = objectIdCounter++;\n    if (sessionLogger.isDebugLogEnabled()) {\n        sessionLogger.logDebug(\"New session handler oid=\", this.objectId);\n    }\n    this.status = _OFF;\n    this.statusPhase = 0;\n    this.session = null;\n    \n    this.clientIP = null;\n    \n    this.frozen = NOT_FROZEN;\n    \n    this.owner = owner;\n    \n    this.pushPagesHandler = ppHandler;\n    this.policyBean = owner._policy;\n    this.connectionBean = owner._connection;\n    this.engineId =  owner.getEngineId();\n    \n    this.slowing = new SlowingHandler(this.policyBean,this.engineId);\n    this.pEvents = new PushEvents(this.engineId,ppHandler);\n    \n    EnvironmentStatus.addUnloadHandler(this);\n    \n    this.exportForceReload();\n    \n    this.disableXSXHRTime = null;\n        \n    this.controlHandler = new ControlConnectionHandler(this,owner._policy,this.engineId,false);\n    this.sendMessageHandler = new SendMessageHandler(this.controlHandler,this.pushPagesHandler,this.policyBean);\n    \n    this.mpnManager = mpnManager;\n    \n    /**\n     * Counts the bind_session requests following the corresponding create_session.\n     */\n    this.nBindAfterCreate = 0;\n  };\n\n  SessionHandler.prototype = {\n    \n      /*private*/ exportForceReload: function() {\n        var that = this;\n        \n        Global.exportGlobal(this.engineId,\"LS_forceReload\",function() {\n          if (that.session) {\n            that.session.onErrorEvent(\"server.exit\",{closedOnServer: true});\n          }\n        });\n      },\n      \n      /*private*/ changeStatus: function(newStatus) {\n        if (sessionLogger.isDebugLogEnabled()) {\n            sessionLogger.logDebug(\"SessionManager state change:\", toStr(this.status), \"->\", toStr(newStatus));\n        }\n        this.status = newStatus;\n        this.statusPhase++;\n      },\n      \n////////////////////////////////////////////////API CALLS\n      \n\n      /*public*/ closeSession: function(fromAPI,reason,noRecoveryScheduled) {\n        if (this.status == _OFF || this.status == END) {\n          return;\n        }\n        \n        if (this.session) {\n          this.session.closeSession(fromAPI?\"api\":reason,false,noRecoveryScheduled);\n        }\n      },\n      \n      disconnectAndReconnect: function() {\n          if (this.status == _OFF || this.status == END) {\n              return;\n          }\n          if (this.session) {\n              this.session.disconnectAndReconnect();\n          }\n      },\n\n      syncErrorOnControl: function() {\n        if (this.status == _OFF || this.status == END) {\n          return;\n        }\n\n        if (this.session) {\n          this.session.onSyncError(\"control.syncerror\");\n        }\n      },\n\n      /*private*/ isAlive: function() {\n        return this.status != _OFF && this.status != END;\n      },\n      \n      changeTransport: function(fromAPI, isTransportForced, isComboForced, isPolling, isHTTP) {\n          if (this.session != null && this.session.isActive()) {\n              /*\n               * the session is active: send a force_rebind\n               */\n              this.createOrSwitchSession(fromAPI, isTransportForced, isComboForced, isPolling, isHTTP);\n          } else {\n              /*\n               * the session is not active (i.e. TRYING-RECOVERY or WILL-RETRY):\n               * await that the client is connected and then bind the session with the new transport\n               */\n              var nextPH = isPolling ? (isHTTP ? SWITCHING_POLLING_HTTP : SWITCHING_POLLING_WS) : (isHTTP ? SWITCHING_STREAMING_HTTP : SWITCHING_STREAMING_WS);\n              this.status = nextPH;\n              this.session.switchRequired = true;\n          }\n      },\n      \n      retry: function(handlerPhase, retryCause, forced, serverBusy) {\n          if (handlerPhase != this.statusPhase) {\n              return;\n          }\n          \n          var strOrPoll = this.status === STREAMING_WS || this.status === STREAMING_HTTP ? STREAMING_SESSION : POLLING_SESSION;\n          var wsOrHttp = this.status === STREAMING_WS || this.status === POLLING_WS ? WS_SESSION : HTTP_SESSION;\n          \n          this.createSession(false,this.frozen,forced,strOrPoll,wsOrHttp,retryCause,serverBusy);\n      },\n      \n      /*public*/ createOrSwitchSession: function(fromAPI,isTransportForced,isComboForced,isPolling,isHTTP,_reason,avoidSwitch) {\n        \n        if (!avoidSwitch && this.isAlive()) {\n          this.switchSession(fromAPI,isTransportForced,isComboForced,isPolling,isHTTP,_reason);\n        } else {\n          this.createSession(fromAPI,isTransportForced,isComboForced,isPolling,isHTTP,_reason,false/*serverBusy*/);\n        }\n        \n      },\n      \n      switchSession: function(fromAPI,isTransportForced,isComboForced,isPolling,isHTTP,_reason) {\n          if (fromAPI) {\n              MadTester.init();\n          }\n            \n          this.disableCorsCheck();\n            \n          var reason = fromAPI?\"api\":_reason;\n            \n          this.frozen = isTransportForced ? FROZEN : NOT_FROZEN;\n            \n          var nextPH = isPolling ? (isHTTP ? SWITCHING_POLLING_HTTP : SWITCHING_POLLING_WS) : (isHTTP ? SWITCHING_STREAMING_HTTP : SWITCHING_STREAMING_WS);\n          this.changeStatus(nextPH);\n          this.startSwitchTimeout(reason);\n          this.session.requestSwitch(this.statusPhase,reason,isComboForced);\n      },\n      \n      createSession: function(fromAPI,isTransportForced,isComboForced,isPolling,isHTTP,_reason,serverBusy) {\n          if (fromAPI) {\n              MadTester.init();\n          }\n\n          this.disableCorsCheck();\n\n          var reason = fromAPI?\"api\":_reason;\n\n          this.frozen = isTransportForced ? FROZEN : NOT_FROZEN;\n\n          //there is no session active or we want to start from scratch\n          \n          this.resetControlHandlers();\n          \n          var currSessionId = this.session ? this.session.getSessionId() : null;\n          \n          reason = \"new.\"+reason;\n          this.closeSession(false,reason,YES_RECOVERY);\n          \n          var nextPH = isPolling ? (isHTTP ? POLLING_HTTP : POLLING_WS) : (isHTTP ? STREAMING_HTTP : STREAMING_WS);\n          this.changeStatus(nextPH);\n\n          if (this.session != null) {\n            this.session.shutdown(false);\n          }\n          this.prepareNewSessionInstance(isPolling,isComboForced,isHTTP);\n          \n          this.session.createSession(currSessionId,reason,serverBusy);\n      },\n      \n      /*private*/ prepareNewSessionInstance: function(isPolling,isForced,isHTTP,prevSession,sessionRecovery) {\n        var skipCors = this.disableXSXHRTime !== null;\n        var chosenClass = isHTTP ? SessionHTTP : SessionWS;\n        if (sessionRecovery) {\n            /*\n             * Check added to avoid a bug in HTTP polling.\n             * When a poll fails, we must not disable CORS\n             * because the error can be recoverable.\n             */\n            skipCors = false;\n        }\n        this.session = new chosenClass(\n        \t\tisPolling,\n        \t\tisForced,\n        \t\tthis,\n        \t\tthis.statusPhase,\n        \t\tprevSession,\n        \t\tskipCors,\n        \t\tsessionRecovery,\n        \t\tthis.mpnManager);\n        if (prevSession) {\n          prevSession.shutdown();//close it without killing the session, the new session is taking its place\n        }\n        this.slowing.changeSession(this.session);\n        if (this.evalQueue) {\n          this.evalQueue.changeSession(this.session);\n        }\n        this.pEvents.changeSession(this.session);\n        \n      },\n      \n      /*private*/ bindSession: function(isForced,isPolling,isHTTP,switchCause) {\n        var nextPH = isPolling ? (isHTTP ? POLLING_HTTP : POLLING_WS) : (isHTTP ? STREAMING_HTTP : STREAMING_WS);\n        this.changeStatus(nextPH);\n        \n        this.prepareNewSessionInstance(isPolling,isForced,isHTTP,this.session);\n        \n        this.session.bindSession(switchCause);       \n      },\n      \n      /*public*/ recoverSession: function(ph,switchCause,forced) {\n          sessionLogger.logDebug(\"Session recovery\", switchCause);\n          if (ph != this.statusPhase) {\n              sessionLogger.logDebug(\"Session recovery: cancelled\");\n              return;\n          }\n          \n          /* \n           * Since this is a recovery, we keep the same transport we had before the network error\n           * (FROZEN_CHECK makes a transition from a transport to itself).\n           */\n          var switchType = FROZEN_CHECK[this.status] || this.status;\n          var isPolling = switchType == SWITCHING_STREAMING_WS || switchType == SWITCHING_STREAMING_HTTP ? STREAMING_SESSION : POLLING_SESSION;\n          var isHTTP = switchType == SWITCHING_STREAMING_WS || switchType == SWITCHING_POLLING_WS ? WS_SESSION : HTTP_SESSION;\n          var nextPH = isPolling ? (isHTTP ? POLLING_HTTP : POLLING_WS) : (isHTTP ? STREAMING_HTTP : STREAMING_WS);\n          this.changeStatus(nextPH);\n          \n\t\t  this.prepareNewSessionInstance(isPolling,forced,isHTTP,this.session,true);\n          this.session.recoverSession();\n      },\n      \n      shouldGiveUpTrying: function() {\n        //if is frozen (i.e. forced transport, not forced method) and the next connection is gonna try is the same \n        //as the last just tried.\n        return this.frozen == FROZEN && FROZEN_CHECK[this.status] == GIVEUP_FALLS[this.frozen+this.status]; //switchType\n      },\n      \n      //AKA request switch\n      onSessionGivesUp: function(ph,reason,stop) {\n        if (ph != this.statusPhase) {\n          return;\n        } else if (stop) {\n          //we can't go on this way\n          //but we don't want to go on in any other way\n          //so stop everything and go home\n          sessionLogger.logInfo(\"Can't initiate session, giving up, disabling automatic reconnections\");\n          \n          this.changeStatus(_OFF);\n          return;\n        }\n        \n        var switchType = GIVEUP_FALLS[this.status] || this.status;\n        if (switchType == SWITCHING_STREAMING_HTTP && BrowserDetection.isProbablyEdge()) {\n            /*\n             * HTTP streaming is broken in Edge. \n             * The browser notifies to the client only a piece of the bind_session response sent by the server\n             * causing a timeout and a change of transport.\n             * See https://organizza.5pmweb.com/?def=1&task=2742\n             */\n            switchType = SWITCHING_POLLING_HTTP;\n        }\n        \n        sessionLogger.logInfo(\"Unable to establish session of the current type. Switching session type\", toStr(this.status),toStr(switchType));\n        \n        if (switchType == _OFF || switchType == END) {\n        //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n          ASSERT.fail();\n        //>>excludeEnd(\"debugExclude\");\n          sessionLogger.logError(\"Unexpected fallback type; switching because the current session type cannot be established\");\n          return;\n        }\n        \n        this.changeStatus(switchType);\n        \n        this.startSwitchTimeout(reason);\n        this.session.requestSwitch(this.statusPhase,reason,false);\n        \n      },\n      \n      onSlowRequired: function(ph) {\n        if (ph != this.statusPhase) {\n          return;\n        }\n        \n        //redundant as session checks itself before calling the handler\n        /*if (this.session.isSlowRequired()) {\n          //nothing to do\n          return;\n        }*/\n        \n        var switchType = SLOW_FALLS[this.status];\n        \n        sessionLogger.logInfo(\"Slow session detected. Switching session type\", toStr(this.status),toStr(switchType));\n        \n        if(!switchType) {\n        //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n          ASSERT.fail();\n        //>>excludeEnd(\"debugExclude\");\n          sessionLogger.logError(\"Unexpected fallback type; switching because of a slow connection was detected\", toStr(this.status), this.session);\n          return;\n        }\n        this.changeStatus(switchType);\n        \n        this.startSwitchTimeout(\"slow\");\n        this.session.requestSlow(this.statusPhase);\n        \n      },\n      \n      createMachine: function(ph,switchCause,forced) {\n        if (ph != this.statusPhase) {\n          return;\n        }\n        \n        var switchType = CREATE_FALLS[this.frozen+this.status] || this.status;\n        sessionLogger.logInfo(\"Setting up new session type\", toStr(this.status),toStr(switchType));\n        \n        if (switchType == _OFF || switchType == END) {\n        //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n          ASSERT.fail();\n        //>>excludeEnd(\"debugExclude\");\n          sessionLogger.logError(\"Unexpected fallback type switching with new session\");\n          return;\n        }\n        \n        var strOrPoll = switchType == SWITCHING_STREAMING_WS || switchType == SWITCHING_STREAMING_HTTP ? STREAMING_SESSION : POLLING_SESSION;\n        var wsOrHttp = switchType == SWITCHING_STREAMING_WS || switchType == SWITCHING_POLLING_WS ? WS_SESSION : HTTP_SESSION;\n         \n        //if we enter the createMachine the status of the session is unknown, so we can't recover by switching so \n        //we ask to AVOID_SWITCH\n        this.createOrSwitchSession(false,this.frozen==FROZEN,forced,strOrPoll,wsOrHttp,switchCause,AVOID_SWITCH);\n        \n      },\n      \n      switchMachine: function(ph,switchCause,forced) {\n        if (ph != this.statusPhase) {\n          return;\n        }\n        \n        var switchType = this.status;\n        sessionLogger.logInfo(\"Switching current session type\", toStr(this.status));\n        \n        if (!SWITCHING_STATUSES[switchType]) {\n        //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n          ASSERT.fail();\n        //>>excludeEnd(\"debugExclude\");\n          sessionLogger.logError(\"Unexpected fallback type switching with a force rebind\");\n          return;\n        }\n        \n        var strOrPoll = switchType == SWITCHING_STREAMING_WS || switchType == SWITCHING_STREAMING_HTTP ? STREAMING_SESSION : POLLING_SESSION;\n        var wsOrHttp = switchType == SWITCHING_STREAMING_WS || switchType == SWITCHING_POLLING_WS ? WS_SESSION : HTTP_SESSION;\n         \n        this.bindSession(forced,strOrPoll,wsOrHttp,switchCause);\n        \n      },\n      \n      slowMachine: function(ph) {\n        sessionLogger.logInfo(\"Slow session switching\");\n        this.switchMachine(ph,\"slow\",false);      \n      },\n      \n      switchTimeout: function(ph,reason) {\n        if (ph != this.statusPhase) {\n          return;\n        }\n        \n        \n        var switchType = this.status;\n        \n        sessionLogger.logInfo(\"Failed to switch session type. Starting new session\", toStr(this.status));\n        \n        if (!SWITCHING_STATUSES[switchType]) {\n        //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n          ASSERT.fail();\n        //>>excludeEnd(\"debugExclude\");\n          sessionLogger.logError(\"Unexpected fallback type switching because of a failed force rebind\");\n          return;\n        }\n        \n        reason = \"switch.timeout.\"+reason;\n        \n        var strOrPoll = switchType == SWITCHING_STREAMING_WS || switchType == SWITCHING_STREAMING_HTTP ? STREAMING_SESSION : POLLING_SESSION;\n        var wsOrHttp = switchType == SWITCHING_STREAMING_WS || switchType == SWITCHING_POLLING_WS ? WS_SESSION : HTTP_SESSION;\n         \n        this.createOrSwitchSession(false,this.frozen==FROZEN,false,strOrPoll,wsOrHttp,reason,AVOID_SWITCH);\n        \n      },\n      \n      startSwitchTimeout: function(reason) {\n        var _timeout = this.policyBean.switchCheckTimeout + (this.slowing.getDelay()||0);\n       \n        Executor.addTimedTask(this.switchTimeout,_timeout,this,[this.statusPhase,reason]);\n      },\n      \n////////////////////////////////////////////////////CONTROL\n      \n      /*private*/ resetControlHandlers: function() {\n        //le richieste di controllo devono essere tutte riproposte.\n        //Elimino quelle accumulate finora.\n        this.controlHandler._reset();\n        \n        // riazzero lo stato delle sendMessage;\n        // sulla nuova sessione dovranno ripartire da 0\n        this.sendMessageHandler._close();\n        \n      },\n      \n      /*public*/ connectionsEnableFlagsChanged: function() {\n        var skipCors = this.disableXSXHRTime !== null;\n        if (this.session) {\n          this.session.resetConnectionList(skipCors);\n        }\n        if (this.controlHandler) {\n          this.controlHandler.resetConnectionList(skipCors);\n        }\n      },\n      \n      /*public*/ onCorsError: function(ph) {\n        if (ph != this.statusPhase) {\n          return;\n        }\n        /*\n\t\t * 23/05/2018\n\t\t * Never disable Cross-origin feature\n\t\t */\n        //this.disableXSXHRTime = Helpers.getTimeStamp();\n        this.connectionsEnableFlagsChanged();\n      },\n      \n      /*private*/ disableCorsCheck: function() {\n        if (this.disableXSXHRTime === null) {\n          return;\n        }\n        var diff = Helpers.getTimeStamp() - this.disableXSXHRTime;\n        if (diff > 1000) {\n          this.disableXSXHRTime = null;\n          this.connectionsEnableFlagsChanged();\n        }\n      },\n      \n////////////////////////////////////////////////GETTERS\n      \n      isSessionOpen: function() {\n        return !this.session ? null : this.session.isOpen();\n      },\n      \n      isSessionOpenOrRecovering: function() {\n        return !this.session ? null : this.session.isOpen() || this.session.isRecovering();\n      },\n      \n      getHighLevelStatus: function() {\n        return !this.session ? Constants.DISCONNECTED : this.session.getHighLevelStatus();\n      },\n      \n      getSessionHost: function() {\n        return !this.session ? null : this.session.getSessionHost();\n      },\n      \n      /*public*/ getPushServerAddress: function() {\n        return !this.session ? this.connectionBean.serverAddress : this.session.getPushServerAddress();\n      },\n      \n      getSessionId: function() {\n        return !this.session ? null : this.session.getSessionId();\n      },\n      \n      /*public*/ getPolicyBean: function() {\n        return this.policyBean;\n      },\n      \n      /*public*/ getConnectionBean: function() {\n        return this.connectionBean;\n      },\n      \n      /*public*/ getSlowing: function() {\n        return this.slowing;\n      },\n      \n      /*public*/ getEvalQueue: function() {\n        if (!this.evalQueue || !this.evalQueue.stillValid()) {\n            this.evalQueue = new EvalQueue(this.engineId);\n            this.evalQueue.changeSession(this.session);\n        }\n        return this.evalQueue;\n      },\n      \n      /* public */ dispose: function() {\n        if (this.evalQueue) {\n          this.evalQueue.dispose();\n        }\n        EnvironmentStatus.removeUnloadHandler(this);\n      },\n      \n      unloadEvent: function() {\n        this.closeSession(false,\"unload\",NO_RECOVERY);\n        this.changeStatus(END);\n      },\n      \n      /*public*/ getControlConnectionHandler: function() {\n        return this.controlHandler;\n      },\n      \n      getEngineId: function() {\n        return this.engineId;\n      },\n      \n////////////////////////////////////////////////PUSH EVENTS \n\n      statusChanged: function(ph) {\n        if (ph != this.statusPhase) {\n          return;\n        }\n        \n        this.owner.notifyLSStatus();\n      },\n      \n      /*public*/ onSessionStart: function(requestLimitLength) {\n        sessionLogger.logInfo(\"Session started\",this.session);\n        \n        this.onChangeRequestLimitLength(requestLimitLength);\n        \n        this.sendMessageHandler.activate();\n        \n        this.owner.onSessionStart();\n        \n        this.handleReverseHeartbeat(false);\n        \n        this.nBindAfterCreate = 0;\n      },\n      \n      onChangeRequestLimitLength: function(requestLimitLength) {\n          if (requestLimitLength) {\n              this.controlHandler.setRequestLimit(requestLimitLength);\n          }\n      },\n      \n      /*public*/ onSessionBound: function() {\n          if (this.nBindAfterCreate == 0) {\n              /*\n               * The check is needed to distinguish a true change of session (i.e. a new session id)\n               * from a change of transport preserving the session.\n               * We are only interested in true change of session.\n               */\n              this.mpnManager.eventManager.onSessionStart();\n          }\n          this.nBindAfterCreate++;\n      },\n      \n      /*public*/ onSessionClose: function(ph,noRecoveryScheduled) {\n        if (ph != this.statusPhase) {\n          return null;\n        }\n        \n        sessionLogger.logDebug(\"Session closed\",this.session);\n        \n        this.resetControlHandlers();\n        this.owner.onSessionEnd();\n        if(noRecoveryScheduled) {\n          this.changeStatus(_OFF);\n        } else {\n          this.changeStatus(this.status);//so that the statusPhase changes\n        }\n        \n        this.mpnManager.eventManager.onSessionClose(! noRecoveryScheduled);\n        \n        return this.statusPhase;\n      },\n\n      /*public*/ onUpdateReceived: function(args,snap) {\n        // table number which this update is related to is in args[0]\n        this.pushPagesHandler.onSubscriptionEvent(args[0]);\n        var ppHandler = this.pushPagesHandler.getPushPageHandlerFromTableNumber(args[0]);\n        \n        if (!ppHandler) {\n          protocolLogger.logDebug(\"Discarding update for dismissed page\",this);\n          return;\n        }\n        \n        if (protocolLogger.isDebugLogEnabled()) {\n          protocolLogger.logDebug(\"Received new update\",args);\n        }\n        ppHandler.onUpdate(args,snap);\n      },\n      \n      \n      \n      /*public*/ onLostUpdatesEvent: function(args) {\n        this.pushPagesHandler.onSubscriptionEvent(args[0]);\n        var ppHandler = this.pushPagesHandler.getPushPageHandlerFromTableNumber(args[0]);\n        if (!ppHandler) {\n          //we used to call the deletes here, but when a page disappears its delete are \n          //automatically sent so we can just return\n          protocolLogger.logDebug(\"Discarding lost updates notification for dismissed page\",this);\n          return;\n        }\n        \n        if (protocolLogger.isDebugLogEnabled()) {\n          protocolLogger.logDebug(\"Received lost updates event\",args);\n        }\n        \n        \n        //send the overflow to the page\n        ppHandler.onLostUpdates(args[0],args[1],args[2]);\n        \n      },\n      \n      /*public*/ onEndOfSnapshotEvent: function(args) {\n        this.pushPagesHandler.onSubscriptionEvent(args[0]);\n        var ppHandler = this.pushPagesHandler.getPushPageHandlerFromTableNumber(args[0]);\n        if (!ppHandler) {\n          //we used to call the deletes here, but when a page disappears its delete are \n          //automatically sent so we can just return\n          protocolLogger.logDebug(\"Discarding end of snapshot notification for dismissed page\",this);\n          return;\n        }\n        \n        if (protocolLogger.isDebugLogEnabled()) {\n          protocolLogger.logDebug(\"Received end of snapshot event\",args);\n        }\n        \n        ppHandler.onEndOfSnapshot(args[0],args[1]);\n      },\n      \n      /*public*/ onClearSnapshotEvent: function(args) {\n        this.pushPagesHandler.onSubscriptionEvent(args[0]);\n        var ppHandler = this.pushPagesHandler.getPushPageHandlerFromTableNumber(args[0]);\n        if (!ppHandler) {\n          //we used to call the deletes here, but when a page disappears its delete are \n          //automatically sent so we can just return\n          protocolLogger.logDebug(\"Discarding snapshot clearing notification for dismissed page\",this);\n          return;\n        }\n        \n        if (protocolLogger.isDebugLogEnabled()) {\n          protocolLogger.logDebug(\"Received snapshot clearing event\",args);\n        }\n        \n        ppHandler.onClearSnapshot(args[0],args[1]);\n      },\n      \n      /*public*/ onServerError: function(flag,msg) {\n        if (protocolLogger.isDebugLogEnabled()) {\n          protocolLogger.logDebug(\"Received server error event\",flag,msg);\n        }\n        this.changeStatus(_OFF);\n        this.pushPagesHandler.notifyServerError(flag,msg);\n      },\n      \n      /*public*/ onTableError: function(tableCode,flag,msg) {\n\n        var ppHandler = this.pushPagesHandler.getPushPageHandlerFromTableNumber(tableCode);\n        if (ppHandler) {\n          if (protocolLogger.isDebugLogEnabled()) {\n            protocolLogger.logDebug(\"Received subscription error event\",tableCode,flag,msg);\n          }\n          ppHandler.onSubscriptionError(tableCode,flag,msg);\n        } else {\n          //we used to call the deletes here, but when a page disappears its delete are\n          //automatically sent so we can just return\n          protocolLogger.logDebug(\"Discarding subscription error notification for dismissed page\",this);\n        }\n\n        this.pushPagesHandler.onSubscriptionError(tableCode);\n\n\n    },\n      \n      /*public*/ onUnsubscription: function(tableCode) {\n        var ppHandler = this.pushPagesHandler.getPushPageHandlerFromTableNumber(tableCode);\n        if (ppHandler) {\n          if (protocolLogger.isDebugLogEnabled()) {\n            protocolLogger.logDebug(\"Received unsubscription event\",tableCode);\n          }\n\n          ppHandler.onUnsubscription(tableCode);\n        } else {\n          //we used to call the deletes here, but when a page disappears its delete are\n          //automatically sent so we can just return\n          protocolLogger.logDebug(\"Discarding unsubscription notification for dismissed page\",this);\n        }\n\n        this.pushPagesHandler.onUnsubscription(tableCode);\n\n      },\n      \n      /*public*/ onSubscriptionReconf: function(tableCode,ph,frequency) {\n        if (protocolLogger.isDebugLogEnabled()) {\n          protocolLogger.logDebug(\"Received reconfiguration OK event\",tableCode,ph,frequency);\n        }\n        \n        this.pushPagesHandler.onSubscriptionReconfEvent(tableCode,ph);\n        \n        var ppHandler = this.pushPagesHandler.getPushPageHandlerFromTableNumber(tableCode);\n        if (ppHandler != null) {\n            ppHandler.onSubscriptionReconf(tableCode, frequency);\n        } else {\n            protocolLogger.logWarn(\"Table of reconfiguration not found\", tableCode);\n        }\n      },\n      \n      /*public*/ onSubscription: function(tableCode,numOfSubscribedItems,numOfSubscribedFields,keyPos,commandPos) {\n        this.pushPagesHandler.onSubscription(tableCode);\n\n        var ppHandler = this.pushPagesHandler.getPushPageHandlerFromTableNumber(tableCode);\n        if (!ppHandler) {\n          //we used to call the deletes here, but when a page disappears its delete are\n          //automatically sent so we can just return\n          protocolLogger.logDebug(\"Discarding subscription notification for dismissed page\",this);\n          return;\n        }\n\n        if (protocolLogger.isDebugLogEnabled()) {\n          protocolLogger.logDebug(\"Received subscription event\",tableCode,numOfSubscribedItems,numOfSubscribedFields,keyPos,commandPos);\n        }\n\n        ppHandler.onSubscription(tableCode,keyPos,commandPos,numOfSubscribedItems,numOfSubscribedFields);\n      },\n      \n      /*public*/ onMessageAck: function(sequence,num) {\n        if (protocolLogger.isDebugLogEnabled()) {\n          protocolLogger.logDebug(\"Received message ack\",sequence,num);\n        }\n        \n        this.sendMessageHandler.ack(sequence, num);\n      },\n      \n      onMessageOk: function(sequence,num) {\n        if (protocolLogger.isDebugLogEnabled()) {\n          protocolLogger.logDebug(\"Received message-ok notification\",sequence,num);\n        }\n        \n        this.sendMessageHandler._complete(sequence, num);\n      },\n      \n      // <= 0 message rejected by the Metadata Adapter\n      onMessageDeny: function(sequence,flag,msg,num) {\n        if (protocolLogger.isDebugLogEnabled()) {\n          protocolLogger.logDebug(\"Received message-deny notification\",sequence,num,flag,msg);\n        }\n        \n        this.sendMessageHandler.notifyDenied(sequence,flag,num,msg);\n      },\n            \n      // 38 message has not arrived in time (and perhaps never come)\n      /*public*/ onMessageDiscarded: function(sequence,num) {\n        if (protocolLogger.isDebugLogEnabled()) {\n          protocolLogger.logDebug(\"Received message-discarded notification\",sequence,num);\n        }\n        \n        this.sendMessageHandler.notifyDiscarded(sequence,num);\n      },\n      \n      // 34 request deemed invalid by the Metadata Adapter\n      // 35 unexpected error in message processing\n      /*public*/ onMessageError: function(sequence,flag,msg,num) {\n        if (protocolLogger.isDebugLogEnabled()) {\n          protocolLogger.logDebug(\"Received message-error notification\",sequence,num,flag,msg);\n        }\n        \n         this.sendMessageHandler.notifyError(sequence,flag,num,msg);\n      },\n      \n      onObsoleteControlLink: function(serverAddress) {\n        // delete any links referring to the load balancer\n        this.owner.onObsoleteControlLink(serverAddress);\n      },\n      \n      onNewControlLink: function(serverAddress) {\n        if (protocolLogger.isDebugLogEnabled()) {\n          protocolLogger.logDebug(\"New control link received\",serverAddress);\n        }\n        this.owner.onNewControlLink(serverAddress);\n      },\n\n      onIPReceived: function(newIP) {\n        if (this.clientIP && newIP != this.clientIP && WebSocketConnection.isDisabledClass()) {\n          WebSocketConnection.restoreClass();\n          this.createOrSwitchSession(false,this.frozen==FROZEN,false,false,false,\"ip\",false);\n        }\n        this.clientIP = newIP;\n      },\n      \n      onServerKeepalive: function() {\n          this.owner.onServerKeepalive();\n      },\n      \n      \n////////////////////////////////////////////////CONTROLS\n\n      /*public*/ sendAMessage: function(msg, sequence, listener, delayTimeout) {\n        this.sendMessageHandler._send(msg, sequence, listener, delayTimeout);\n      },\n      \n      /*public*/ sendLog: function(msg,buildNum) {\n        var query = RequestsHelper.getLogRequestParams(this.statusPhase,msg,buildNum);\n\n        this.controlHandler.addRequest(null, query, ControlRequest.LOG, null);\n      },\n      \n      /*public*/ changeBandwidth: function(newBw) {\n        if (this.session) {\n          this.session.changeBandwidth();\n        }\n      },\n      \n      /*public*/ sendSubscription: function(tableNum,addBody,ppHandler,retrying,tutor) {\n        var requestListener = {\n                onREQOK: function(LS_window) {\n                    // nothing to do: expecting SUBOK\n                },\n                \n                onREQERR: function(LS_window, phase, errorCode, errorMsg) {\n                    LS_window.LS_l(errorCode, phase, tableNum, errorMsg);\n                }\n        };\n        this.controlHandler.addRequest(tableNum, addBody, ControlRequest.ADD, tutor, retrying, requestListener);\n      },\n      \n      /*public*/ sendUnsubscription: function(tableNum,delBody,ppHandler,retrying,tutor) {\n          var requestListener = {\n                  onREQOK: function(LS_window) {\n                      // nothing to do: expecting UNSUB\n                  },\n\n                  onREQERR: function(LS_window, phase, errorCode, errorMsg) {\n                      // it is possible that if an unsubscription request immediately follows \n                      // a subscription request, the server, which processes the requests \n                      // in parallel, processes the unsubscription before the subscription. \n                      // but since there is no active subscription at the moment, the server returns \n                      // the error 19 to the client. \n                      // in that case the client should resend the unsubscription request in order to \n                      // free resources on the server. \n                      // this is achieved by not discarding the retransmission tutor.\n                      if (errorCode != 19) {\n                        tutor.discard();\n                      }\n                      sessionLogger.logError(\"unsubscription request \" + printObj(delBody) + \" caused the error: \", errorCode, errorMsg);\n                  }\n          };\n          this.controlHandler.addRequest(tableNum,delBody,ControlRequest.REMOVE, tutor, retrying, requestListener);\n      },\n      \n      /*public*/ sendSubscriptionChange: function(tableNum,changeBody,tutor) {\n          var requestListener = {\n                  onREQOK: function(LS_window) {\n                      // nothing to do: expecting CONF\n                  },\n\n                  onREQERR: function(LS_window, phase, errorCode, errorMsg) {\n                      tutor.discard();\n                      sessionLogger.logError(\"configuration request [\" + printObj(changeBody) + \"] caused the error: \" + errorCode + \" \" + errorMsg);\n                  }\n          };\n          this.controlHandler.addRequest(tableNum,changeBody,ControlRequest.CHANGE_SUB,tutor,null,requestListener);\n      },\n      \n      //not exactly part of this group, but close enough\n      /*public*/ handleReverseHeartbeat: function(force) {\n        if (this.session) {\n          this.session.handleReverseHeartbeat(force);\n        }\n      },\n      \n      /**\n       * Enqueues the response to a control request to the queue processing the message stream.\n       */\n      enqueueControlResponse: function (txtResponse) {\n          var phase = (this.session == null ? null : this.session.push_phase);\n          this.getEvalQueue()._enqueue(phase, txtResponse);\n      },\n      \n      sendRegisterForMpn: function(mpnRegisterRequest, mpnRegisterTutor) {\n          var that = this;\n          var requestListener = {\n                  onREQOK: function(LS_window) {\n                \t  mpnRegisterTutor.onResponse();\n                  },\n                  \n                  onREQERR: function(LS_window, phase, errorCode, errorMsg) {\n                      mpnRegisterTutor.onResponse();\n                \t  if (that.session != null) {\n                \t\t  that.session.onMpnRegisterError(errorCode, errorMsg);\n                \t  }\n                  }\n          };\n          var requestKey = mpnRegisterRequest.reqId;\n          var retryOrHost = null;\n          this.controlHandler.addRequest(\n                  requestKey, \n                  mpnRegisterRequest.query, \n                  ControlRequest.MPN, \n                  mpnRegisterTutor, \n                  retryOrHost, \n                  requestListener);\n      },\n      \n      sendMpnSubscription: function(mpnSubscribeRequest, mpnSubscribeTutor) {\n          var that = this;\n          var requestListener = {\n                  onREQOK: function(LS_window) {\n                      mpnSubscribeTutor.onResponse();\n                  },\n                  \n                  onREQERR: function(LS_window, phase, errorCode, errorMsg) {\n                      mpnSubscribeTutor.onResponse();\n                      if (that.session != null) {\n                          that.session.onMpnSubscribeError(mpnSubscribeRequest.subscriptionId, errorCode, errorMsg);\n                      }\n                  }\n          };\n          var requestKey = mpnSubscribeRequest.reqId;\n          var retryOrHost = null;\n          this.controlHandler.addRequest(\n                  requestKey, \n                  mpnSubscribeRequest.query, \n                  ControlRequest.MPN,\n                  mpnSubscribeTutor, \n                  retryOrHost, \n                  requestListener);\n      },\n      \n      sendMpnUnsubscription: function(mpnUnsubscribeRequest, mpnUnsubscribeTutor) {\n          var that = this;\n          var requestListener = {\n                  onREQOK: function(LS_window) {\n                      mpnUnsubscribeTutor.onResponse();\n                  },\n                  \n                  onREQERR: function(LS_window, phase, errorCode, errorMsg) {\n                      mpnUnsubscribeTutor.onResponse();\n                      if (that.session != null) {\n                          that.session.onMpnUnsubscribeError(mpnUnsubscribeRequest.subscriptionId, errorCode, errorMsg);\n                      }\n                  }\n          };\n          var requestKey = mpnUnsubscribeRequest.reqId;\n          var retryOrHost = null;\n          this.controlHandler.addRequest(\n                  requestKey, \n                  mpnUnsubscribeRequest.query, \n                  ControlRequest.MPN,\n                  mpnUnsubscribeTutor, \n                  retryOrHost, \n                  requestListener);\n      },\n      \n      sendMpnFilteredUnsubscription: function(mpnUnsubscribeFilterRequest, mpnUnsubscribeFilterTutor) {\n          var that = this;\n          var requestListener = {\n                  onREQOK: function(LS_window) {\n                      mpnUnsubscribeFilterTutor.onResponse();\n                  },\n                  \n                  onREQERR: function(LS_window, phase, errorCode, errorMsg) {\n                      mpnUnsubscribeFilterTutor.onResponse();\n                  }\n          };\n          var requestKey = mpnUnsubscribeFilterRequest.reqId;\n          var retryOrHost = null;\n          this.controlHandler.addRequest(\n                  requestKey, \n                  mpnUnsubscribeFilterRequest.query, \n                  ControlRequest.MPN, \n                  mpnUnsubscribeFilterTutor, \n                  retryOrHost, \n                  requestListener);\n      },\n      \n      /**\n       * A non-recoverable error causing the closing of the session.\n       */\n      onFatalError: function(error) {\n          sessionLogger.logError(\"Fatal error: \", error.stack || error);\n          if (this.session) {\n              this.session.onFatalError(61, \"Internal error: \" + error);\n          }\n      }\n      \n  };\n  \n  function printObj(obj) {\n      var s = \"{\";\n      for (var p in obj) {\n          s += p + \"=\" + obj[p] + \" \";\n      }\n      s += \"}\";\n      return s;\n  }\n\n  \n  SessionHandler.prototype[\"unloadEvent\"] = SessionHandler.prototype.unloadEvent;\n\n\n  export default SessionHandler;\n\n\n","import LoggerManager from \"../../src-log/LoggerManager\";\nimport Executor from \"../../src-tool/Executor\";\nimport Global from \"../Global\";\nimport ASSERT from \"../../src-test/ASSERT\";\nimport Constants from \"../Constants\";\nimport TlcpServerMessage from \"./TlcpServerMessage\";\nimport EncodingUtils from \"./EncodingUtils\";\n  \n  var streamLogger = LoggerManager.getLoggerProxy(Constants.STREAM);\n  \n  var EvalQueue = function(engId) {\n    this.engId = engId;\n        \n    this.equeue = [];\n\n    this.hasFailed = false;\n    this[\"lsc\"] = {};\n    this[\"lsc\"][\"LS_window\"] = Global[\"_\"+engId];\n    this[\"lsc\"][\"window\"] = this[\"lsc\"][\"LS_window\"];\n    this.LS_window = this['lsc']['LS_window'];\n    this.LS_l = this.LS_window['LS_l'];\n    this.LS_u = this.LS_window['LS_u'];\n    this.LS_w = this.LS_window['LS_w'];\n    this.LS_e = this.LS_window['LS_e'];\n    this.LS_svrname = this.LS_window['LS_svrname'];\n    this.LS_n = this.LS_window['LS_n'];\n    this.LS_s = this.LS_window['LS_s'];\n    this.LS_o = this.LS_window['LS_o'];\n    this.LS_l = this.LS_window['LS_l'];\n    this.LS_MPNREG = this.LS_window['LS_MPNREG'];\n    this.LS_MPNOK = this.LS_window['LS_MPNOK'];\n    this.LS_MPNDEL = this.LS_window['LS_MPNDEL'];\n    this.dequeueAction = this.generateClosure(this[\"lsc\"]);\n    /*\n     * If the server sends PROGs, the client captures messages between two consecutive PROGs\n     * to ease debugging in case of mismatch between the server and the client counters.\n     */\n    this.messageCaptureEnabled = false;\n    this.capturedMessages = [];\n  };\n  \n  EvalQueue.prototype = {\n    \n    /*public*/ toString: function() {\n      return \"[EvalQueue|\"+this.equeue.length+\"]\";\n    },\n    \n    generateClosure: function() {\n        var that = this;\n        return function(jobToDo) {\n            try {\n                that.parseText(jobToDo);\n                \n            } catch (e) {\n                that.LS_l(61, null, null, \"Malformed message received\");\n            }\n        };\n    },\n    \n    /*public*/ _enqueue: function(_phase,_data) {\n      if (!this.stillValid()) {\n        //this EvalQueue is corrupted, exit\n        return;\n      }\n      \n      this.equeue.push({p:_phase,d:_data});\n      \n      if (streamLogger.isDebugLogEnabled()) {\n        streamLogger.logDebug(\"Enqueuing received data\");\n      }\n     \n      //this.dequeueAll();\n      Executor.addTimedTask(this.dequeueAll,0,this);\n    },\n    \n    /*public*/ changeSession: function(newSession) {\n      this.session = newSession;\n    },\n    \n    /*\n    * executes the eval with the received string\n    * it is launched in a new thread in fear that\n    * otherwise may cause the browser to not\n    * reuse connections and maintain the ajax_frame context / thread\n    * NOTE: it is now also used on XHR streaming responses.\n    */\n    /*private*/ dequeueAll: function() {\n      \n      if(streamLogger.isDebugLogEnabled()) {\n        streamLogger.logDebug(\"Dequeuing received data\",this.equeue.length);\n      }\n      \n      \n      while (this.equeue.length > 0) {\n        var _el = this.equeue.shift();\n        \n        if (!this.session || !this.session.checkSessionPhase(_el.p)) {\n          streamLogger.logWarn(\"Data can't be handled\", _el.p, _el.d, this.session);\n          continue;\n        }\n        \n        \n        try {\n          this.dequeueAction(_el.d);\n        } catch(_e) {\n          this.hasFailed = true;\n          this.equeue = []; //prevent continuation on a corrupted flow\n        //>>excludeStart(\"debugExclude\", pragmas.debugExclude);   \n          console.log(_e);\n        //>>excludeEnd(\"debugExclude\");\n          streamLogger.logError(\"Unexpected error occurred while executing server-sent commands!\",_e,_el.d);\n          this.session.evaluationError();\n        }\n        \n      }\n      \n    },\n    \n    stillValid: function() {\n      return !this.hasFailed;\n    },\n    \n    dispose: function() {\n      \n    },\n    \n    parseText: function(text) {\n        var phase = null;\n        var lines = text.split('\\r\\n');\n        for (var i = 0; i < lines.length; i++) {\n            var line = lines[i];\n            if (line == '') {\n                continue;\n            }\n            try {\n                var msg = new TlcpServerMessage(line);\n                if (this.messageCaptureEnabled) {\n                    this.capturedMessages.push(msg.getRawMsg());\n                }\n                switch (msg.getField(0)) {\n\n                case \"U\":\n                    this.processUpdate(msg);\n                    break;\n\n                case \"REQOK\":\n                    this.processREQOK(msg);\n                    break;\n\n                case \"SUBOK\":\n                    this.processSUBOK(msg);\n                    break;\n\n                case \"SUBCMD\":\n                    this.processSUBCMD(msg);\n                    break;\n\n                case \"UNSUB\":\n                    this.processUNSUB(msg);\n                    break;\n\n                case \"CONOK\":\n                    this.processCONOK(msg);\n                    break;\n\n                case \"SERVNAME\":\n                    this.processSERVNAME(msg);\n                    break;\n\n                case \"CLIENTIP\":\n                    this.processCLIENTIP(msg);\n                    break;\n\n                case \"CONS\":\n                    this.processCONS(msg);\n                    break;\n\n                case \"LOOP\":\n                    this.processLOOP(msg);\n                    break;\n\n                case \"PROG\":\n                    this.processPROG(msg);\n                    break;\n\n                case \"CONERR\":\n                    this.processCONERR(msg);\n                    break;\n\n                case \"REQERR\":\n                    this.processREQERR(msg);\n                    break;\n\n                case \"ERROR\":\n                    this.processERROR(msg);\n                    break;\n\n                case \"MSGDONE\":\n                    this.processMSGDONE(msg);\n                    break;\n\n                case \"MSGFAIL\":\n                    this.processMSGFAIL(msg);\n                    break;\n\n                case \"EOS\":\n                    this.processEOS(msg);\n                    break;\n\n                case \"CS\":\n                    this.processCS(msg);\n                    break;\n\n                case \"OV\":\n                    this.processOV(msg);\n                    break;\n\n                case \"CONF\":\n                    this.processCONF(msg);\n                    break;\n\n                case \"PROBE\":\n                    this.processPROBE(msg);\n                    break;\n\n                case \"SYNC\":\n                    this.processSYNC(msg);\n                    break;\n\n                case \"NOOP\":\n                    break;\n\n                case \"END\":\n                    this.processEND(msg);\n                    break;\n                    \n                case \"MPNREG\":\n                    this.processMPNREG(msg);\n                    break;\n                    \n                case \"MPNOK\":\n                    this.processMPNOK(msg);\n                    break;\n                    \n                case \"MPNDEL\":\n                    this.processMPNDEL(msg);\n                    break;\n\n                default:\n                    throw new Error(\"Unknown message: \" + line);\n                }\n                \n            } catch (e) {\n                streamLogger.logError(\"Malformed message: \", line, e);\n                throw new Error(\"Malformed message: \" + line);\n            }\n        }\n    },\n    \n    processUpdate: function(msg) {\n        // U,<table>,<item>|<field1>|...|<fieldN>\n        // or U,<table>,<item>,<field1>|^<number of unchanged fields>|...|<fieldN>\n        var phase = null;\n        var table = msg.getFieldAsInt(1);\n        var item = msg.getFieldAsInt(2);\n        var updates = this.parseUpdates(msg.getRawMsg());\n        try {\n            this.LS_u(phase, [table, item].concat(updates));\n        } catch (e) {\n            streamLogger.logError(\"Unexpected update\", e);\n        }\n    },\n    \n    processSUBOK: function(msg) {\n        // SUBOK,<table>,<total items>,<total fields>\n        var phase = null;\n        var table = msg.getFieldAsInt(1);\n        var totalItems = msg.getFieldAsInt(2);\n        var totalFields = msg.getFieldAsInt(3);\n        this.LS_w(6, phase, table, totalItems, totalFields, -1, -1);\n    },\n    \n    processSUBCMD: function(msg) {\n        // SUBCMD,<table>,<total items>,<total fields>,<key field>,<command field>\n        var phase = null;\n        var table = msg.getFieldAsInt(1);\n        var totalItems = msg.getFieldAsInt(2);\n        var totalFields = msg.getFieldAsInt(3);\n        var keyPos = msg.getFieldAsInt(4);\n        var cmdPos = msg.getFieldAsInt(5);\n        this.LS_w(6, phase, table, totalItems, totalFields, keyPos - 1, cmdPos - 1);\n    },\n    \n    processUNSUB: function(msg) {\n        // UNSUB,<table>\n        var phase = null;\n        var table = msg.getFieldAsInt(1);\n        this.LS_w(8, phase, table);\n    },\n    \n    processCONOK: function(msg) {\n        // CONOK,<session id>,<request limit>,<keep alive>,<control link>\n        var phase = null;\n        var sessionId = msg.getField(1);\n        var reqLimit = msg.getFieldAsInt(2);\n        var keepAlive = msg.getFieldAsInt(3);\n        var controlLink = msg.getField(4) == '*' ? null : msg.getField(4);\n        this.LS_e(1, phase, sessionId, controlLink, keepAlive, reqLimit);\n    },\n    \n    processSERVNAME: function(msg) {\n        // SERVNAME,<name>\n        var serverName = msg.getField(1);\n        this.LS_svrname(serverName);\n    },\n    \n    processCLIENTIP: function(msg) {\n        // CLIENTIP,<ip>\n        var clientIp = msg.getField(1);\n        if (this.session != null) {\n            this.session.onIPReceived(clientIp);\n        }\n    },\n    \n    processCONS: function(msg) {\n        // CONS,(unmanaged|unlimited|<bandwidth>)\n        var phase = null;\n        var maxBandWidth;\n        var rawBandWidth = msg.getField(1);\n        if (rawBandWidth == \"unlimited\" || rawBandWidth == \"unmanaged\") {\n            maxBandWidth = rawBandWidth;\n        } else {\n            maxBandWidth = msg.getFieldAsFloat(1);\n        }\n        this.LS_e(5, phase, maxBandWidth);\n    },\n    \n    processLOOP: function(msg) {\n        var phase = null;\n        var loopMs = msg.getFieldAsInt(1);\n        this.LS_e(2, phase, loopMs);\n    },\n    \n    processCONERR: function(msg) {\n        // CONERR,<error code>,<error message>\n        var phase = null;\n        var errorCode = msg.getFieldAsInt(1);\n        var errorMsg = msg.getFieldUnquoted(2);\n        this.LS_l(errorCode, phase, null, errorMsg);\n    },\n    \n    processREQOK: function(msg) {\n        if (msg.getRawMsg() == \"REQOK\") {\n            // heartbeats and remote logs don't have reqId and don't need further handling\n            return;\n        }\n        // REQOK,<reqId>\n        var reqId = msg.getFieldAsInt(1);\n        var requestListener = this.getRequestListener(reqId);\n        if (requestListener != null) {\n            requestListener.onREQOK(this);\n        }\n    },\n    \n    processREQERR: function(msg) {\n        // REQERR,<reqId>,<errorCode>,<errorMsg>\n        var phase = null;\n        var reqId = msg.getFieldAsInt(1);\n        var errorCode = msg.getFieldAsInt(2);\n        var errorMsg = msg.getFieldUnquoted(3);\n        var requestListener = this.getRequestListener(reqId);\n        var listenerCallback = null;\n        if (requestListener != null) {\n            var that = this;\n            listenerCallback = function() {                \n                requestListener.onREQERR(that, phase, errorCode, errorMsg);\n            };\n        }\n        if (this.session != null) {\n            this.session.forwardREQERR(errorCode, errorMsg, listenerCallback);\n        }\n    },\n    \n    processERROR: function(msg) {\n        // ERROR,<errorCode>,<errorMsg>\n        var errorCode = msg.getFieldAsInt(1);\n        var errorMsg = msg.getFieldUnquoted(2);\n        if (this.session != null) {\n            this.session.forwardERROR(errorCode, errorMsg);\n        }\n    },\n    \n    processEOS: function(msg) {\n        // EOS,<table>,<item>\n        var phase = null;\n        var table = msg.getFieldAsInt(1);\n        var item = msg.getFieldAsInt(2);\n        this.LS_n(phase, [table, item]);\n    },\n    \n    processCS: function(msg) {\n        // CS,<table>,<item>\n        var phase = null;\n        var table = msg.getFieldAsInt(1);\n        var item = msg.getFieldAsInt(2);\n        this.LS_s(phase, [table, item]);\n    },\n    \n    processMSGDONE: function(msg) {\n        // MSGDONE,<sequence>,<prog>\n        var sequence = msg.getField(1);\n        if (sequence == '*') {\n            sequence = Constants._UNORDERED_MESSAGES;\n        }\n        var prog = msg.getFieldAsInt(2);\n        this.LS_w(5, prog, sequence, 0, 0);\n    },\n    \n    processMSGFAIL: function(msg) {\n        // MSGFAIL,<sequence>,<prog>,<error-code>,<error-message>\n        var sequence = msg.getField(1);\n        if (sequence == '*') {\n            sequence = Constants._UNORDERED_MESSAGES;\n        }\n        var prog = msg.getFieldAsInt(2);\n        var errCode = msg.getFieldAsInt(3);\n        var errMsg = msg.getFieldUnquoted(4);\n        this.LS_l(errCode, prog, \"MSG\" + sequence, errMsg);\n    },\n    \n    processOV: function(msg) {\n        // OV,<table>,<item>,<lost updates>\n        var phase = null;\n        var table = msg.getFieldAsInt(1);\n        var item = msg.getFieldAsInt(2);\n        var lost = msg.getFieldAsInt(3);\n        this.LS_o(phase, [table, item, lost]);\n    },\n    \n    processCONF: function(msg) {\n        // CONF,<table>,(unlimited|<frequency>),(filtered|unfiltered)\n        var phase = null;\n        var table = msg.getFieldAsInt(1);\n        var frequency;\n        var rawFrequency = msg.getField(2);\n        var mode = msg.getField(3);\n        if (mode != \"filtered\" && mode != \"unfiltered\") {\n            throw new Error(\"Unknown mode\");\n        }\n        if (rawFrequency == \"unlimited\") {\n            frequency = rawFrequency;\n        } else {\n            frequency = msg.getFieldAsFloat(2);\n        }\n        this.LS_w(9, phase, table, frequency);\n    },\n    \n    processPROG: function(msg) {\n        // PROG,<number>\n        var phase = null\n        var prog = msg.getFieldAsInt(1);\n        this.LS_e(7, phase, prog, this.capturedMessages);\n        /* */\n        this.messageCaptureEnabled = true;\n        this.capturedMessages = [];\n    },\n    \n    processPROBE: function(msg) {\n        // PROBE\n        var phase = null;\n        this.LS_u(phase, []);\n    },\n    \n    processEND: function(msg) {\n        // END,<cause>,<message>\n        var phase = null;\n        var cause = msg.getFieldAsInt(1);\n        var message = msg.getFieldUnquoted(2);\n        this.LS_e(4, phase, cause, message);\n    },\n    \n    processSYNC: function(msg) {\n        // SYNC,<secs>\n        var phase = null;\n        var secs = msg.getFieldAsInt(1);\n        this.LS_s(phase, secs);\n    },\n    \n    processMPNREG: function(msg) {\n        // MPNREG,<device-id>,<mpn-adapter-name>\n        var phase = null;\n        var deviceId = msg.getField(1);\n        var adapterName = msg.getField(2);\n        this.LS_MPNREG(deviceId, adapterName);\n    },\n    \n    processMPNOK: function(msg) {\n        // MPNOK,<subscription-id>,<pn-subscription-id>\n        var phase = null;\n        var lsSubId = msg.getField(1);\n        var pnSubId = msg.getField(2);\n        this.LS_MPNOK(lsSubId, pnSubId);\n    },\n    \n    processMPNDEL: function(msg) {\n        // MPNDEL,<subscription-id>\n        var phase = null;\n        var pnSubId = msg.getField(1);\n        this.LS_MPNDEL(pnSubId);\n    },\n    \n    parseUpdates: function(message) {\n        // U,<table>,<item>|<field1>|...|<fieldN>\n        // or U,<table>,<item>,<field1>|^<number of unchanged fields>|...|<fieldN>\n        /* parse table and item */\n        var tableIndex = message.indexOf(',') + 1;\n        ASSERT.verifyOk(tableIndex == 2); // tested by the caller\n        var itemIndex = message.indexOf(',', tableIndex) + 1;\n        if (itemIndex <= 0) {\n            throw new Error(\"Missing subscription field\");\n        }\n        var fieldsIndex = message.indexOf(',', itemIndex) + 1;\n        if (fieldsIndex <= 0) {\n            throw new Error(\"Missing item field\");\n        }\n        ASSERT.verifyOk(message.substring(0, tableIndex) == \"U,\"); // tested by the caller\n        var table = myParseInt(message.substring(tableIndex, itemIndex - 1), \"Invalid subscription\");\n        var item = myParseInt(message.substring(itemIndex, fieldsIndex - 1), \"Invalid item\");\n\n        /* parse fields */\n        var unchangedMarker = {};\n        unchangedMarker.length = -1;\n\n        var values = [];\n        var fieldStart = fieldsIndex - 1; // index of the separator introducing the next field\n        ASSERT.verifyOk(message.charAt(fieldStart) == ','); // tested above\n        while (fieldStart < message.length) {\n\n            var fieldEnd = message.indexOf('|', fieldStart + 1);\n            if (fieldEnd == -1) {\n                fieldEnd = message.length;\n            }\n            /*\n                 Decoding algorithm:\n                     1) Set a pointer to the first field of the schema.\n                     2) Look for the next pipe “|” from left to right and take the substring to it, or to the end of the line if no pipe is there.\n                     3) Evaluate the substring:\n                            A) If its value is empty, the pointed field should be left unchanged and the pointer moved to the next field.\n                            B) Otherwise, if its value corresponds to a single “#” (UTF-8 code 0x23), the pointed field should be set to a null value and the pointer moved to the next field.\n                            C) Otherwise, If its value corresponds to a single “$” (UTF-8 code 0x24), the pointed field should be set to an empty value (“”) and the pointer moved to the next field.\n                            D) Otherwise, if its value begins with a caret “^” (UTF-8 code 0x5E):\n                                    - take the substring following the caret and convert it to an integer number;\n                                    - for the corresponding count, leave the fields unchanged and move the pointer forward;\n                                    - e.g. if the value is “^3”, leave unchanged the pointed field and the following two fields, and move the pointer 3 fields forward;\n                            E) Otherwise, the value is an actual content: decode any percent-encoding and set the pointed field to the decoded value, then move the pointer to the next field.\n                               Note: “#”, “$” and “^” characters are percent-encoded if occurring at the beginning of an actual content.\n                     4) Return to the second step, unless there are no more fields in the schema.\n             */\n            var value = message.substring(fieldStart + 1, fieldEnd);\n            if (value == \"\") { // step A\n                values.push(unchangedMarker);\n\n            } else if (value.charAt(0) == '#') { // step B\n                if (value.length != 1) {\n                    throw new Error(\"Wrong field quoting\");\n                } // a # followed by other text should have been quoted\n                values.push(null);\n\n            } else if (value.charAt(0) == '$') { // step C\n                if (value.length != 1) {\n                    throw new Error(\"Wrong field quoting\");\n                } // a $ followed by other text should have been quoted\n                values.push(\"\");\n\n            } else if (value.charAt(0) == '^') { // step D\n                var count = myParseInt(value.substring(1), \"Invalid field count\");\n                while (count-- > 0) {\n                    values.push(unchangedMarker);\n                }\n\n            } else { // step E\n                var unquoted = EncodingUtils.unquote(value);\n                values.push(unquoted);\n            }\n            fieldStart = fieldEnd;\n        }\n        return values;\n    },\n    \n    /**\n     * Returns the handler of a request. A request handler has only two methods: onREQOK and onREQERR. \n     * <br>\n     * Can be null. \n     */\n    getRequestListener: function(reqId) {\n        goodcase: \n        {\n            if (this.session == null) {                \n                break goodcase;\n            }\n            var requestListener = this.session.controlHandler.getAndRemoveRequestListener(reqId);\n            if (requestListener == null) {                \n                break goodcase;\n            }\n            return requestListener;\n        }\n        return null;\n    }\n    \n  };\n  \n  function myParseInt(field, errorMsg) {\n      var n = parseInt(field, 10);\n      if (isNaN(n)) {\n          throw new Error(errorMsg);\n      }\n      return n;\n  }\n  \n  export default EvalQueue;\n  \n","/**\n * @since January 2018\n */\nimport EncodingUtils from \"./EncodingUtils\";\n\n\n    var TlcpServerMessage = function(msg) {\n        this.msg = msg;\n        this.fields = msg.split(',');\n    };\n    \n    TlcpServerMessage.prototype = {\n            \n            getField: function(n) {\n                if (n >= this.fields.length) {\n                    throw new Error('Field ' + n + ' does not exist');\n                }\n                return this.fields[n];\n            },\n            \n            getFieldUnquoted: function(n) {\n                return EncodingUtils.unquote(this.getField(n));\n            },\n            \n            getFieldAsInt: function(n) {\n                var f = this.getField(n);\n                var num = parseInt(f, 10);\n                if (isNaN(num)) {\n                    throw new Error('Not an integer field');\n                }\n                return num;\n            },\n            \n            getFieldAsFloat: function(n) {\n                var f = this.getField(n);\n                var num = parseFloat(f); \n                if (isNaN(num)) {\n                    throw new Error('Not a float field');\n                }\n                return num;\n            },\n            \n            getRawMsg: function() {\n                return this.msg;\n            }\n    };\n\n    export default TlcpServerMessage;\n","import SendMessageBridge from \"./SendMessageBridge\";\nimport ControlRequest from \"./ControlRequest\";\nimport LoggerManager from \"../../src-log/LoggerManager\";\nimport Constants from \"../Constants\";\nimport Utils from \"../Utils\";\n  \n  var messagesLogger = LoggerManager.getLoggerProxy(Constants.MESSAGES);\n  \n  var SendMessageHandler = function(controlHandler,pushPagesHandler,connOptions) {\n    this.active = false;\n    this.messagePhase = 0;\n    this.sequences = {};\n    \n    this.unorderedMap = {};\n    this.unorderedSeqNum = 0;\n    \n    this.controlHandler = controlHandler;\n    this.pushPagesHandler = pushPagesHandler;\n    \n    this.connOptions = connOptions;\n  };\n  \n  \n  SendMessageHandler.prototype = {\n    \n    /*public*/ _close: function() {\n      // Called when a disconnection occurs;\n      // the communication layer guarantees that no further calls will be received\n      // originated from the pushFrame linked to the finite session.\n      // So we can start from an empty state without the risk of overlapping.\n  \n      this.active = false;\n      // what do we do with messages that have not yet been answered?\n      // no need to answer here because pushpages can do this by themselves;\n      // indeed, it is not even permissible to make calls to pages based on a finished session\n      this.sequences = {};\n      \n      this.unorderedSeqNum = 0;\n      this.unorderedMap = {};\n      \n      this.messagePhase++;\n      messagesLogger.logDebug(\"Closing message handler\");\n    },\n    \n    /*public*/ activate: function() {\n      messagesLogger.logDebug(\"Activating message handler\");\n      if (! this.active) {\n        for (var seq in this.sequences) {\n          var seqData = this.sequences[seq];\n          for (var num in seqData.messages) {\n            var query = seqData.messages[num].query;\n            if (query != null) {\n              var bridge = new SendMessageBridge(this,this.connOptions,this.messagePhase,seqData,num);\n              this.sendExe(num,query,bridge);\n            }\n          }\n        }\n        this.active = true;\n      }\n    },\n    \n    /**\n     * \n     * <b>NB1</b> A fire-and-forget behavior is enacted when the user calls {@link LightstreamerClient#sendMessage(String)}\n     * or {@link LightstreamerClient#sendMessage(String, String, int, com.lightstreamer.client.ClientMessageListener, boolean)}\n     * having (1) \"UNORDERED_MESSAGES\" as a sequence and (2) no listener. \n     * In this scenario the server doesn't send acknowledgments (i.e. REQOK) and the client doesn't do retransmissions.\n     * In a fire-and-forget message request both the parameters LS_ack and LS_outcome are set to false.\n     * \n     * <p>\n     * Flags set to true with respect to the presence of a listener and a ordered sequence.\n     * \n     * <table border=\"1\">\n     * <tr>\n     *  <th></th>\n     *  <th>listener</th>\n     *  <th>no listener</th>\n     * </tr>\n     * <tr>\n     *  <th>sequence</th>\n     *  <td>prog outcome ack</td>\n     *  <td>prog ack</td>\n     * </tr>\n     * <tr>\n     *  <th>no sequence</th>\n     *  <td>prog outcome ack</td>\n     *  <td>ack (only in HTTP)</td>\n     * </tr>\n     * </table>\n     */\n    _send: function(_message, sequence, listener, _timeout) {\n      messagesLogger.logDebug(\"Preparing message request\");\n\n      var seqData = this.sequences[sequence];\n      if (seqData == null) {\n        seqData = {};\n        seqData.messageNum = 0;\n        seqData.messages = {};\n        this.sequences[sequence] = seqData;\n      }\n  \n      seqData.messageNum++;\n    \n      var query = {\n          \"LS_message\": _message, //if necessary the encoder will encode it\n          \"LS_reqId\": Utils.nextRequestId()\n      };\n      \n      //we add the prog if\n      //1 - we expect an outcome\n      //2 - the sequence is not unordered\n      \n      var needsProg = false;\n      \n      if (listener) {\n          // query[\"LS_outcome\"]=\"\"; (no needed: the default is true)\n          needsProg=true;\n      } else {\n          query[\"LS_outcome\"]= \"false\";\n      }\n            \n      if (sequence != Constants._UNORDERED_MESSAGES) {\n        query[\"LS_sequence\"]=encodeURIComponent(sequence);\n        needsProg=true;\n\n        if (_timeout) {\n          query[\"LS_max_wait\"]=_timeout;\n        }\n      }\n      \n      if (needsProg) {\n          // query[\"LS_ack\"]=\"\"; (no needed: the default is true)\n          query[\"LS_msg_prog\"]= sequence == Constants._UNORDERED_MESSAGES ? this.mapUnordered(seqData.messageNum) : seqData.messageNum;\n      } else if (listener == null) {\n          query[\"LS_ack\"] = \"false\";\n      }\n      \n      var msgData = {};\n      msgData.query = query;\n      msgData.listener = listener;\n      seqData.messages[seqData.messageNum] = msgData;\n      if (this.active) {\n        messagesLogger.logInfo(\"Forward prepared message to control handler\",query);\n        var bridge = new SendMessageBridge(this,this.connOptions,this.messagePhase,seqData,seqData.messageNum,sequence,needsProg);\n        this.sendExe(seqData.messageNum,query,bridge);\n      }\n    },\n    \n    /*public*/ mapUnordered: function(prog) {\n      var realProg = ++this.unorderedSeqNum;\n      this.unorderedMap[realProg] = prog;\n      return realProg;\n    },\n    \n    /*private*/ resolveUnorderedNum: function(prog) {\n      return this.unorderedMap[prog] ? this.unorderedMap[prog] : prog;\n    },\n    \n    /*private*/ removeFromUnorderedMap: function(prog) {\n      //not optimized at all; should I keep a reverse map to be faster?\n      for (var i in this.unorderedMap) {\n        if (this.unorderedMap[i] == prog) {\n          delete(this.unorderedMap[i]);\n          return;\n        }\n      }\n    },\n    \n    /*public*/ extractMappedUnordered: function(prog) {\n    //not optimized at all; should I keep a reverse map to be faster?\n      for (var i in this.unorderedMap) {\n        if (this.unorderedMap[i] == prog) {\n          return i;\n        }\n      }\n    },\n    \n    /*public*/ checkMessagePhase: function(ph) {\n      return ph == this.messagePhase;\n    },\n    \n    //FROM SendMessageBridge that knows the actual num\n    /*public*/ resend: function(num,bridge) {\n      var query = bridge.seqData.messages[num].query;\n      messagesLogger.logDebug(\"No ack was received for a message; forwarding it again to the control handler\",query);\n      this.sendExe(num,query,bridge); //resend the message!\n    },\n    \n    /*private*/ sendExe: function(prog,query,bridge) {\n        var sequence = (query['LS_sequence'] == null ? Constants._UNORDERED_MESSAGES : query['LS_sequence']);\n        var ack = query['LS_ack'] != \"false\";\n        var requestListener = {\n                onREQOK: function(LS_window) {\n                    /*\n                     * NB1 LS_window is an object defined in EvalQueue, where the listener will be called.\n                     * \n                     * NB2 LS_w must be called only if the request was expecting an acknowledgment (i.e. LS_ack=true).\n                     * This check is important because in HTTP the server send always a REQOK even if LS_ack was false.\n                     */\n                    if (ack) {                        \n                        LS_window.LS_w(4, prog, sequence, 0, 0);\n                    }\n                },\n                \n                onREQERR: function(LS_window, phase, errorCode, errorMsg) {\n                    LS_window.LS_l(errorCode, prog, \"MSG\" + sequence, errorMsg, true/*isReqerr*/);\n                }\n        };\n        this.controlHandler.addRequest(prog, query, ControlRequest.MESSAGE, bridge, null, requestListener); \n    },\n\n    //FROM net, needs num translation\n    /*public*/ ack: function(sequence, num) {\n      num = sequence == Constants._UNORDERED_MESSAGES ? this.resolveUnorderedNum(num) : num;\n      messagesLogger.logInfo(\"Ack received for message\",sequence,num);\n      \n      var seqData = this.sequences[sequence];\n      if (seqData.messages[num]) {\n        if (seqData.messages[num].query != null) {\n          messagesLogger.logDebug(\"Ack received, stopping automatic retransmissions\");\n          seqData.messages[num].query = null;\n        }\n        if (seqData.messages[num].listener == null) {\n          messagesLogger.logDebug(\"Ack received, no outcome expected, clean structures\");\n          this._clear(sequence, num);\n        }\n      } \n    },\n    \n    //FROM SendMessageBridge that knows the actual num\n    /*public*/ noAckMessageSent: function(sequence, num) {\n      messagesLogger.logDebug(\"Not waiting for ack, purging\",sequence,num);\n      this._clear(sequence, num);\n    },\n    \n    /*private*/ _clear: function(sequence, num) {\n      //this method is always called with the actual num\n      messagesLogger.logDebug(\"Message handled, clean structures\");\n      var seqData = this.sequences[sequence];\n      if (seqData && seqData.messages[num]) {\n        delete (seqData.messages[num]);\n        if (sequence == Constants._UNORDERED_MESSAGES) {\n          this.removeFromUnorderedMap(num);\n        }\n      }\n    },\n    \n    /*private*/ getListener: function(sequence,num) {\n      var seqData = this.sequences[sequence];\n      if (seqData && seqData.messages[num] && seqData.messages[num].listener) {\n        return seqData.messages[num].listener;\n      }\n      return null;\n    },\n    \n    //FROM SendMessageBridge that knows the actual num\n    sentOnNetwork: function(sequence, num) {\n      messagesLogger.logDebug(\"Message on the net notification\",sequence, num);\n      var listenerInfo = this.getListener(sequence, num);\n      if(listenerInfo) {\n        \n        var ppHandler = this.pushPagesHandler.getPushPageHandler(listenerInfo.pageNum);\n        if (ppHandler) {\n          ppHandler.onMessageOnNetwork(listenerInfo.prog);\n        }\n              \n      }\n    }, \n\n    //FROM net, needs num translation\n    /*public*/ _complete: function(sequence, num) {\n      num = sequence == Constants._UNORDERED_MESSAGES ? this.resolveUnorderedNum(num) : num;\n      messagesLogger.logInfo(\"OK outcome received\",sequence, num);\n      var listenerInfo = this.getListener(sequence, num);\n      if(listenerInfo) {\n      \n        var ppHandler = this.pushPagesHandler.getPushPageHandler(listenerInfo.pageNum);\n        if (ppHandler) {\n          ppHandler.onMessageComplete(listenerInfo.prog);\n        }\n              \n      }\n      \n      this._clear(sequence, num);\n      \n    },\n    \n    //FROM net, needs num translation\n    /*public*/ notifyDiscarded: function(sequence,num) {\n      num = sequence == Constants._UNORDERED_MESSAGES ? this.resolveUnorderedNum(num) : num;\n      messagesLogger.logInfo(\"DISCARDED outcome received\",sequence, num);\n      \n      var listenerInfo = this.getListener(sequence, num);\n      \n      if(listenerInfo) {\n        var ppHandler = this.pushPagesHandler.getPushPageHandler(listenerInfo.pageNum);\n        if (ppHandler) {\n          ppHandler.onMessageDiscarded(listenerInfo.prog);\n        }\n      }\n      \n      this._clear(sequence, num);\n    },\n    \n    //FROM net, needs num translation\n    /*public*/ notifyDenied: function(sequence,_code,msg,num) {\n      num = sequence == Constants._UNORDERED_MESSAGES ? this.resolveUnorderedNum(num) : num;\n      messagesLogger.logInfo(\"DENIED outcome received\",sequence, num);\n      var listenerInfo = this.getListener(sequence, num);\n      if(listenerInfo) {\n        var ppHandler = this.pushPagesHandler.getPushPageHandler(listenerInfo.pageNum);\n        if (ppHandler) {\n          ppHandler.onMessageDenied(listenerInfo.prog,_code,msg);\n        }\n      }\n      \n      this._clear(sequence, num);\n    },\n\n    //FROM net, needs num translation\n    /*public*/ notifyError: function(sequence,_code,msg,num) {\n      num = sequence == Constants._UNORDERED_MESSAGES ? this.resolveUnorderedNum(num) : num;\n      messagesLogger.logInfo(\"ERROR outcome received\",sequence, num);\n      var listenerInfo = this.getListener(sequence, num);\n      if(listenerInfo) {\n        \n        var ppHandler = this.pushPagesHandler.getPushPageHandler(listenerInfo.pageNum);\n        if (ppHandler) {\n          ppHandler.onMessageError(listenerInfo.prog,_code,msg);\n        }\n              \n        \n      }\n      \n      this._clear(sequence, num);\n    }\n  \n  };\n  \n  export default SendMessageHandler;\n\n","import Inheritance from \"../../src-tool/Inheritance\";\nimport Tutor from \"./Tutor\";\nimport Utils from \"../Utils\";\n  \n  var notifySenderName;\n  for(var i in  {notifySender:true}) {\n    notifySenderName=i;\n  }\n  \n  \n  var SendMessageBridge = function(owner,connOptions,_phase,_seqData,_num,_sequence,_ack) {\n    \n    this._callSuperConstructor(SendMessageBridge,[connOptions]);\n    \n    this.seqData = _seqData;\n    this.num = _num;\n    this.sequence = _sequence;\n    this.phase = _phase;\n    //this.attempts = 0;\n    this._owner = owner;\n    this.waitingAck = _ack;\n  };\n  \n  SendMessageBridge.prototype = {\n      \n    /*public*/ notifySender: function(failed) {\n      this._callSuperMethod(SendMessageBridge,notifySenderName,[failed]);\n      \n      if (!failed) {\n        this._owner.sentOnNetwork(this.sequence,this.num);\n        \n        if (!this.waitingAck) {\n          this._owner.noAckMessageSent(this.sequence,this.num);\n          return;\n        }\n      }\n      \n      \n      /*this.attempts++;\n      if (this.attempts >= 5) {\n        \n      }*/\n    },\n      \n    verifySuccess: function() {\n      //if push_pase is changed we've already received a loop so that our request is successful\n      if (this._owner.checkMessagePhase(this.phase)) {\n        //phase is correct\n        if (this.seqData.messages[this.num]) { //the message is still in the queue\n          if (this.seqData.messages[this.num].query != null) { //the message has not been acknowledged yet\n            return false;\n          }\n        }\n      }\n      return true;\n    },\n    \n    doRecovery: function() {\n      //let's try again\n      this._owner.resend(this.num,this);\n    },\n    \n    notifyAborted: function() {\n      //nothing to do\n    },\n    \n    getProg: function() {\n      return this.num;\n    },\n    \n    getOwner: function() {\n      return this._owner;\n    }\n    \n  };\n  \n  Inheritance(SendMessageBridge,Tutor);\n  export default SendMessageBridge;\n\n","\nimport ControlRequest from \"./ControlRequest\";\nimport ControlRequestBatch from \"./ControlRequestBatch\";\nimport LoggerManager from \"../../src-log/LoggerManager\";\nimport Request from \"../net/Request\";\nimport Executor from \"../../src-tool/Executor\";\nimport ConnectionSelector from \"../net/ConnectionSelector\";\nimport Constants from \"../Constants\";\nimport ASSERT from \"../../src-test/ASSERT\";\n  \n  var requestsLogger = LoggerManager.getLoggerProxy(Constants.REQUESTS);\n  var streamLogger = LoggerManager.getLoggerProxy(Constants.STREAM);\n  \n  \n  var _IDLE = 1;\n  var _STANDBY = 2;\n  var _WAITING = 3;\n  \n  var phNames = {};\n  phNames[_IDLE] = \"IDLE\";\n  phNames[_STANDBY] = \"STAND BY\";\n  phNames[_WAITING] = \"WAITING RESP\";\n  \n  var SYNC_DEQUEUE = true;\n  var ASYNC_DEQUEUE = false;\n  var WAIT_CONN_DELAY = 200;\n  var WAIT_RESP_DELAY = 4000;\n  \n  var REQ_EMPTY = 1;\n  var SEND_LATER = 2;\n  var NO_CONN = 3;\n  var SENT_HTTP = 4;\n  var SENT_WS = 5;\n  \n  var SECURITY_LIMIT = 1;\n  \n  \n  function phToStr(ph) {\n    return phNames[ph];\n  }\n  \n  \n  \n \n  \n  \n  \n  \n  \n  function firstRequestToRequest(queueToSend,srvAddr,cookieRequired,extraHeaders) {\n    var firstRequest = queueToSend.firstRequest();\n    if (!firstRequest) {\n      return null;\n    }\n    var req = new Request(((firstRequest.retryingOrHost && firstRequest.retryingOrHost !== true) ? firstRequest.retryingOrHost : srvAddr)+Constants.LIGHTSTREAMER_PATH);\n    req.setCookieFlag(cookieRequired);\n    req.setExtraHeaders(extraHeaders);\n    return req;\n  }\n  \n  \n  \n  \n  /**\n   * accumula richieste di controllo\n   * si basa sulla gestione dei thread JS, lanciando il lanciatore in una\n   * setTimeout questo metodo dovrebbe fare in tempo a accumulare assieme\n   * tutte le table ADDate durante il thread corrente\n   */\n  var ControlConnectionHandler = function(owner,policyBean,engId,skipCors) {\n    this.corsDisabled = false;\n    this.connectionList = null;\n    this.conn = null;\n    \n    this.messageQueue = null; \n    this.controlQueue = null;\n    this.logQueue = null;\n    this.destroyQueue = null;\n    this.hbQueue = null;\n    this.mpnQueue = null;\n    \n    this.currentReverseHeartbeatInterval = 0;\n    this.grantedReverseHeartbeatInterval = 0;\n    // grantedReverseHeartbeatInterval was declared in a streaming bind_session,\n    // so, it must be maintained as long as the streaming connection is active;\n    // hence the invariant:\n        // grantedReverseHeartbeatInterval == 0 || 0 != currentReverseHeartbeatInterval <= grantedReverseHeartbeatInterval\n    \n    this.requestLimit = 0; \n\n    this.statusPhase = 1;\n    this.status = _IDLE;\n    this.phase = 1; //this phase is incremented only by the reset method. It is used to check if between addRequest and addRequestExe a reset occurred\n\n    this.typeFlag = 0; // handles turns (control-sendMessage-sendLog)\n   \n    this.lastBatch = null;\n\n//>>excludeStart(\"debugExclude\", pragmas.debugExclude);\n    this.fakeSyncError = false;\n//>>excludeEnd(\"debugExclude\");\n  \n    \n    \n    this._owner = owner;\n    this.policyBean = policyBean;\n    this.engId = engId;\n    \n    this.wsConn = null;\n    \n    /**\n     * Maps LS_reqId with the corresponding request listeners.\n     * The listeners (called by EvalQueue) manage REQOK/REQERR responses according to the request types.\n     */\n    this.requestListenerMap = {};\n  \n    this.resetConnectionList(skipCors);\n    this._reset();\n  };\n  \n  ControlConnectionHandler.prototype = {\n    \n    /*public*/ toString: function() {\n      return [\"[\",\"ControlConnectionHandler\",phToStr(this.status),this.lastBatch,this.requestLimit,this.currentReverseHeartbeatInterval,\"]\"].join(\"|\");\n    },\n    \n    /*public*/ setRequestLimit: function(newLimit) {\n      this.requestLimit = newLimit;\n      requestsLogger.logDebug(\"Batch length limit changed\",this);\n    },\n    \n    /*public*/ startReverseHeartbeats: function(newInterval, force) {\n      if (force) {\n          this.currentReverseHeartbeatInterval = newInterval;\n          this.grantedReverseHeartbeatInterval = newInterval;\n          requestsLogger.logInfo(\"Start sending reverse heartbeat to the server\",this);\n      } else {\n          if (this.grantedReverseHeartbeatInterval == 0 || newInterval < this.grantedReverseHeartbeatInterval) {\n              this.currentReverseHeartbeatInterval = newInterval;\n              requestsLogger.logInfo(\"Start sending reverse heartbeat to the server\",this);\n          } else {\n              this.currentReverseHeartbeatInterval = this.grantedReverseHeartbeatInterval;\n              requestsLogger.logInfo(\"Keep sending reverse heartbeat to the server\",this);\n          }\n      }\n      if (this.status == _IDLE) {\n        this.sendReverseHeartbeat(this.statusPhase);\n        // this may be redundant in many cases, for instance if we are sending a bind request,\n        // but the case is rare and we don't want to complicate things with a check\n      }\n    },\n    \n    sendReverseHeartbeat: function(sc) {\n      if (this.status != _IDLE || this.statusPhase != sc || this.currentReverseHeartbeatInterval == 0) {\n        return;\n      }\n      \n      requestsLogger.logDebug(\"Preparing reverse heartbeat\",this);\n      this.addRequest(null, \"\", ControlRequest.HEARTBEAT);\n   \n    },\n    \n    /*public*/ stopReverseHeartbeats: function(force) {\n      if (force) {\n          requestsLogger.logInfo(\"Stop sending reverse heartbeat to the server\",this);\n          this.currentReverseHeartbeatInterval = 0;\n          this.grantedReverseHeartbeatInterval = 0;\n          //do nothing, the next heartbeat will not be sent because of the 0 interval\n      } else {\n          if (this.grantedReverseHeartbeatInterval == 0) {\n              requestsLogger.logInfo(\"Stop sending reverse heartbeat to the server\",this);\n              this.currentReverseHeartbeatInterval = 0;\n              //do nothing, the next heartbeat will not be sent because of the 0 interval\n          } else {\n              requestsLogger.logInfo(\"Keep sending reverse heartbeat to the server\",this);\n              this.currentReverseHeartbeatInterval = this.grantedReverseHeartbeatInterval;\n          }\n      }\n    },\n    \n    /*public*/ resetConnectionList: function(skipCors) {\n      this.connectionList = new ConnectionSelector(ConnectionSelector.CONTROL_LIST,false,!this.policyBean.corsXHREnabled || skipCors);\n      this.conn = null;\n    },\n    \n    /*private*/ _close: function() {\n      requestsLogger.logDebug(\"Close current connection if any and applicable\");\n      if (this.conn) {\n        this.conn._close();\n      }\n    },\n    \n    /*private*/ changeStatus: function(newStatus, caller) {\n      this.statusPhase++; //used to verify deque and sendHeartbeats calls\n            \n      if (newStatus == _IDLE && this.currentReverseHeartbeatInterval > 0) {\n        Executor.addTimedTask(this.sendReverseHeartbeat,this.currentReverseHeartbeatInterval,this,[this.statusPhase]);\n      }\n      if (requestsLogger.isDebugLogEnabled()) {          \n          requestsLogger.logDebug(\"ControlConnectionHandler state change '\", caller + phNames[this.status] + \" -> \" + phNames[newStatus]);\n      }\n      this.status = newStatus;\n    },\n\n    /*public*/ _reset: function() {\n      requestsLogger.logDebug(\"Reset Controls handler status\",this);\n      this.requestLimit = 0;\n      \n      this.messageQueue = new ControlRequestBatch(ControlRequest.MESSAGE); \n      this.controlQueue = new ControlRequestBatch(ControlRequest.ADD); //for ADD REMOVE CONSTRAIN and FORCE_REBIND\n      this.hbQueue = new ControlRequestBatch(ControlRequest.HEARTBEAT); \n      this.mpnQueue = new ControlRequestBatch(ControlRequest.MPN);\n      \n      this.wsConn = null;\n      \n      this.currentReverseHeartbeatInterval = 0;\n      this.grantedReverseHeartbeatInterval = 0;\n\n      //log and destroy are not session bound\n      if (!this.logQueue) {\n        this.logQueue = new ControlRequestBatch(ControlRequest.LOG); \n      }\n      if (!this.destroyQueue) {\n        //destroy queue is declared of type ADD for simplicity\n        this.destroyQueue = new ControlRequestBatch(ControlRequest.ADD);\n      }\n      \n      this.reqQueues = [this.messageQueue,this.controlQueue,this.logQueue,this.destroyQueue,this.hbQueue,this.mpnQueue];\n      \n      //we should avoid blocking the pending request if it's a DESTROY or a LOG;\n      //from a general point of view if a request is going to a non-session host\n      //we let it go on.\n      \n      //addRequest->addRequestExe in the middle will be discarded (excluding destroy and log)       \n      this.phase++; \n      \n      //excluding destroy and log requests, requests active now are aborted\n      var _type = this.lastBatch ? this.lastBatch.getBatchType() : null;\n      \n      if (_type !== null && _type !== ControlRequest.DESTROY && _type !== ControlRequest.LOG) {  \n\n        //>>excludeStart(\"debugExclude\", pragmas.debugExclude);            \n        if (!ASSERT.verifyDiffValue(this.status,_IDLE)) {\n          requestsLogger.logError(\"Batch handler unexpectedly idle; a batch was waiting\");\n        }\n        //>>excludeEnd(\"debugExclude\");         \n        \n        this._close();\n        \n        this.lastBatch = null;\n        \n        this.changeStatus(_IDLE, \"_reset\");\n        \n        //at this point we may have blocked DESTROY or LOG requets that will remain in the queue until a dequeue is called.\n        //to avoid waiting for an external intervention (ie a new request in the queue) before dequeuing the survived requests\n        //we call the dequeue here\n        this.dequeue(ASYNC_DEQUEUE, \"reset1\"); //the status will immediately change to STANDBY\n\n\n      } else if (_type === null) {\n     \n        //>>excludeStart(\"debugExclude\", pragmas.debugExclude);            \n        if (!ASSERT.verifyValue(this.status,_IDLE)) {\n          requestsLogger.logError(\"Batch handler unexpectedly not idle; nothing ready to be sent was found\");\n        }\n        \n        //nothing to close\n        //lastBatch is already null\n        if (!ASSERT.verifyValue(this.lastBatch,null)) {\n          requestsLogger.logError(\"Batch object not null\");\n        }\n      //>>excludeEnd(\"debugExclude\");  \n        \n        //there should not be nothing to dequeue, btw let's call dequeue anyway  \n        this.dequeue(ASYNC_DEQUEUE,\"reset2\"); \n        \n      } \n      //else we're dequeuing a DESTROY or LOG request so don't change the statusPhase NOR THE PHASE\n     \n \n      //NOTE:\n      //phase affects all the addRequest that are still pending (and are not DESTROY or LOG)\n      //statusPhase only affects the lastBatch\n \n    },\n    \n    assignWS: function(wsConn) {\n      \n      if (wsConn) {\n        requestsLogger.logDebug(\"Enabling control requests over WebSocket now\",this);\n      } else if (this.wsConn) {\n        requestsLogger.logDebug(\"Disabling control requests over WebSocket now\",this);\n      }\n      \n      this.wsConn = wsConn;\n    },\n    \n    /**\n     * Notes:\n     * \n     * - each batch has a type (see ControlRequest constants)\n     * \n     * - there are 5 batches: \n     *      messageQueue (batchType = ControlRequest.MESSAGE)\n     *      controlQueue (batchType = ControlRequest.ADD)\n     *      hbQueue (batchType = ControlRequest.HEARTBEAT)\n     *      logQueue (batchType = ControlRequest.LOG)\n     *      destroyQueue (batchType = ControlRequest.ADD)\n     *      \n     * - each batch can contain requests of different types (see ControlRequest constants)\n     * \n     * - checks in ControlRequestBatch.addRequestToBatch avoid that requests go in the wrong batch\n     * \n     * - each request has a type (see ControlRequest constants)\n     *  \n     * - each request has a key (see ControlRequest.getKey)\n     * \n     * - each request in a batch has a key which is composed of a letter and ControlRequest.getKey value\n     *   (for example CHANGE_SUB_KEY+request.getKey()) (see ControlRequestBatch.addRequestToBatch)\n     *   \n     * @param num table index for add & delete, session number for destroy, null for everything else\n     * @param request request query LS_table=...LS_sanpshot...\n     * @param _type one of the request type constants (@see ControlRequest)\n     * @param related request-related listener\n     * @param flag that shows if this is the first time this request is sent for this session or not,\n     *   (for add requests) or host to be forced for this request (for DESTROY)\n     * @param listener managing REQOK/REQERR response\n     */\n    /*public*/ addRequest: function(num, request, _type, related, retryingOrHost, requestListener) {\n        this.addRequestListener(request, requestListener);\n        Executor.addTimedTask(this.addRequestExe,0,this,[this.phase, num, request, _type, related, retryingOrHost]);\n    },\n  \n    /**\n     * @public\n     * Synchronous version of addRequest method. The request is immediately written into the available connection.\n     */\n    addSyncRequest: function(num, request, _type, related, retryingOrHost) {\n        this.addRequestExe(this.phase, num, request, _type, related, retryingOrHost);\n    },\n  \n    /*private*/ checkPhase: function(toCheck,_type) {\n      if (_type == ControlRequest.DESTROY || _type == ControlRequest.LOG) {\n        //LOG and DESTROY do not care about phase, must always go to the server\n        return true;\n      } else {\n        return this.phase === toCheck;\n      }\n    },\n    \n    /*private*/ addToProperBatch: function(_type,controlRequestObj) {\n      if (_type == ControlRequest.MESSAGE) {\n        this.messageQueue.addRequestToBatch(controlRequestObj);\n        \n      } else if (_type == ControlRequest.LOG) {\n        this.logQueue.addRequestToBatch(controlRequestObj);\n        \n      } else if (_type == ControlRequest.DESTROY) {\n        this.destroyQueue.addRequestToBatch(controlRequestObj);\n        \n      } else if (_type == ControlRequest.HEARTBEAT) {  \n        this.hbQueue.addRequestToBatch(controlRequestObj);\n        \n      } else if (_type == ControlRequest.MPN) {\n          this.mpnQueue.addRequestToBatch(controlRequestObj);\n          \n      } else {\n        //various control.js requests\n        this.controlQueue.addRequestToBatch(controlRequestObj);\n        \n      }\n    },\n    \n    /**\n     * @param num table index for add & delete, session number for destroy, null for everything else\n     * @param request request query LS_table=...LS_sanpshot...\n     * @param _type one of the request type constants (@see ControlRequest)\n     * @param related request-related listener\n     * @param retryingOrHost flag that shows if this is the first time this request is sent for this session or not,\n     *   (for add requests) or host to be forced for this request (for DESTROY)\n     */\n    /*private*/ addRequestExe: function(ph, num, request, _type, related, retryingOrHost) {\n      if(!this.checkPhase(ph,_type)) {\n        return;\n      }\n      \n      requestsLogger.logInfo(\"New request to be sent\",this,request);\n     \n      //retrying flag is only \"needed\" for ADD requests\n      var controlRequestObj = new ControlRequest(request,related,_type,num,retryingOrHost);\n      \n      this.addToProperBatch(_type,controlRequestObj);\n\n      if (this.status == _IDLE) {\n        this.dequeue(SYNC_DEQUEUE,\"add\");\n      } else {\n        //we're already busy, we'll dequeue when we'll be back\n        requestsLogger.logDebug(\"Still waiting previous batch\",this);\n      }\n      \n    },\n    \n    /*private*/ dequeue: function(sync,who) {\n      if (sync === true) {\n        requestsLogger.logDebug(\"Ready to dequeue\",sync,this);\n        this.dequeueControlRequests(this.statusPhase,who);\n        \n      } else {\n        requestsLogger.logDebug(\"Waiting for dequeue\",sync,this);\n        var delay = sync === false ? 0 : sync;\n        Executor.addTimedTask(this.dequeueControlRequests,delay,this,[this.statusPhase,\"async.\"+who]);\n      }      \n    },\n    \n    /*private*/ dequeueControlRequests: function(ph,who) {\n      \n      if(ph != this.statusPhase) {\n        return;\n      }\n      \n      //just to avoid too-long loops\n      var security = 0;\n      while(security < SECURITY_LIMIT) {\n        security++;\n        \n        this.changeStatus(_STANDBY, \"dequeueControlRequests\");\n        \n        requestsLogger.logDebug(\"starting dequeuing\",who,this);\n        \n        var outcome = null;\n        if (this.lastBatch != null) {\n          requestsLogger.logDebug(\"Send previous batch\");\n          outcome = this.sendBatch(this.lastBatch);\n        } else {\n          requestsLogger.logDebug(\"Send new batch\");\n          outcome = this.selectAndSendBatch();\n        }\n        \n        if (outcome == REQ_EMPTY) {\n          requestsLogger.logInfo(\"Some requests don't need to be sent anymore, keep on dequeing\");\n          \n          this.lastBatch = null;\n          //this.dequeue(SYNC_DEQUEUE); \n          \n          //we do not call SYNC_DEQUEUE, we let the loop to continue (that's quite the same!)\n          \n        } else if (outcome == SEND_LATER) {\n          requestsLogger.logInfo(\"Delaying requests; waiting for a connection\");\n          //will try to send lastBatch\n          this.dequeue(WAIT_CONN_DELAY,\"later\");\n          return;\n          \n        } else if (outcome == NO_CONN) {\n          requestsLogger.logWarn(\"Can't find a connection to send batch\");\n          \n          //I have no way to open a connection;\n          //this should never happen because, unless\n          //we're sending a log line, we had a working\n          //connection upon which the session id was received\n          \n          //so, no way to send the request, what should I do now??\n          //notify the senders and hope...\n          if (this.lastBatch) {\n            this.lastBatch.notifySenders(true);\n          }\n          this.lastBatch = null;\n          \n          this.dequeue(ASYNC_DEQUEUE,\"no\");\n          return;\n          \n        } else if (outcome == SENT_HTTP) {\n          requestsLogger.logInfo(\"Request sent through HTTP connection\");\n          \n          this.changeStatus(_WAITING, \"dequeueControlRequests\");\n          if (this.lastBatch) {\n              this.lastBatch.notifySenders();\n          }\n          \n          //if still the same phase when this happen,\n          //we send again the lastBatch\n          this.dequeue(WAIT_RESP_DELAY,\"http\");\n          return;\n          \n        } else if (outcome == SENT_WS) {\n          requestsLogger.logInfo(\"Request sent through WebSocket, keep on dequeuing\");\n          \n          this.changeStatus(_WAITING, \"dequeueControlRequests\");\n          if (this.lastBatch) {\n              this.lastBatch.notifySenders();\n          }\n\n          //we don't need a timeout, we're ready right now to handle a new request (plus we'll never have notification of responses on WebSocket as responses are handled by the stream connection listener)\n          this.lastBatch = null;\n          \n          //we have to move in the _IDLE status as we're not waiting anything\n          this.changeStatus(_IDLE, \"dequeueControlRequests\");\n          \n          //we will be back to the _STANDBY phase immediately if the loop goes on\n          \n          //this.dequeue(SYNC_DEQUEUE);\n          \n        } else {\n          requestsLogger.logInfo(\"Request queue is now empty\");\n          \n          this._close(); //I think that this call is useless\n          //nothing to do now\n          this.changeStatus(_IDLE, \"dequeueControlRequests\");\n          return;\n        }\n      }\n      \n      //if SECURITY_LIMIT batches are handled in a single loop, then we pause for a moment\n      this.dequeue(ASYNC_DEQUEUE,\"limit\");\n    },\n    \n    /*private*/ selectAndSendBatch: function() {\n      var c=0;\n      while(c < this.reqQueues.length ) {\n        \n        //switch the flag to change turn\n        this.typeFlag = this.typeFlag < this.reqQueues.length-1 ? this.typeFlag+1 : 0;\n        \n        if (this.reqQueues[this.typeFlag].getLength() > 0) {\n          return this.sendBatch(this.reqQueues[this.typeFlag]);\n        }\n        c++;\n      }\n      return null;\n    },\n    \n    /*private*/ sendBatch: function(queueToSend) {\n      (function(){\n          /* check that there is no duplicated message request */\n          if (queueToSend.batchType == ControlRequest.MESSAGE) {\n              for (var i = 0, ilen = queueToSend.queue.length; i < ilen; i++) {\n                  var request = queueToSend.queue[i];\n                  var seq = request[\"LS_sequence\"];\n                  var prog = request[\"LS_msg_prog\"];\n                  if (seq != null && prog != null) {\n                      for (var j = i + 1, jlen = queueToSend.queue.length; j < jlen; j++) {\n                          var currentReq = queueToSend.queue[j];\n                          var currentSeq = currentReq[\"LS_sequence\"];\n                          var currentProg = currentReq[\"LS_msg_prog\"];\n                          if (seq == currentSeq && prog == currentProg) {\n                              if (requestsLogger.isDebugLogEnabled()) {\n                                  requestsLogger.logErrorExc(new Error(\"backtrace\"),\n                                          \"Duplicated message\",\n                                          \"seq=\", seq, \"prog=\", prog, \"ptr=\", request === currentReq);\n                              }\n                              requestsLogger.logError(\"Duplicated message\", \"seq=\", seq, \"prog=\", prog);\n                          }\n                      }\n                  }\n              }\n          }\n      }());\n      \n      var serverToUse = this._owner.getPushServerAddress();\n      var mainRequest = firstRequestToRequest(queueToSend,serverToUse,this.policyBean.isCookieHandlingRequired(),this.policyBean.extractHttpExtraHeaders(false));\n\n      //mainRequest is now like http://www.myserver.com/lightstreamer\n      if (mainRequest == null) {\n        requestsLogger.logDebug(\"Empty batch, exit\");\n        return REQ_EMPTY;\n      }\n      \n      requestsLogger.logDebug(\"Ready to send batch, choosing connection\");\n      \n      var sent = false;\n      \n//////////////////////////////WS CASE      \n      \n      if (this.wsConn) {\n        requestsLogger.logDebug(\"WebSocket should be available, try to send through it\");\n        \n        var controlRequest = this.customizeRequest(queueToSend,this.wsConn);\n        if(controlRequest == null) {\n          requestsLogger.logDebug(\"Empty request was generated, exit\");\n          return REQ_EMPTY;\n        }\n        \n        mainRequest.setFile(controlRequest.getFile());\n        mainRequest.setData(controlRequest.getData());\n        \n        sent = this.wsConn._send(mainRequest);\n        \n        if (sent === false) {\n          this.wsConn = null;\n        } else if (sent === null) {\n          //with the early open of WebSocket this may happen\n          return SEND_LATER;\n   \n        } else { //sent == true\n          //we've done our job :)\n          \n          return SENT_WS;\n        }\n        \n      } \n      \n//////////////////////////////HTTP CASE      \n      if (this.conn) {\n        if (!this.connectionList.isGood(serverToUse,\n              this.conn.constr,\n              mainRequest.isCrossSite(),\n              this.policyBean.isCookieHandlingRequired(),\n              mainRequest.isCrossProtocol(),\n              this.policyBean.hasHttpExtraHeaders(false))) {\n          this.connectionList._reset();\n          this.conn = null;\n        }\n      }\n      \n      \n      \n      var done = false;\n      while ((this.conn || this.connectionList.hasNext()) && done === false) {\n      \n        if (!this.conn) {\n          var classTU = this.connectionList.getNext(serverToUse,\n              mainRequest.isCrossSite(),\n              this.policyBean.isCookieHandlingRequired(),\n              mainRequest.isCrossProtocol(),\n              this.policyBean.hasHttpExtraHeaders(false));\n          \n          if (!classTU) {\n          //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n//            ASSERT.fail(); //no reason to be here, we have a session id so there should be at least one working connection\n          //>>excludeEnd(\"debugExclude\");  \n            requestsLogger.logWarn(\"Unable to find a connection for control requests, will try again later\",this.conn);\n            \n            //no solutions, exit\n            this.connectionList._reset();\n            \n            return NO_CONN;\n          }\n          \n          this.conn = new classTU(\"LS6__CONTROLFRAME\");\n          requestsLogger.logDebug(\"Connection for control batch chosen\",this.conn);\n        }      \n        \n        var controlRequest = this.customizeRequest(queueToSend,this.conn);\n        if(controlRequest == null) {\n          requestsLogger.logDebug(\"Empty request for HTTP was generated, exit\");\n          return REQ_EMPTY;\n        }\n        \n        mainRequest.setFile(controlRequest.getFile());\n        mainRequest.setData(controlRequest.getData());\n        mainRequest.setMethod(controlRequest.getMethod());\n        \n        this.lastBatch.setPhase(this.statusPhase);\n        this.conn._close();\n\n\n//>>excludeStart(\"debugExclude\", pragmas.debugExclude);\n        if (this.fakeSyncError) {\n          mainRequest._data = mainRequest._data.replace(/LS_session=.*&/g,\"LS_session=FAKE&\");\n        }\n//>>excludeEnd(\"debugExclude\");\n\n\n\n        sent = this.conn._load(mainRequest, this.lastBatch.getPhase(), Executor.packTask(this.onReadyForNextRequest,this), Executor.packTask(this.onErrorEvent,this));\n        \n        if (sent === false) {\n          requestsLogger.logDebug(\"Connection failed, will try a different connection\");\n          this.conn = null;\n          \n        } else if (sent === null) {\n          requestsLogger.logDebug(\"Connection temporarily unavailable, will try later\");\n          //wait and try again\n          return SEND_LATER;\n          \n        } else { //sent === true\n          //requests sent, notify the owners\n          this.connectionList._reset();\n          return SENT_HTTP;\n        }\n        \n      }\n      \n//////////////////////////////???? CASE \n      \n      if (sent === false) {\n        //all my connections failed :(\n        return NO_CONN;\n      } else {\n      //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n        ASSERT.fail();\n      //>>excludeEnd(\"debugExclude\");\n        requestsLogger.logError(\"Unexpected sending outcome\");\n      }\n      \n      return NO_CONN;\n      \n    },\n\n    \n    /**\n     * Fill attribute lastBatch with requests from the same queue until the queue is empty or the request limit is reached.\n     * @private\n     */\n    customizeRequest: function(queueToSend,connToUse) {\n      var encoder = connToUse.getEncoder();\n      \n      //compose\n      //run this once; if the while is performed more times we will not recalculate the overhead, if the request is too big \n      //the server will ignore it and the client will recompose with the new connection. It should be a very rare case,\n      //especially now as the FormConnection is much more difficult to reach and is the only one with a different overhead calculation\n      if (this.lastBatch == null) {      \n        \n        this.lastBatch = new LastBatch();\n        this.lastBatch.setEncoder(encoder);\n        this.lastBatch.fill(queueToSend,this.requestLimit,this._owner.getSessionId(),this.policyBean.isCookieHandlingRequired(),this.policyBean.extractHttpExtraHeaders(false));\n        \n      } else if (this.lastBatch.needsNewEncode(encoder)) {\n\n        this.lastBatch.setEncoder(encoder);\n        var overflow = this.lastBatch.refill(this.requestLimit,this._owner.getSessionId(),this.policyBean.isCookieHandlingRequired(),this.policyBean.extractHttpExtraHeaders(false));\n        \n        if (overflow) {\n          var batchType = overflow.getBatchType();\n          //TODO I NEED A TEST TO PASS FROM HERE!\n          \n          while(overflow.getLength() > 0) {\n            this.addToProperBatch(batchType,overflow.shift());\n          }\n        }\n        \n        \n      }\n      \n      if (this.lastBatch.isEmpty()) {\n        this.lastBatch = null;\n        return null;\n      }\n      return this.lastBatch.getRequest();\n     \n    },\n    \n    /**\n     * HTTP case only\n     */\n    /*private*/ onReadyForNextRequest: function(_responseText,sentPhase) {\n      if (!this.lastBatch || sentPhase !=  this.lastBatch.getPhase()) {\n        //a reset occurred, we don't care about this response\n        //flex client has a call to asynchDequeueControlRequests here\n        return;\n      }\n      \n      if (streamLogger.isDebugLogEnabled()) {\n          streamLogger.logDebug(\"Control request got answer\", sentPhase, _responseText);          \n      }\n      requestsLogger.logInfo(\"Control request got answer\",sentPhase);\n      this.changeStatus(_IDLE, \"onReadyForNextRequest\");\n\n      var realType = this.lastBatch.firstRequest().getType();\n      this.lastBatch = null;\n\n      this._owner.enqueueControlResponse(_responseText);\n      //check if there are other requests\n      this.dequeue(ASYNC_DEQUEUE,\"ready4next\");\n    },\n    \n    /**\n     * HTTP case only\n     */\n    /*private*/ onErrorEvent: function(exc,sentPhase) {\n      if (!this.lastBatch || sentPhase != this.lastBatch.getPhase()) {\n        //a reset occurred, we don't care about this response \n        return;\n      }\n      requestsLogger.logInfo(\"Error from network\",this,exc);\n   \n      //what should I do in this case? Should I resend the last request or is it better if I\n      //wait for the owners to re-enqueue their requests?\n      //I decided to go the safe way by not resending the same request. If important the client will ask\n      //to send the request again\n      \n      this.changeStatus(_IDLE, \"onErrorEvent\");\n      this.lastBatch = null;\n      //check if there are other requests already in queue\n      this.dequeue(ASYNC_DEQUEUE,\"error\"); \n    },\n    \n    /**\n     * Associates the LS_reqId of the request with its listener.\n     */\n    addRequestListener: function(request, requestListener) {\n        var reqId = request['LS_reqId'];\n        if (reqId != null && requestListener != null) {\n            this.requestListenerMap[reqId] = requestListener;\n        }\n    },\n    \n    /**\n     * Gets and removes from the listener map the listener having the given LS_reqId.\n     */\n    getAndRemoveRequestListener: function(reqId) {\n        var requestListener = this.requestListenerMap[reqId];\n        delete this.requestListenerMap[reqId];\n        return requestListener;\n    }\n    \n  };\n  \n  \n  var LastBatch = function() {\n    this.batch = null;\n    this.encoder = null;\n    this.request = null; \n    this.phase = null;\n  };\n  \n  LastBatch.prototype = {\n      toString: function() {\n        return this.batch ? this.batch.toString() : null;\n      },\n      \n      getBatchType: function() {\n        return this.batch ? this.batch.getBatchType() : null;\n      },\n      \n      firstRequest: function() {\n        return this.batch ? this.batch.firstRequest() : null;\n      },\n      \n      getLength: function() {\n        return this.batch ? this.batch.getLength() : 0;\n      },\n      \n      shift: function() {\n        return this.batch ? this.batch.shift() : null;\n      },\n      \n      getRequest: function() {\n        return this.request;\n      },\n      \n      needsNewEncode: function(encoder) {\n        return encoder != this.encoder;\n      },\n      \n      setEncoder: function(encoder) {\n        this.encoder = encoder;\n      }, \n      \n      fill: function(queue,lengthLimit,sessionId,cookieHandlingRequired,extraHeaders) {\n        if (queue.getLength() <= 0) {\n          return;\n        }\n        \n        this.batch = new ControlRequestBatch(queue.getBatchType());\n        this.request = this.encoder.initRequest(queue,cookieHandlingRequired,extraHeaders); //sets file and method, not server\n        \n        //NOTE we always queue the first request\n        var requestData = \"\";\n        var nextEncodedReq = this.encoder.encode(queue,sessionId,true);\n        if (nextEncodedReq === null) {\n          //nothing to send\n          this.batch = null;\n          this.request = null;\n          return;\n        }\n\n        var expectedFinalLength = this.encoder.getFixedOverhead(this.request.getFile());\n        var nextExpectedLength = this.encoder.getInvisibleOverhead(nextEncodedReq) + nextEncodedReq.length;\n        \n        if (lengthLimit > 0 && (nextExpectedLength+expectedFinalLength) > lengthLimit) {\n          requestsLogger.logWarn(\"A single request size exceeds the <request_limit> configuration setting for the Server. Trying to send it anyway although it will be refused\",requestData);\n        }\n        \n        \n        do {\n          requestData+=nextEncodedReq;\n          this.batch.addRequestToBatch(queue.shift());\n          expectedFinalLength +=  nextExpectedLength; \n          \n          if (queue.getLength() > 0) {\n            nextEncodedReq = this.encoder.encode(queue,sessionId);\n            if (nextEncodedReq) {\n              nextExpectedLength = this.encoder.getInvisibleOverhead(nextEncodedReq) + nextEncodedReq.length;\n            }\n          }\n        } while (nextEncodedReq && (lengthLimit == 0 || expectedFinalLength + nextExpectedLength < lengthLimit) && queue.getLength() > 0);\n        \n        this.request.setData(this.encoder.wrapUp(requestData));\n        \n      },\n      \n      refill: function(lengthLimit,sessionId,cookieHandlingRequired,extraHeaders) {\n        var dismissing = this.batch;\n        this.batch = null;\n        this.fill(dismissing,lengthLimit,sessionId,cookieHandlingRequired,extraHeaders);\n        if (dismissing.getLength() > 0) {\n          return dismissing;\n        }\n        return null;\n      },\n      \n      getPhase: function() {\n        return this.phase;\n      },\n      \n      setPhase: function(ph) {\n        this.phase = ph;\n      },\n      \n      isEmpty: function() {\n        return this.getLength() <= 0;\n      }, \n      \n      notifySenders: function(failed) {\n        var i = 0;\n        var sentReq = null;\n        while(sentReq = this.batch.getRequestObject(i)) {\n          var bridge = sentReq.getBridge();\n          if (bridge) {\n            Executor.addTimedTask(bridge.notifySender,0,bridge,[failed]);\n          }\n          i++;\n        }\n      }\n      \n      \n  };\n  \n  export default ControlConnectionHandler;\n\n\n","import LoggerManager from \"../../src-log/LoggerManager\";\nimport Global from \"../Global\";\nimport Helpers from \"../../src-tool/Helpers\";\nimport ASSERT from \"../../src-test/ASSERT\";\nimport Constants from \"../Constants\";\n  \n  //Coefficient of the moving average used to collect samples of delays.\n  var momentum = 5/10;\n  //Maximum level of the delay allowed, beyond which the adjustment is triggered (milliseconds).\n  var maxMean = 7000;\n  var hugeDelay = 20000;\n  \n  var protocolLogger = LoggerManager.getLoggerProxy(Constants.PROTOCOL);\n  var sessionLogger = LoggerManager.getLoggerProxy(Constants.SESSION);\n  \n  var SlowingHandler = function(policyBean,engId) {\n    \n    // Time of reception of the first synchronization signal from the server; acts as a reference for subsequent checks on the delay with respect to the server.\n    this.refTime = 0;\n    // Average delay compared to the server so far measured (milliseconds).\n    this.meanElaborationDelay = null;\n    \n    this.hugeFlag = false;\n    \n    this.policyBean = policyBean;\n    \n    this.session = null;\n  };\n  \n  \n  SlowingHandler.prototype = {\n    \n    \n    /*public*/ toString: function() {\n      return [\"[\",\"SlowingHandler\",this.meanElaborationDelay,this.refTime,momentum,maxMean,\"]\"].join(\"|\");\n    },\n    \n    /*public*/ isLate: function(lateVal) {\n      return this.meanElaborationDelay!=null  && this.meanElaborationDelay > lateVal;\n    },\n    \n    /*public*/ changeSession: function(newSession) {\n      this.session = newSession;\n    },\n    \n    /*public*/ getDelay: function() {\n      /*if (!this.policyBean.slowingEnabled) {\n        return null;\n      }*/\n      return this.meanElaborationDelay!=null && this.meanElaborationDelay>0 ? Math.round(this.meanElaborationDelay) : null;\n    },\n    \n    /*public*/ resetSync: function() {\n      this.meanElaborationDelay = null;\n      this.hugeFlag = false;\n    },\n    \n    /*public*/ prepareForSync: function() {\n      this.hugeFlag = false;\n    },\n   \n    /*public*/ testPollSync: function(millis) {\n      // we reuse the mechanism for calculating the statistics of streaming\n      this.testSync(millis);\n      // ignore the result; for polling, if the delays are too high,\n      // we could run into a sync error with subsequent reconnection\n    },\n    \n    /*private*/ syncCheck: function(secs) {\n    //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n      if (!ASSERT.verifyOk(this.session.isReceivingAnswer())) {\n        protocolLogger.logError(\"Sync message received while session wasn't in receiving status\");\n      }\n    //>>excludeEnd(\"debugExclude\");\n      // request for synchronization control\n      if (this.session.isStreamingSession()) {\n        // sync does not arrive in polling\n        // and moreover they would not be significant\n        var syncProblem = this.testSync(secs * 1000);\n\n        if (!syncProblem) {\n          this.session.onSynchOk();\n          \n        } else if (this.policyBean.slowingEnabled) {\n          // we could use constrains to reduce the flow,\n          // but we've seen that polling is enough\n          this.session.onSlowRequested();\n          \n          // the average delay (meanElaborationDelay) of the streaming case\n          // remains as the initial estimate of the expected delay to each poll\n        }\n    \n      }\n      \n    },\n    \n    /*public*/ startSync: function(isPolling) {\n      if (!isPolling) {\n        // by convention, in streaming we reset the measurements \n        // of average delays at each new session\n        this.resetSync();\n      } else {\n        // we keep the estimate already accumulated, not only in the previous cycles,\n        // but also in the previous session, even if it was streaming;\n        // the thing has the only effect to increase the life of the\n        // session requested from the Server; we just have to try not to overdo it\n      }\n      \n      this.refTime = Helpers.getTimeStamp();\n    },\n    \n    /*private*/ testSync: function(millis) {\n      // heuristic check to determine if the client lags behind\n      // and possible relaunch of the server with heuristic modification of the minimum refresh time\n      var currTime = Helpers.getTimeStamp();\n      \n      \n      if (!this.refTime) {\n        //this cannot happen..btw we handle the case signaling a delay problem\n        return true;\n      }\n      \n  /////// leave the comment to trigger the heuristic: //////////////////////////////////////////////////////////////////////////\n      // this.refTime -= 2000;\n      \n      /*cc = !cc ? 1 : cc+1;\n       if (cc == 4) {\n         this.refTime -= 200000;\n       } else if (cc == 5) {\n         this.refTime += 200000;\n       }*/\n      \n      var diffTime = (currTime - this.refTime) - millis;\n      // calculate a moving average of delays;\n      // I do not take into account the distance between the different observations\n      if (this.meanElaborationDelay == null) {\n        this.meanElaborationDelay = diffTime;\n        sessionLogger.logDebug(\"First sync message, check not performed\");\n        return false;        // the first time, I don't check\n        \n      } else {\n        \n        //detect unlucky sleep\n        //we should avoid false positive...how? \n        //If we got a huge delay we forgive the first one but not the second one \n        if (diffTime > hugeDelay && diffTime > this.meanElaborationDelay*2) {\n          this.hugeFlag = !this.hugeFlag;\n          if (this.hugeFlag) {\n            sessionLogger.logInfo(\"Huge delay detected by sync signals. Restored from standby/hibernation?\");\n            //let's try to ignore this check, the pc probably slept; we should get a sync error soon\n            return this.meanElaborationDelay > maxMean;\n          }\n        } \n        \n        \n        this.meanElaborationDelay = this.meanElaborationDelay * momentum + diffTime * (1 - momentum);\n\n        if (this.meanElaborationDelay < 60) { //the executer runs every 50ms, we can forgive such delay\n          this.meanElaborationDelay = 0;\n          sessionLogger.logDebug(\"No delay detected by sync signals\");\n          return false;\n              \n        } else if (this.isLate(maxMean)) {\n          // things are going bad\n          sessionLogger.logInfo(\"Delay detected by sync signals\");\n          return true;\n            \n        } else {\n          sessionLogger.logDebug(\"No delay detected by sync signals\");\n          return false;\n            \n        }\n      }\n    }\n    \n\n  };\n  \n  export default SlowingHandler;\n  \n","import Constants from \"../Constants\";\nimport Session from \"./Session\";\nimport SessionHTTP from \"./SessionHTTP\";\nimport Inheritance from \"../../src-tool/Inheritance\";\nimport WebSocketConnection from \"../net/WebSocketConnection\";\nimport ConnectionSelector from \"../net/ConnectionSelector\";\nimport RequestsHelper from \"./RequestsHelper\";\nimport Executor from \"../../src-tool/Executor\";\nimport LoggerManager from \"../../src-log/LoggerManager\";\nimport ASSERT from \"../../src-test/ASSERT\";\nimport Request from \"../net/Request\";\nimport Utils from \"../Utils\";\n  \n  var WS_OFF = 1;\n  var WS_OPEN = 2;\n  var WS_FAIL = 3;\n  var WS_ALIVE = 4;\n  var WS_INADEQUATE = 5;\n  var WS_LIGHT_FAIL = 6;\n  \n  var names = {\n      createSent: \"createSent\",\n      onTimeout: \"onTimeout\",\n      onLoop: \"onLoop\",\n      onStreamError: \"onStreamError\",\n      onStreamEnd: \"onStreamEnd\",\n      onErrorEvent: \"onErrorEvent\",\n      shutdown: \"shutdown\",\n      onSessionGivesUp: \"onSessionGivesUp\",\n      onSessionBound: \"onSessionBound\"\n  };\n  names = Utils.getReverse(names); \n    \n  \n  var sessionLogger = LoggerManager.getLoggerProxy(Constants.SESSION);\n  \n  var RECOVERY_SCHEDULED = false;\n  \n  var SessionWS = function(isPolling,forced,handler,handlerPhase,originalSession,skipCors,sessionRecovery) {\n    this._callSuperConstructor(SessionWS,arguments);\n    \n    this.wsConn = null;\n    \n    this.wsPhase = WS_OFF;\n    this.openWSPhase = null;\n    \n    this.forceEarlyWSOff = false;\n    \n  };\n  \n  \n  SessionWS.prototype = {\n      toString: function() {\n        return [\"[\",\"SessionWS\",\"oid=\"+this.objectId,this.isPolling,this.forced,this.phase,this.phaseCount,this.push_phase,this.wsPhase,this.workedBefore,this.sessionId,this.dataNotificationCount,this.wsConn,this.switchRequired,this.slowRequired,\"]\"].join(\"|\");\n      },\n      \n      /*reset: function() {\n        this._callSuperMethod(SessionWS,\"reset\");\n      },*/\n      \n      changeWSPhase: function(newPhase) {\n        this.wsPhase = newPhase;\n      },\n      \n      getConnectedHighLevelStatus: function() {\n        return this.isPolling?Constants.WS_POLLING:Constants.WS_STREAMING;\n      },\n      \n      getFirstConnectedStatus: function() {\n        return Constants.SENSE;\n      },\n      \n      /*private*/ openWS: function() {\n      //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n        if (!ASSERT.verifyValue(this.wsPhase,WS_OFF)) {\n          sessionLogger.logError(\"Unexpected ws phase while opening connection\");\n        }\n      //>>excludeEnd(\"debugExclude\");\n        \n        this.openWSPhase = this.push_phase;\n        \n        this.wsConn =  new WebSocketConnection(this);\n        var _serverToUse = this.getPushServerAddress();\n        var connRequest = new Request(_serverToUse+Constants.LIGHTSTREAMER_PATH);\n        \n        connRequest.setCookieFlag(this.policyBean.isCookieHandlingRequired()); \n        connRequest.setExtraHeaders(this.policyBean.extractHttpExtraHeaders(false));\n        \n        if (ConnectionSelector.isGood(_serverToUse,\n            WebSocketConnection,\n            connRequest.isCrossSite(),\n            this.policyBean.isCookieHandlingRequired(),\n            connRequest.isCrossProtocol(),\n            this.policyBean.hasHttpExtraHeaders(false))) {\n            sessionLogger.logDebug(\"Open WebSocket to server\");\n          \n          if (this.wsConn.openSocket(connRequest,this.openWSPhase,this.cbOk,this.cbErr,this.cbEnd)) {\n            this.controlHandler.assignWS(this.wsConn);\n            this.changeWSPhase(WS_OPEN);\n            return true;\n          } \n        } \n        // (if this is an early open) calling this while the create has not returned yet \n        //would generate a new create\n        //this.onSessionGivesUp(this.handlerPhase,\"ws.notgood\");\n        this.changeWSPhase(WS_INADEQUATE);\n        return false;\n        \n      },\n      \n      /*public*/ createSent: function() {\n        this._callSuperMethod(SessionWS,names['createSent']);\n        \n        if (this.policyBean.earlyWSOpenEnabled && !this.forceEarlyWSOff) {\n          this.openWS();\n        } \n      },\n      \n      /*public*/ bindSessionExecution: function(ph,bindCause) {\n        if (ph != this.phaseCount) {\n          return;\n        }\n        \n        this.forceEarlyWSOff = false;\n       \n        if(this.wsPhase == WS_OFF) {\n          this.openWS();\n        } else if (this.wsPhase == WS_OPEN) {\n          //If we opened the ws to the loadbalancer but then we received a control link \n          //then we must close the current ws and open a new one\n          if (!this.wsConn.isConnectedToServer(this.getPushServerAddress())) {\n            sessionLogger.logWarn(\"A control link was received while earlyWSOpenEnabled is set to true, a WebSocket was wasted.\");\n            this.wsConn._close();\n            this.changeWSPhase(WS_OFF);\n            this.openWS();\n          }\n        }\n        \n        if (this.wsPhase == WS_LIGHT_FAIL) {\n          this.onSessionGivesUp(this.handlerPhase,\"ws.early.closed\");\n          return;\n          \n        } else if (this.wsPhase == WS_INADEQUATE) {\n          this.onSessionGivesUp(this.handlerPhase,\"ws.notgood\");\n          return;\n          \n        } else if (this.wsPhase == WS_FAIL) {\n          //if we're here the create call was successful while the websocket open was not\n          WebSocketConnection.disableClass(this.getPushServerAddress());\n          this.onSessionGivesUp(this.handlerPhase,\"ws.early.openfail\");\n          return;\n        } \n\n\n        var connRequest = this.generateRequest(null,bindCause,false,false);\n        var done = false;\n        connRequest.setFile(RequestsHelper.getPushPath(false,this.isPolling,this.wsConn.getEncoder().getExt()));\n        \n        var firstSend = false;\n        if (this.wsPhase == WS_OPEN) {\n          done = this.wsConn.sessionLoad(connRequest,this.push_phase,this.cbOk,this.cbErr,this.cbEnd,this.engineId);\n          firstSend = true;\n          \n        } else if (this.wsPhase == WS_ALIVE) {\n          done = this.wsConn._send(connRequest,this.push_phase);\n          \n        } else {\n        //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n          ASSERT.fail();\n        //>>excludeEnd(\"debugExclude\");\n          sessionLogger.logError(\"Unexpected ws phase during binding\",this);\n        }\n        \n        \n        if (done === null) {\n          sessionLogger.logDebug(\"WebSockets currently unavailable, delaying connection\");\n          Executor.addTimedTask(this.bindSessionExecution,50,this,[ph,bindCause]);\n        } else if (done === false) {\n          sessionLogger.logWarn(\"Unexpected WebSocket failure\");\n          this.onSessionGivesUp(this.handlerPhase,\"ws.false\");\n        } else if (!firstSend) { \n          sessionLogger.logDebug(\"Connection to server bound upon WebSocket\");\n          this.bindSent();\n        } //else wsConnection will call the firstSentNotification\n        \n      },\n      \n      firstSentNotification: function(oPhase) {\n        if (this.openWSPhase == oPhase) {\n          sessionLogger.logDebug(\"Connection to server open upon WebSocket\");\n          this.bindSent();\n          this.changeWSPhase(WS_ALIVE);\n        }\n      },\n      \n      /*private*/ onTimeout: function(timeoutType,ph,usedTimeout,coreCause,sessionRecovery) {\n        if (ph != this.phaseCount) {\n          return;\n        }\n      \n        if (this.phase == Session.CREATING) {\n          this.forceEarlyWSOff = true;\n        }\n        \n        this._callSuperMethod(SessionWS,names['onTimeout'],[timeoutType,ph,usedTimeout,coreCause,sessionRecovery]);\n      },\n  \n      onLoop: function(serverSentPause) {\n        this._callSuperMethod(SessionWS,names['onLoop'],[serverSentPause]);\n        \n        if (this.wsConn) {\n          //we consider ourselves paused, but still the websocket is open (polling case) or \n          //may be open (streaming case with early open)\n          //I need to change its phase to handle events that may occur while we are \"paused\"\n          this.wsConn.updatePhase(this.push_phase);\n        }\n      },\n\n      /*private*/ onStreamError: function(reason,toCheckPhase,fromWS,unableToOpen,possibleLoop) {\n        if (fromWS) {\n          //in this case we check the openWSPhase that is semi-unrelated to the phase of the session,\n          //we may open the websocket during all of the phases from OFF to FIRST_PAUSE and such\n          //opening does not aff3ect the status of the session at all.\n          //A positive note: when a websocket is opened but nothing is sent the only possible event it can\n          //generate is an onStreamError          \n          if (toCheckPhase == this.openWSPhase) {\n            //once we've assessed that the open phase is correct we can forward the event\n            //with the current phase.\n            this._callSuperMethod(SessionWS,names['onStreamError'],[reason,this.push_phase,fromWS,unableToOpen,possibleLoop]);\n          }\n        } else {\n          if (this.phase == Session.CREATING) {\n            this.forceEarlyWSOff = true;\n          }\n          this._callSuperMethod(SessionWS,names['onStreamError'],arguments);\n        }\n      },\n      \n      /*private*/ onStreamEnd: function(toCheckPhase,fromWS) {\n        if (fromWS) {\n          if (toCheckPhase == this.openWSPhase) {\n            \n            if (this.phase == Session.OFF || this.phase == Session.CREATING || this.phase ==  Session.CREATED) {\n              //this is the end of an early socket, consider it as an error event\n              this.onErrorEvent(\"ws.early.end\",{fromWS: true});\n              \n            } else {\n            //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n              if (!ASSERT.verifyDiffValue(this.phase,Session.FIRST_PAUSE)) {\n                sessionLogger.logError(\"Unexpected phase for an clean end of a WS\",this);\n              }\n            //>>excludeEnd(\"debugExclude\"); \n              this._callSuperMethod(SessionWS,names['onStreamEnd'],[this.push_phase,fromWS]);\n            }\n            \n          }\n        } else {\n          if (this.phase == Session.CREATING) {\n            this.forceEarlyWSOff = true;\n          }\n          this._callSuperMethod(SessionWS,names['onStreamEnd'],arguments);\n        }\n      },\n      \n      /*protected*/ onErrorEvent: function(reason, args) {\n        args = args || {};\n        var closedOnServer = args.closedOnServer;\n        var fromWS = args.fromWS;\n        var unableToOpen = args.unableToOpen;\n        var noImplAvailable = args.noImplAvailable;\n        var possibleLoop = args.possibleLoop;\n        var tryRecovery = args.tryRecovery;\n        var serverBusyError = args.serverBusyError;\n        if (fromWS) {\n        //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n          if (!ASSERT.verifyDiffValue(this.wsPhase,WS_OFF)) {\n            sessionLogger.logError(\"Unexpected connection error on a connection that was not yet open\",this);\n          }\n        //>>excludeEnd(\"debugExclude\"); \n          if (unableToOpen) {\n            this.changeWSPhase(WS_FAIL);\n          } else {\n            this.changeWSPhase(WS_LIGHT_FAIL);\n          }\n          \n          if (this.phase == Session.OFF || this.phase == Session.CREATING || this.phase ==  Session.CREATED) {\n            //this is an error on a early open, we can't act now as we must wait for the loop from the create\n            //otherwise we would waste the entire session\n            //NOPPING!\n            sessionLogger.logDebug(\"WebSocket was broken before it was used\",this);\n           \n          } else if (this.phase == Session.FIRST_PAUSE) {\n            //ws is now in control\n            //so let's act now\n            sessionLogger.logDebug(\"WebSocket was broken while we were waiting the first bind\",this);\n            \n            if (unableToOpen) {\n              WebSocketConnection.disableClass(this.getPushServerAddress());\n            }\n\n            //as the bind was not yet sent (otherwise we would be in the FIRST_BINDING phase) we can recover\n            //binding via HTTP\n            this.onSessionGivesUp(this.handlerPhase,\"ws.error.\"+reason);\n            \n          } else if (this.isPolling && this.phase == Session.PAUSE) {\n          //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n            if (!ASSERT.verifyNotOk(unableToOpen)) {\n              sessionLogger.logError(\"can't be unable-to-open since the connection is already open\",this);\n            }\n          //>>excludeEnd(\"debugExclude\");\n            \n            sessionLogger.logDebug(\"WebSocket was broken while we were waiting\",this);\n            this.closeSession(reason,closedOnServer,RECOVERY_SCHEDULED);\n            this.onTimeout(\"zeroDelay\",this.phaseCount,0,\"ws.broken.wait\");\n                      \n          } else {\n            //classic case, we can use the default handling\n            this._callSuperMethod(SessionWS,names['onErrorEvent'],arguments);\n            \n          }\n          \n        } else {\n          if (this.phase == Session.CREATING) {\n            this.forceEarlyWSOff = true;\n          }\n          this._callSuperMethod(SessionWS,names['onErrorEvent'],arguments);\n        }\n        \n      },\n   \n      /*public*/ shutdown: function(justSleep) {\n        this._callSuperMethod(SessionWS,names['shutdown'],[justSleep]);\n        if (this.wsConn) {\n          this.openWSPhase = null;\n          this.wsConn._close();\n          this.wsConn = null;\n          \n          this.controlHandler.assignWS(null);\n        }\n        this.changeWSPhase(WS_OFF);\n      },\n      \n      /*protected*/ needsHourglassTrick: function() {\n        return false;\n      },\n      \n      /*protected*/ onSessionGivesUp: function(ph,reason) {\n          /*\n           * Since a bind_session request over WebSocket failed,\n           * the WebSocket support is disabled.\n           * When the client IP changes, the support will be enabled again.\n           */\n          WebSocketConnection.disableClass(this.getPushServerAddress());\n          this._callSuperMethod(SessionWS,names['onSessionGivesUp'],[ph, reason]);\n      },\n      \n      /**@override*/\n      onSessionBound: function() {\n          this._callSuperMethod(SessionWS,names['onSessionBound']);\n          this.wsConn.setDefaultSessionId(this.sessionId);\n      },\n      \n      /**@override*/\n      forwardDestroyRequestToTransport: function(sessionId, request, type, related, retryingOrHost, requestListener) {\n          this.controlHandler.addSyncRequest(sessionId, request, type, related, retryingOrHost, requestListener);\n      }\n  };\n  \n  \n  Inheritance(SessionWS,SessionHTTP);\n  export default SessionWS;\n\n","import Constants from \"../Constants\";\nimport Inheritance from \"../../src-tool/Inheritance\";\nimport Session from \"./Session\";\nimport ConnectionSelector from \"../net/ConnectionSelector\";\nimport Hourglass from \"../net/Hourglass\";\nimport Request from \"../net/Request\";\nimport Utils from \"../Utils\";\nimport RequestsHelper from \"./RequestsHelper\";\nimport Executor from \"../../src-tool/Executor\";\nimport LoggerManager from \"../../src-log/LoggerManager\";\nimport BrowserDetection from \"../../src-tool/BrowserDetection\";\nimport EnvironmentStatus from \"../../src-tool/EnvironmentStatus\";\nimport IEXSXHRConnection from \"../net/IEXSXHRConnection\";\nimport XSXHRConnection from \"../net/XSXHRConnection\";\n  \n  var names = {\n      createSession: \"createSession\",\n      bindSession: \"bindSession\",\n      shutdown: \"shutdown\",\n      bindSent: \"bindSent\",\n      onEvent: \"onEvent\",\n      onErrorEvent: \"onErrorEvent\"\n  };\n  names = Utils.getReverse(names); \n  \n  var MAYBE_ONLINE_TIMEOUT = 20000;\n  var OFFLINE_CHECKS_PROTECTION = 1;\n  var maybeOnline = 1;\n  var maybePhase = 1;\n  function resetMaybeOnline(mp) {\n    if (mp && mp != maybePhase) {\n      return;\n    }\n    maybePhase++;\n    maybeOnline = OFFLINE_CHECKS_PROTECTION;\n  }\n  \n  var sessionLogger = LoggerManager.getLoggerProxy(Constants.SESSION);\n  var protocolLogger = LoggerManager.getLoggerProxy(Constants.PROTOCOL);\n  \n  var SessionHTTP = function(isPolling,forced,handler,handlerPhase,originalSession,skipCors,sessionRecovery) {\n    this._callSuperConstructor(SessionHTTP,arguments);\n    \n    this.createList = null;\n    this.chosenConnection = null;\n    \n    this.connectionList = null;\n    this.myGlass = null;\n    \n    this.activeConnection = null;\n    \n    this.resetConnectionList(skipCors);\n  };\n  \n  SessionHTTP.prototype = {\n      \n      /*public*/ resetConnectionList: function(skipCors) {\n        \n        skipCors = skipCors || !this.policyBean.corsXHREnabled;\n        \n        this.createList = new ConnectionSelector(ConnectionSelector.POLL_LIST, false, skipCors);\n        if (this.isPolling) {\n          //this.connectionList = this.createList;\n          this.connectionList = new ConnectionSelector(ConnectionSelector.POLL_LIST, false, skipCors);\n        } else {\n          this.connectionList = new ConnectionSelector(ConnectionSelector.STREAMING_LIST, !this.policyBean.xDomainStreamingEnabled, skipCors);\n        }\n        \n        this.chosenConnection = null;\n      },\n      \n      getConnectedHighLevelStatus: function() {\n        return this.isPolling?Constants.HTTP_POLLING:Constants.HTTP_STREAMING;\n      },\n      \n      getFirstConnectedStatus: function() {\n        return this.isPolling?Constants.HTTP_POLLING:Constants.SENSE;\n      },\n\n      toString: function() {\n        return [\"[\",\"SessionHTTP\",\"oid=\"+this.objectId,this.isPolling,this.forced,this.phase,this.phaseCount,this.push_phase,this.workedBefore,this.sessionId,this.dataNotificationCount,this.switchRequired,this.slowRequired,\"]\"].join(\"|\");\n      },\n      \n      /*public*/ createSession: function(oldSessionId,reconnectionCause,serverBusy) {\n        if (!this._callSuperMethod(SessionHTTP,names['createSession'],[oldSessionId,reconnectionCause,serverBusy])) {\n          return false;\n        }\n      \n        this.createSessionExecution(this.phaseCount,reconnectionCause,oldSessionId);\n        return true;\n      },\n      \n      /*protected*/ createSessionExecution: function(ph,reconnectionCause,oldSessionId) {\n        if (ph != this.phaseCount) {\n          return;\n        }\n        \n        this.handler.disableCorsCheck();\n        \n        if (Utils.isOffline()) {\n          if (maybeOnline <= 0) {\n            sessionLogger.logDebug(\"Client is offline, delaying connection to server\");\n            Executor.addTimedTask(this.createSessionExecution,3000,this,[ph,oldSessionId,\"offline\"]); //overwrite reconnectionCause\n            return;\n          } else {\n            maybeOnline--;\n            if (maybeOnline == 0) {\n              //avoid to lock on the offline flag, once in MAYBE_ONLINE_TIMEOUT seconds reset the flag\n               Executor.addTimedTask(resetMaybeOnline,MAYBE_ONLINE_TIMEOUT,null,[maybePhase]);\n            }\n          }\n        }\n        var done = this.executeConnection(oldSessionId, this.createSessionExecution, reconnectionCause, false);\n        \n        if (done === null) {\n          return;\n          \n        } else if (done) {\n         this.createSent();\n         \n          \n        } else if (done === false) {\n          //WE GOT A PROBLEM!! And I don't have any solution!\n          sessionLogger.logWarn(\"Unable to use available connections to connect to server\");\n          \n          this.onErrorEvent(\"no_impl_available\",{closedOnServer: true,noImplAvailable: true});\n        }\n        \n       \n      },\n      \n      /*public*/ bindSession: function(bindCause) {\n        if (!this._callSuperMethod(SessionHTTP,names['bindSession'],[bindCause])) {\n          return false;\n        }\n        \n        if (this.activeConnection) {\n          this.activeConnection._close();\n        }\n        \n        this.fixSpin();\n        \n        this.bindSessionExecution(this.phaseCount,bindCause);\n        return true;\n      },\n      \n      /*private*/ fixSpin: function() {\n        if (!EnvironmentStatus.isLoaded()) {\n          //if a bind connection is opened before the onload event on Apple browsers and Android \n          //browsers the loading indicator will remain on. This trick should remove it...\n          if ((this.policyBean.spinFixEnabled === null &&  (BrowserDetection.isProbablyAndroidBrowser() || BrowserDetection.isProbablyApple())) || this.policyBean.spinFixEnabled === true) {\n            var ph = this.bindCount;          \n            var that = this;\n            EnvironmentStatus.addOnloadHandler(function() {\n              Executor.addTimedTask(function() {\n                //check bindCount to prevent multiple forceRebind\n                //check that a connection is currently open otherwise the fix is useless\n                if (ph == that.bindCount && that.phase == Session.RECEIVING) {\n                  that.forceRebind(\"spinfix\");\n                }\n              },that.policyBean.spinFixTimeout);\n            });\n          }\n        }\n      },\n      \n      \n      /*protected*/ bindSessionExecution: function(ph,bindCause) {\n        if (ph != this.phaseCount) {\n          return;\n        }\n        \n        if (!this.myGlass && !this.isPolling) {\n          this.myGlass = new Hourglass();\n        }\n        \n        var done = this.executeConnection(null,this.bindSessionExecution,bindCause,false);\n        \n        if (done === null) {\n          return;\n          \n        } else if (done) {\n          this.bindSent();\n          \n        } else if (done === false) {\n          //done === false\n          //WE GOT A PROBLEM!!\n          if (!this.isPolling) {\n            //we may have more luck in polling if the request is cross-site and we're on a browser that doesn't support\n            //cross-site streaming: JSONP may save us\n            this.onSessionGivesUp(this.handlerPhase,\"streaming.unavailable\");\n            return;\n          }\n          \n          //WE GOT A PROBLEM!! And I don't have any solution!\n        }\n        \n      },\n      \n      /*public*/ recoverSession: function() {\n          this.incPushPhase();\n          var done = this.executeConnection(null, this.recoverSession, \"network.error\", true);\n          \n          if (done === null) {\n              return;\n\n          } else if (done) {\n              /*\n               * Start a timeout. If the server doesn't answer to the recovery request,\n               * the recovery request is sent again.\n               */\n              this.createSent();\n\n          } else if (done === false) {\n              sessionLogger.logError(\"Unable to use available connections to connect to server\");\n              this.onErrorEvent(\"no_impl_available\",{closedOnServer: true,noImplAvailable: true});\n          }\n      },\n      \n      shutdown: function(justSleep) {\n        this._callSuperMethod(SessionHTTP,names['shutdown'],[justSleep]);\n        if (this.activeConnection) {\n          this.activeConnection._close();\n        }\n      },\n      \n      generateRequest: function(oldSession, reconnectionCause, askCL, sessionRecovery) {\n        var isCreate = this.phase == Session._OFF || this.phase == Session.SLEEP;\n        var _serverToUse = this.getPushServerAddress();\n        \n        var req = new Request(_serverToUse+Constants.LIGHTSTREAMER_PATH);\n        \n        req.setCookieFlag(this.policyBean.isCookieHandlingRequired());\n        req.setExtraHeaders(this.policyBean.extractHttpExtraHeaders(isCreate));\n        \n        var askDomain = !req.isCrossProtocol() && !req.isCrossSite();\n  \n        var pushCommand;\n        if (sessionRecovery) {\n            pushCommand = RequestsHelper.getRecoveryCommand(this.push_phase, this.sessionId, this.policyBean, reconnectionCause, this.slowing.getDelay(), askDomain, this.dataNotificationCount);\n        } else {            \n            pushCommand = RequestsHelper.getPushCommand(\n                    this.push_phase, this.sessionId, this.policyBean, this.connectionBean, \n                    isCreate, this.isPolling, oldSession, reconnectionCause, \n                    this.slowing.getDelay(), askCL, askDomain,\n                    this.serverBusy);\n        }\n        req.setData(pushCommand);\n        \n//        protocolLogger.logDebug(\"Connection request generated\",req);\n        \n        return req;\n      },\n      \n      /*private*/ executeConnection: function(oldSession,retryMethod,reconnectionCause,sessionRecovery) {\n        var isCreate = this.phase == Session._OFF || this.phase == Session.SLEEP;\n        var frameUseGet = !isCreate;\n        \n        var connRequest = this.generateRequest(oldSession,reconnectionCause,true,sessionRecovery);\n        var serverToUse = this.getPushServerAddress();\n        \n        this.controlHandler.assignWS(null); //just in case this is a switch\n        \n        if (this.chosenConnection && this.chosenConnection.constr == IEXSXHRConnection) {\n          this.chosenConnection = null;\n        }\n        \n        var connList = isCreate ? this.createList : this.connectionList;\n        if (this.chosenConnection) {\n          if (!connList.isGood(serverToUse,\n              this.chosenConnection.constr,\n              connRequest.isCrossSite(),\n              this.policyBean.isCookieHandlingRequired(),\n              connRequest.isCrossProtocol(),\n              this.policyBean.hasHttpExtraHeaders(isCreate))) {\n            connList._reset();\n            this.chosenConnection=null;\n          }\n        }\n        \n        var done = false; //true OK / false NEVER with this connection class / null TRYLATER\n        var targetName = (!this.isPolling ? \"LS6__PUSHFRAME\" : \"LS6__POLLFRAME\") + \"_\" + this.engineId;\n        /*\n         * The following loop tries a list of \"connections\" (i.e. transports) until\n         * one of them succeeds to open the session.\n         * \n         * \"done == false\" means that the chosenConnection was unable to open the session \n         * ==> loop again\n         * \n         * \"done == null\"  means that the chosenConnection is trying to open the session \n         * ==> exit from loop and retry after a while with the same connection (see Executor.addTimedTask below)\n         * \n         * \"done == true\" means that the chosenConnection was able to open the session\n         * ==> set activeConnection and exit from loop\n         * \n         */\n        while ((this.chosenConnection || connList.hasNext()) && done === false) {\n          \n          if (!this.chosenConnection) {\n            var classTU = connList.getNext(serverToUse,\n                connRequest.isCrossSite(),\n                this.policyBean.isCookieHandlingRequired(),\n                connRequest.isCrossProtocol(),\n                this.policyBean.hasHttpExtraHeaders(isCreate));\n            \n            if (!classTU) {\n              //no solutions, exit\n              connList._reset();\n              return false;\n            }\n            \n            this.chosenConnection = new classTU(targetName);\n          }\n          \n          //I can't understand why after a while the constructor of this.chosenConnection become [native code], so I had to put a constr element inside the instances\n          connRequest.setMethod(Request._POST);\n          if (sessionRecovery) {\n            connRequest.setFile(RequestsHelper.getRecoveryPath(this.chosenConnection.getEncoder().getExt()));\n          } else {\n            connRequest.setFile(RequestsHelper.getPushPath(isCreate,this.isPolling,this.chosenConnection.getEncoder().getExt()));\n          }\n\n          var pp = this.push_phase;\n          \n          done = this.chosenConnection.sessionLoad(connRequest,pp,this.cbOk,this.cbErr,this.cbEnd,this.engineId);\n          \n          if (done === null) {\n            //try later...\n            sessionLogger.logDebug(\"Connection currently unavailable, delaying connection\");\n            Executor.addTimedTask(retryMethod,50,this,[this.phaseCount,reconnectionCause,oldSession]);\n            return null;\n          } else if (done === false) {\n            this.chosenConnection = null;\n          } else { \n            //if (done === true)\n            sessionLogger.logDebug(\"Connection open to the server\");\n            connList._reset();\n            this.activeConnection = this.chosenConnection;\n          }\n          \n        }\n      \n        return done;\n      },\n      \n      \n      /*protected*/ bindSent: function() {\n        this._callSuperMethod(SessionHTTP,names['bindSent']);\n        if (this.needsHourglassTrick()) {\n          this.myGlass.prepare(this.activeConnection.constr);\n        }\n      },\n      \n      /*private*/ needsHourglassTrick: function() {\n        return !this.isPolling;\n      },\n      \n      /*protected*/ onErrorEvent: function(reason, args) {\n        args = args || {};\n        var closedOnServer = args.closedOnServer;\n        var fromWS = args.fromWS;\n        var unableToOpen = args.unableToOpen;\n        var noImplAvailable = args.noImplAvailable;\n        var possibleLoop = args.possibleLoop;\n        var tryRecovery = args.tryRecovery;\n        var serverBusyError = args.serverBusyError;\n        if (unableToOpen && (this.chosenConnection.constr == XSXHRConnection || this.chosenConnection.constr == IEXSXHRConnection) ) {\n          /* \n           * Check added to prevent the following scenario:\n           * - we are in polling when we got a connection error\n           * - we want to do a recovery\n           * - but connections of type CORS-XHR are disabled.\n           * \n           * Since CORS-XHR was receiving data before the error, we want to use it for the recovery.\n           */  \n          if (! tryRecovery) {\n              this.handler.onCorsError(this.handlerPhase);\n          }\n        }\n        this._callSuperMethod(SessionHTTP,names['onErrorEvent'],arguments);\n      },\n      \n      /*private*/ onEvent: function() {\n        if (this.phase == Session.FIRST_BINDING) {\n          resetMaybeOnline();\n        }\n        \n        if (this.needsHourglassTrick() && (this.phase == Session.BINDING || this.phase == Session.FIRST_BINDING)) {\n        //\"if needed\" check is inside, async is done inside)\n          this.myGlass.stopHourGlass(); \n        }\n        \n        this._callSuperMethod(SessionHTTP,names['onEvent']);\n      },\n      \n      /**@override*/\n      forwardDestroyRequestToTransport: function(sessionId, request, type, related, retryingOrHost, requestListener) {\n          this.controlHandler.addRequest(sessionId, request, type, related, retryingOrHost, requestListener);\n      }\n  };\n    \n  \n  Inheritance(SessionHTTP,Session);\n  export default SessionHTTP;\n  \n","import FrameConnection from \"../net/FrameConnection\";\nimport BrowserDetection from \"../../src-tool/BrowserDetection\";\nimport IFrameHandler from \"../../src-tool/IFrameHandler\";\nimport Executor from \"../../src-tool/Executor\";\n  \n  var hgFrameName = \"LS6__HOURGLASS\";\n  var stopDelay = 900;\n  \n  var Hourglass = function() {\n    this.needStopHourGlass = false;\n    this.hgFrame=null;\n  };\n\n  Hourglass.prototype = {\n    \n    /*public*/ prepare: function(streamingClass) {\n      this.needStopHourGlass = streamingClass === FrameConnection;\n      if (this.needStopHourGlass) {\n        this.hgFrame = IFrameHandler.getFrameWindow(hgFrameName,true);\n      }\n      \n    },\n  \n    /*public*/ stopHourGlass: function() {\n      Executor.addTimedTask(this.stopHourGlassExe, stopDelay, this);\n    },\n    \n    /*public*/ stopHourGlassExe: function() {\n      if (!this.needStopHourGlass) {\n        return;\n      }\n      \n      this.needStopHourGlass = false;\n      if (BrowserDetection.isProbablyAKhtml()) {\n        //SAFARI non soffre della clessidra. Inoltre la window.open porta in \n        //primo piano la pagina in streaming anche se l'uitente l'ha messa dietro\n        return;\n        \n        //IE will not pass from here\n        //Opera will not pass from here \n      }\n  \n      //20110526 -> IE9 on Win7, IE6 on XP   do not need the trick\n      //            IE7 on XP,   IE8 on XP   need the trick\n      if (BrowserDetection.isProbablyIE(6,true) || BrowserDetection.isProbablyIE(9,false)) {\n        return;\n      } \n      \n      /*\n      //this version does not work:\n      var stopHourGlass = new Image(); //var stopHourGlass = document.createElement(\"img\");\n      stopHourGlass.src = \"http://app.lightstreamer.com/PortfolioDemo/images/logo.gif\";\n      comms_buffer[\"SHG\"] = stopHourGlass;\n      */\n     \n      try {\n        \n        window.open(\"about:blank\",hgFrameName, null, true);\n                \n      } catch(exc) {\n        //happens on IE7 & IE8;\n        //actually happened 326 times on 333 total on the same IP from Houston...\n        //just ignore the exception as the only drawback is the hourglass that keeps spinning.\n      }\n\n    }\n  };\n \n  export default Hourglass;\n \n","\n/*\nORGANIZE FOR LAZY LOADING OF FALLBACK CLASSES? \n*/\n\n\nimport LoggerManager from \"../../src-log/LoggerManager\";\nimport XSXHRConnection from \"./XSXHRConnection\";\nimport IEXSXHRConnection from \"./IEXSXHRConnection\";\nimport XHRStreamingConnection from \"./XHRStreamingConnection\";\nimport XHRConnection from \"./XHRConnection\";\nimport FakeNotifyConnection from \"./FakeNotifyConnection\";\nimport WebSocketConnection from \"./WebSocketConnection\";\nimport Constants from \"../Constants\";\n\n    function retFalse() {\n      return false;\n    }  \n    var streamLogger = LoggerManager.getLoggerProxy(Constants.STREAM);\n    \n    var ConnectionSelector = function(connList,blockXDomainRequest,blockCORS) {\n      this.localList = connList;\n      this.blockXDomainRequest = blockXDomainRequest;\n      this.blockCORS = blockCORS;\n      this.point = -1;\n    };\n    \n    \n    ConnectionSelector.disableWS = function() {\n      WebSocketConnection.isAvailable = retFalse;\n    };\n    ConnectionSelector.disableXHRs = function() {\n      XSXHRConnection.isAvailable = retFalse;\n      IEXSXHRConnection.isAvailable = retFalse;\n      XHRStreamingConnection.isAvailable = retFalse;\n      XHRConnection.isAvailable = retFalse;\n    };\n    \n    ConnectionSelector.STREAMING_LIST = [];\n    var strList = [XSXHRConnection,IEXSXHRConnection,XHRStreamingConnection];\n    for (var i=0; i < strList.length; i++) {\n      if (strList[i].isStreamEnabled()) {\n        ConnectionSelector.STREAMING_LIST.push(strList[i]);\n      }\n    }\n    \n    ConnectionSelector.CONTROL_LIST = [XSXHRConnection,IEXSXHRConnection,XHRConnection];  \n    ConnectionSelector.POLL_LIST = [XSXHRConnection,IEXSXHRConnection,XHRConnection];\n    \n    ConnectionSelector.useRealCallbacks = function(_instance) {\n      //check if the class that we're going to use uses fake callbacks (i.e. inherits from FakeNotifyConnection) or not\n      //this is a bad trick, do not abuse it\n      return _instance.constr.prototype.notifySender != FakeNotifyConnection.prototype.notifySender;\n    };\n    \n    ConnectionSelector.isGood = function(serverToUse,toTest,isCrossSite,areCookiesRequired,isCrossProtocol,hasExtraHeaders,_list) {\n      if (streamLogger.isDebugLogEnabled()) {\n          streamLogger.logDebug(\"Verify connection class\", getClassName(toTest));\n      }\n      if (!toTest.isAvailable(serverToUse)) {\n        streamLogger.logDebug(\"This class is not available on the current environment\");\n        return false;\n      }\n      \n      if (isCrossSite && !toTest.isCrossSite()) {\n        streamLogger.logDebug(\"Cross-origin request is needed, this class is not able to make cross-origin requests\");\n        return false;\n      }\n      \n      if (areCookiesRequired && !toTest.areCookiesGuaranteed()) {\n        // WARNING!!! Cookie management also involves that requests on different transports\n        // share the same cookies, so we cannot state that cookies are managed by taking\n        // each transport separately;\n        // for now we assume that xmlhttprequest is the master case and that other transports\n        // support cookies only if we can share their cookies with those of xmlhttprequest\n        streamLogger.logDebug(\"Cookies on request are required, this class can't guarantee that cookies will be actually sent\");\n        return false;\n      }\n      \n      if (isCrossProtocol && !toTest.isCrossProtocol()) {\n        streamLogger.logDebug(\"Cross-protocol request is needed, this class is not able to make cross-protocol requests\");\n        return false;\n      }\n      \n      if (hasExtraHeaders && !toTest.canUseCustomHeaders()) {\n        streamLogger.logDebug(\"Extra headers are given, this class is not able to send requests containing extra headers\");\n        return false;\n      }\n      \n      if (_list && !inList(toTest,_list)) {\n        streamLogger.logDebug(\"This class can't be used in the current context\");\n        return false;\n      }\n\n      if (streamLogger.isDebugLogEnabled()) {\n          streamLogger.logDebug(\"Connection class is good\", getClassName(toTest));\n      }\n      \n      return true;\n\n    };\n    \n    function inList(toTest,_list) {\n      for (var i = 0; i < _list.length; i++) {\n        if (_list[i] == toTest) {\n          return true;\n        }\n      }\n      return false;\n    }\n    \n    ConnectionSelector.prototype = {\n        \n      /*public*/ hasNext: function() {\n        return this.point < this.localList.length-1;\n      },\n    \n      /*public*/ getNext: function(serverToUse,isCrossSite,areCookiesRequired,isCrossProtocol,hasExtraHeaders) {\n        if (streamLogger.isDebugLogEnabled()) {\n            streamLogger.logDebug(\"Searching for an appropriate connection class\",\n                    \"serverToUse\",serverToUse,\n                    \"isCrossSite\",isCrossSite,\n                    \"areCookiesRequired\",areCookiesRequired,\n                    \"isCrossProtocol\",isCrossProtocol,\n                    \"hasExtraHeaders\",hasExtraHeaders);\n        }\n        while (this.hasNext()) {\n          this.point++;\n          \n          var toTest = this.localList[this.point];\n          \n          if ((this.blockCORS || this.blockXDomainRequest) && toTest === IEXSXHRConnection) {\n            continue;\n          }\n          \n          if (this.blockCORS && toTest === XSXHRConnection) {\n            continue;\n          }\n          \n          if (!this.isGood(serverToUse,toTest,isCrossSite,areCookiesRequired,isCrossProtocol,hasExtraHeaders)) {\n            continue;\n          }\n          \n          return toTest;\n        }\n        \n        return null;\n\n      },\n      \n      /*public*/ isGood: function(serverToUse,toTest,isCrossSite,areCookiesRequired,isCrossProtocol,hasExtraHeaders) {\n        return ConnectionSelector.isGood(serverToUse,toTest,isCrossSite,areCookiesRequired,isCrossProtocol,hasExtraHeaders,this.localList);\n      },\n      \n      /*public*/ _reset: function() {\n        streamLogger.logDebug(\"Restart connection selector\");\n        this.point = -1;\n      }\n    };\n    \n    var nameFromToStringRegex = /^function\\s?([^\\s(]*)/;\n    \n    /**\n     * Returns the class name of a constructor function.\n     * <br>The name is set in *Connection class.\n     */\n    function getClassName(ctor) {\n        return ctor.name;\n    }\n    \n    export default ConnectionSelector;\n    \n  ","import ServerConnection from \"./ServerConnection\";\nimport XHRConnection from \"./XHRConnection\";\nimport Inheritance from \"../../src-tool/Inheritance\";\nimport EnvironmentStatus from \"../../src-tool/EnvironmentStatus\";\nimport Executor from \"../../src-tool/Executor\";\nimport BrowserDetection from \"../../src-tool/BrowserDetection\";\nimport StreamAsStringHandler from \"./StreamAsStringHandler\";\nimport Environment from \"../../src-tool/Environment\";\nimport LoggerManager from \"../../src-log/LoggerManager\";\nimport Constants from \"../Constants\";\n\n  var streamLogger = LoggerManager.getLoggerProxy(Constants.STREAM);\n  \n  var XHRStreamingConnection = function() {\n    this._callSuperConstructor(XHRStreamingConnection);\n   \n    this.parser = null;\n\n    this.constr = XHRStreamingConnection;\n  };\n  if (XHRStreamingConnection.name == null) {\n      XHRStreamingConnection.name = \"XHRStreamingConnection\";\n  }\n  \n  var xhrCanStream = null;\n  \n  ServerConnection.attachPublicStaticMethods(XHRStreamingConnection,{\n    isAvailable: function() {\n      if (xhrCanStream !== null) {\n        return xhrCanStream;\n      }\n      \n      if (!Environment.isBrowserDocument()) {\n        xhrCanStream = false;\n      } else if (BrowserDetection.isProbablyIE()) {\n     // on IE9 the test passes but the XHR streaming does not work, so we add a IE specific clausole\n        xhrCanStream = false; \n      } else if (typeof(XMLHttpRequest) != \"undefined\") {\n        xhrCanStream = typeof(new XMLHttpRequest().addEventListener) != \"undefined\";\n      } else {\n        xhrCanStream = false;\n      }\n      return xhrCanStream;\n    },\n    isStreamEnabled: function() {\n      return !BrowserDetection.isProbablyOldOpera();\n    },\n    isCrossSite: false,\n    isCrossProtocol: false,\n    areCookiesGuaranteed: true,\n    attachEngineId: false,\n    canUseCustomHeaders: true\n  });\n  \n  \n  XHRStreamingConnection.prototype = {\n    \n    /*public*/ toString: function() {\n      return [\"[\",\"XHRStreamingConnection\",this.isOpen,this.phase,this.sendPhase,\"]\"].join(\"|\");\n    },\n    \n    /*public*/ _load: function(request,phase,responseCallback,errorCallback,connectionEndCallback) {\n       var superCall = this._callSuperMethod(XHRStreamingConnection,this._loadName,[request,phase,responseCallback,errorCallback,connectionEndCallback]);\n       \n       streamLogger.logDebug(\"Streaming enabled on XHR\");\n       \n       if (superCall) {\n         this.parser = new StreamAsStringHandler();\n       }\n       return superCall;\n    },\n\n    /*private*/ onReadyStateChangeImpl: function(ph) {\n      if (EnvironmentStatus.isUnloaded() || ph != this.phase || !this.sender) { //must test unloaded because this method is called by XHR s thread\n        return;\n      }\n      \n      var newData = null;\n      if (this.isHttpStatusOk() && this.response) {\n        if (this.sender.readyState == 3) {\n          newData = this.parser.streamProgress(this.sender.responseText);\n          \n        } else if (this.sender.readyState == 4) {\n          newData = this.parser.streamComplete(this.sender.responseText);\n          \n        }\n        \n        if (streamLogger.isDebugLogEnabled()) {\n            streamLogger.logDebug(\"XHR transport receiving\",newData);\n        }\n        \n        if(newData!=null) {\n          Executor.executeTask(this.response,[newData, this.sendPhase]);\n        }\n        \n      }\n\n      if (this.sender.readyState == 4) {\n        if (!this.isHttpStatusOk() && this.response) {\n          Executor.executeTask(this.response,[null, this.sendPhase]);\n        }\n\n\n        if (streamLogger.isDebugLogEnabled()) {\n          streamLogger.logDebug(\"XHR transport receiving\");\n        }\n\n        if ((this.sender.readyState == 4 || newData == \"\") && this.connectionEndCallback) {\n          //this is a good end of a connection or a broken connection;\n          //let us check\n          Executor.addTimedTask(this.notifyEnd, 100, this, [this.sendPhase]);\n\n        }\n\n        this.off();\n        //request complete, remove references\n        this.cleanRef();\n      }\n      \n    }\n      \n  };\n  \n  Inheritance(XHRStreamingConnection, XHRConnection);\n  export default XHRStreamingConnection;\n\n","//see (the name there are obsolete, but the flow is quite the same):\n//https://docs.google.com/a/lightstreamer.com/drawings/d/1AUup89gqDhESi5j94gLsk7rS0T_FUSZ6hsbs1SCy_rM/edit?hl=en\n\nimport ServerConnection from \"./ServerConnection\";\nimport Inheritance from \"../../src-tool/Inheritance\";\nimport AjaxFrameHandler from \"./AjaxFrameHandler\";\nimport EnvironmentStatus from \"../../src-tool/EnvironmentStatus\";\nimport Executor from \"../../src-tool/Executor\";\nimport Environment from \"../../src-tool/Environment\";\nimport LoggerManager from \"../../src-log/LoggerManager\";\nimport Constants from \"../Constants\";\n\n  var streamLogger = LoggerManager.getLoggerProxy(Constants.STREAM);\n  var COMM_START = \"/\"+\"*\";\n  \n  var XHRConnection = function() {\n    this._callSuperConstructor(XHRConnection);\n    \n    this.sendPhase = null;\n    this.sender = null; //this will be the actual XHR \n    \n    this.cachedSenderStatus = null;\n    \n    this.response = null;\n    this.error = null;\n    \n    this.isOpen = false;\n    this.phase = 0;\n    \n    this[\"LS_x\"] = this.onErrorImpl;\n    this.myFrameHandler = null;\n    \n    this.constr = XHRConnection;\n  };\n  if (XHRConnection.name == null) {\n      XHRConnection.name = \"XHRConnection\";\n  }\n  \n  ServerConnection.attachPublicStaticMethods(XHRConnection,{\n    isAvailable: function() {\n      return Environment.isBrowserDocument() && (window.ActiveXObject || typeof XMLHttpRequest != \"undefined\");\n    },\n    isCrossSite: false,\n    isCrossProtocol: false,\n    areCookiesGuaranteed: true,\n    attachEngineId: false,\n    canUseCustomHeaders: true\n  });\n  \n  XHRConnection.prototype = {\n    \n    /*public*/ toString: function() {\n      return [\"[\",\"XHRConnection\",this.isOpen,this.phase,this.sendPhase,\"]\"].join(\"|\");\n    },\n    \n    /*public*/ _load: function(request,phase,responseCallback,errorCallback,connectionEndCallback) {\n      this.myFrameHandler = AjaxFrameHandler.getAjaxFrame(request.getPath()); \n      \n      if (this.myFrameHandler.isDisabled()) {\n        this.myFrameHandler.dismiss();\n        return false;\n      } else if (!this.myFrameHandler.isReady()) {\n        //wait please :)\n        return null;\n      } else if (this.isOpen) {\n        return null; //wait please :)\n      }\n      \n      this.myFrameHandler.touch();\n      \n      this.sendPhase = phase;\n      \n      this.cachedSenderStatus = null;\n      \n      this.response = responseCallback;\n      this.error = errorCallback;\n      this.connectionEndCallback = connectionEndCallback;\n      \n      this.phase++;\n      var that = this;\n      var ph = this.phase;\n      this[\"LS_h\"] = function() {\n        that.onReadyStateChangeImpl(ph);\n      };\n      \n      this.isOpen = true;\n      \n      if (streamLogger.isDebugLogEnabled()) {\n          streamLogger.logDebug(\"XHR transport sending\", request.getFile(), request.getData());\n      }\n      \n      return this.myFrameHandler.sendXHR(request.getUrl(),request.getData(),this,request.getExtraHeaders());\n      \n    },\n    \n    /*public*/ _close: function() {\n      if(!this.isOpen) {\n        return;\n      }\n      this.off();\n      \n      streamLogger.logDebug(\"Closing connection opened using XHR\");\n      \n      try {\n        if (this.sender && this.sender.abort) {\n          this.sender.abort();\n        }\n      }catch(_ee) {\n        //IE 8 may throw an exception while testing (just testing) the abort function, so we catch it  \n        streamLogger.logError(\"Error closing connection opened using XHR\",_ee);\n      }\n      this.cleanRef();\n    },\n    \n    /*\n     * on FX2 accessing the this.sender.status property of a request that failed due\n     * to a network issue (ie the server is down) throws an exception. (IE9 in the same situation says status 12029...)\n     * So it must be handled as a non-200 response (passing null to the responseCallback).\n     * \n     * Note that IE9 RC throws an exception if the readyState is 3 and we check the status property; The message of the exception is \"Unknown Error\",\n     * moreover if we try to access the responseText it says \"not ready\". In any case, at the moment XHRStreamingConnection is disabled on IE so that \n     * this problem should not arise.\n     */\n    /*private*/ isHttpStatusOk: function() {\n      try {\n        if (this.cachedSenderStatus === null) {\n          if (this.sender.readyState < 2) {\n            return false;\n          } \n          //we have to cache the value as on Chrome (seen on version 10) the status may change from 200 to 0 if the socket is closed... \n          this.cachedSenderStatus = this.sender.status >= 200 && this.sender.status <= 299;\n        } \n        return this.cachedSenderStatus;\n        \n      } catch (_e) {\n        streamLogger.logDebug(\"Error reading XHR status\",_e);\n        return false;\n      }\n    },\n    \n    /*private*/ onReadyStateChangeImpl: function(ph) {\n      if (EnvironmentStatus.isUnloaded() || ph != this.phase || !this.sender) { //must test unloaded because this method is called by XHR s thread\n        return;\n      }\n\n      //should return true when the response is complete, false otherwise\n    //not sure if \"complete\" is really needed (IE6 returns 4 as the other browsers)\n      if (this.sender.readyState == 4 || this.sender.readyState == \"complete\") { \n        var _data = null;\n        if (this.isHttpStatusOk()) {\n          _data = this.sender.responseText;\n          _data = _data.toString();\n          if (_data.substring(0, 2) == COMM_START) { \n            _data = _data.substring(2, _data.length - 2);\n          }\n        } \n        \n        if (streamLogger.isDebugLogEnabled()) {\n          streamLogger.logDebug(\"XHR transport receiving\",_data);\n        }\n\n\n        if (this.response) {\n          Executor.executeTask(this.response,[_data, this.sendPhase]);\n        }\n\n        Executor.addTimedTask(this.notifyEnd, 100, this, [this.sendPhase]);\n\n        this.off();\n        //request complete, remove references\n        this.cleanRef();\n      }\n    },\n\n    /*private*/ notifyEnd: function(ph) {\n      Executor.executeTask(this.connectionEndCallback, [ph]);\n    },\n    \n    /*private*/ onErrorImpl: function(e) {\n      if (EnvironmentStatus.isUnloaded()) { //must test unloaded because this method is called by XHR s thread\n        return;\n      }\n      \n      //when it happens XHR is disabled, there is no need to check phase and so on\n      //http://www.w3.org/TR/XMLHttpRequest/#exceptions\n      //Note that only SECURITY_ERR is possible as we make asynchronous XHR requests\n      this.myFrameHandler.disable();\n      \n      streamLogger.logDebug(\"Error on connection opened using XHR\");\n      \n      this.off();\n      if (this.error) {\n        Executor.executeTask(this.error,[\"xhr.unknown\",this.sendPhase,false,false,false]);\n      }\n      this.cleanRef();\n    },\n    \n    /*private*/ cleanRef: function() {\n       //try to remove circular reference (btw since such circle is wrapped \n        //it should not cause IE's leak even if left where it is)\n        try {\n          delete this.sender.onreadystatechange;\n        } catch(_e) {\n          //Firefox 3.5 sometimes passes from here\n          streamLogger.logDebug(\"Error on disposing XHR's callback\",_e);\n        }\n        try {\n          delete this.sender;\n        } catch(_e) {\n          streamLogger.logDebug(\"Error on disposing XHR\",_e);\n        }\n        \n        this.error = null;\n        this.response = null;\n        \n        if (this.myFrameHandler) {\n          this.myFrameHandler.dismiss();\n        }\n    },\n    \n    /*private*/ off: function() {\n      this.isOpen = false;\n      this.phase++;\n    }\n  };\n  \n  Inheritance(XHRConnection, ServerConnection);\n  export default XHRConnection;\n  \n","import LoggerManager from \"../../src-log/LoggerManager\";\nimport FrameConnection from \"./FrameConnection\";\nimport Request from \"./Request\";\nimport Utils from \"../Utils\";\nimport Executor from \"../../src-tool/Executor\";\nimport EnvironmentStatus from \"../../src-tool/EnvironmentStatus\";\nimport IFrameHandler from \"../../src-tool/IFrameHandler\";\nimport Global from \"../Global\";\nimport Environment from \"../../src-tool/Environment\";\nimport Inheritance from \"../../src-tool/Inheritance\";\nimport Dismissable from \"../../src-tool/Dismissable\";\nimport Constants from \"../Constants\";\nimport Helpers from \"../../src-tool/Helpers\";\n\n  //possible statuses\n  var DISABLED = -1; //we will never use XHR\n  var LOADING_FRAME = 0; //downloading the ajax_frame.html\n  var READY = 1; //can use XHR right now\n  var NO_INIT = 2; //ajax_frame.html not yet loaded (ie requested by someone)\n  var LOADING_AGAIN = 3; //download possibly failed, trying again\n  var GIVE_UP = 4; //\n  \n  var streamLogger = LoggerManager.getLoggerProxy(Constants.STREAM);\n  \n  \n  /**\n   * this timeout does not block the current download, but let the sendXHR return false instead of returning true\n   * this MUST be < than the connection timeout, otherwise:\n   *   if the ajax frame is not on the server we will never connect\n   *   also if the roundtrip is > than 4 seconds we will never try a connection in html;\n   *      (actually if the roundtrip is > 4 seconds we will never wait enough for a server request to return, by the way...) \n   */\n  var giveUpTimeout = 2000;\n  var ajaxFrameTimeout = 10000;  // milliseconds\n  \n  var nextAFrame = 0;\n  \n  var createdFrames = {};\n  \n  var AjaxFrameHandler = function(path) {\n    this.path = path;\n    \n    this.ajaxTimeoutPhase = Helpers.randomG(); \n    this.status = Environment.isBrowserDocument() && (window.ActiveXObject || typeof(XMLHttpRequest) != \"undefined\") ? NO_INIT  : DISABLED;\n    \n    this.aframeId = ++nextAFrame;\n    this.frameName = \"LS_AJAXFRAME_\" + this.aframeId;\n    \n    this.initTouches();\n    \n    this.attachToGlobal();\n  };\n  \n  AjaxFrameHandler.getAjaxFrame = function(serverAndServerUrlPath) {\n    if (!createdFrames[serverAndServerUrlPath]){\n      createdFrames[serverAndServerUrlPath] = new AjaxFrameHandler(serverAndServerUrlPath);\n      createdFrames[serverAndServerUrlPath]._load(false);\n    }\n    return createdFrames[serverAndServerUrlPath];\n  };\n  \n  function cleanStaticRef(serverAndServerUrlPath) {\n    if (createdFrames[serverAndServerUrlPath]){\n      delete (createdFrames[serverAndServerUrlPath]);\n    }\n  }\n  \n\n  AjaxFrameHandler.prototype = {\n      \n    /*public*/ toString: function() {\n      return [\"[\",\"AjaxFrameHandler\",this.status,\"]\"].join(\"|\");\n    },\n    \n    /*private*/ attachToGlobal: function() {\n      //exports the LS_a method\n      var that = this;\n      Global.exportGlobal(this.aframeId,\"LS_a\",function(phase) {\n        that.onAjaxFrameReady(phase);\n      },\"A\");\n    },\n    \n    /*private*/ clean: function(ph) {\n      this.status = DISABLED;\n      Global.cleanGlobal(this.aframeId,\"LS_a\",\"A\");\n      cleanStaticRef(this.path);\n      IFrameHandler.disposeFrame(this.frameName);\n    },\n    \n    /*private*/ init: function(retrying) {\n      this.ajaxTimeoutPhase++; \n      this.status = retrying ? LOADING_AGAIN : LOADING_FRAME;\n    },\n    \n    /*public*/ _load: function(retrying) {\n      if (this.status == DISABLED) { //cannot use this.isDisabled() here as LOADING_AGAIN (and GIVE_UP) is a good status for _load to be called\n        return;\n      }\n      \n      streamLogger.logDebug(\"Loading XHR frame to perform non-cross-origin requests\");\n          \n      if (this.isReady()) {\n        //we already have this server's ajax frame \n        return;\n        \n      } else {\n        this.init(retrying); //incs phases\n        var localTimeoutPhase = this.ajaxTimeoutPhase;\n        \n        if (Utils.isOffline()) {\n          //should be useless, if we're offline the createSession is continuosly checking if we have returned online; as soon as we are \n          //(online) a new _load will be called by the SessionHandler \n          streamLogger.logDebug(\"Client is offline, will retry later to load XHR frame\");\n                    \n          /*Executor.addTimedTask(this.asyncLoad,ajaxFrameTimeout,this,[localTimeoutPhase]);\n          return;*/\n        }\n        \n        var _command = \"id=\"+this.aframeId+\"&\";\n        if (!Utils.hasDefaultDomain()) {\n          _command += \"domain=\"+ Utils.getDomain() +\"&\";\n        }\n        \n        var ajReq = new Request(this.path,\"xhr.html\",_command);\n        \n        var frameLoader = new FrameConnection(this.frameName);\n\n        frameLoader._load(ajReq);\n        \n        //give some seconds to the ajax frame to be loaded\n        Executor.addTimedTask(this.frameTimeout,ajaxFrameTimeout,this,[localTimeoutPhase]);\n        Executor.addTimedTask(this.giveUp,giveUpTimeout,this,[localTimeoutPhase]);\n        \n      }\n      \n    },\n    \n    /*internal*/ onAjaxFrameReady: function() {\n      if (EnvironmentStatus.isUnloaded()) { //must check the unloaded because is called by the ajaxFrame thread\n        return;\n      }\n\n      if (this.status != READY) {\n\n        streamLogger.logDebug(\"XHR frame loaded\");\n        //the ajax frame spent some time to be downloaded,\n        //but now it's here and we can start using it again\n        this.status = READY;\n      }\n    },\n    \n    /*private*/ frameTimeout: function(localTimeoutPhase) {\n      if (this.status == DISABLED) {\n        return;\n      }\n      if (this.ajaxTimeoutPhase == localTimeoutPhase && !this.isReady()) {\n        streamLogger.logDebug(\"XHR frame loading timeout expired, try to reload\");\n        //the ajax frame didn't arrive, next attempt will return false\n        //in the meanwhile we try reloading it\n        \n        this._load(true);\n      }\n    },\n    \n    /*private*/ giveUp: function(localTimeoutPhase) {\n      if (this.status == DISABLED) {\n        return;\n      }\n\n      if (this.ajaxTimeoutPhase == localTimeoutPhase && !this.isReady()) {\n        streamLogger.logDebug(\"XHR frame loading timeout expired again, will not try again\");\n        //next attempt will return false\n        this.status = GIVE_UP;\n      }\n    },\n    \n    /*internal*/ disable: function() {\n      this.status = DISABLED;\n      this.ajaxTimeoutPhase++;\n    },\n    \n    /*public*/ isReady: function() {\n       return this.status === READY;\n    },\n    \n    /*public*/ isDisabled: function() {\n      return this.status === DISABLED || this.status === LOADING_AGAIN || this.status === GIVE_UP;\n    },\n    \n    /**\n     * @return {boolean} one of the following: \n     * null means \"please wait\", \n     * false means \"no way\", \n     * true means \"sent\"\n     */\n    /*public*/ sendXHR: function(_url,_data,senderObject,extraHeaders) {\n      if (this.isDisabled()) {\n        return false;\n      } else if(this.status !== READY) {\n        return null; //try later please\n      }\n        \n      streamLogger.logDebug(\"Passing request to the XHR frame\",_url);\n      \n      var done;\n      try {\n        done = IFrameHandler.getFrameWindow(this.frameName)[\"sendRequest\"](_url, _data, senderObject,extraHeaders) !== false;\n        \n      } catch(_e) {\n        //we don't know what's happened, what should we do?\n        done = false;\n        streamLogger.logDebug(\"Error passing request to the XHR frame\",_e);\n      }\n  \n      if (done === false) {\n        //if we received a false we completely disable the use of XHR\n        this.disable();\n      } \n      \n      return done;\n    }\n  \n  };\n  \n  Inheritance(AjaxFrameHandler,Dismissable,true,true);\n  export default AjaxFrameHandler;\n  \n","import ServerConnection from \"./ServerConnection\";\nimport FakeNotifyConnection from \"./FakeNotifyConnection\";\nimport Request from \"./Request\";\nimport Inheritance from \"../../src-tool/Inheritance\";\nimport IFrameHandler from \"../../src-tool/IFrameHandler\";\nimport Executor from \"../../src-tool/Executor\";\nimport EnvironmentStatus from \"../../src-tool/EnvironmentStatus\";\nimport Environment from \"../../src-tool/Environment\";\nimport FormConnection from \"./FormConnection\";\nimport LoggerManager from \"../../src-log/LoggerManager\";\nimport LegacyEncoder from \"../encoders/LegacyEncoder\";\nimport Constants from \"../Constants\";\nimport Utils from \"../Utils\";\n  \n  var LEGACY_ENCODER = new LegacyEncoder();\n\n  var streamLogger = LoggerManager.getLoggerProxy(Constants.STREAM);\n  \n  var FrameConnection = function(target) {\n    this._callSuperConstructor(FrameConnection); \n    this.target = Utils.sanitizeIFrameName(target);\n    this.callPhase = 0;\n    this.isOpen = false;\n    this.formConnection = null;\n    \n    this._frame = IFrameHandler.getFrameWindow(this.target,true);\n    \n    this.constr = FrameConnection;\n  };\n  \n  /*\n  on IE10\n    if page is https and server is https, on two different hosts but with the same domain set, this connection will unexpectedly fail.\n    Lucky enough such combination does not lead to this connection unless the transport is forced to HTTP-STREAMING.  \n  */\n  \n  ServerConnection.attachPublicStaticMethods(FrameConnection,{\n    isAvailable: function() {\n      return Environment.isBrowserDocument();\n    },\n    isCrossSite: false,\n    isCrossProtocol: false,\n    areCookiesGuaranteed: true,\n    attachEngineId: true,\n    isStreamEnabled: true,\n    canUseCustomHeaders: false\n  });\n  \n  FrameConnection.prototype = {\n    \n    /*public*/ toString: function() {\n      return [\"[\",\"FrameConnection\",this.isOpen,this.target,this.callPhase,this.formConnection,\"]\"].join(\"|\");\n    }, \n  \n    /*private*/ _closeImpl: function(ph) {\n      if (ph != this.callPhase) {\n        return;\n      }\n      this.callPhase++;\n      if (this.isOpen) {\n        this._loadImpl(this.callPhase,Request.aboutBlank);\n        this.isOpen = false;\n      }\n    },\n    \n    /*public*/ _close: function() {\n      streamLogger.logDebug(\"Closing connection opened using replace on forever-frame\");\n      var ph = ++this.callPhase;\n      Executor.addTimedTask(this._closeImpl,0,this,[ph]);\n    },\n     \n    /*private*/ _loadImpl: function(ph,request,phase,responseCallback,errorCallback) {\n      if (ph != this.callPhase || EnvironmentStatus.isUnloading()) {\n        return;\n      }\n      this._callSuperMethod(FrameConnection,this._loadName,[request,phase,responseCallback,errorCallback]);\n  \n      this.callPhase++;\n      \n      if (streamLogger.isDebugLogEnabled()) {\n          streamLogger.logDebug(\"Replace on forever-frame transport sending\", request.getFile(), request.getData());\n      }\n      \n      try {\n        //we could cache this reference but it seems more secure this way\n        var frameRef = IFrameHandler.getFrameWindow(this.target);\n        if (frameRef == null) {\n            streamLogger.logError(\"Replace on forever-frame not available\");\n            return false;\n        }\n        \n        /*Simulates an error only saw on Dario's IE\n        if (request.getUrl().indexOf(\"ajax_frame\") == -1) {\n          throw \"Damned IE\";\n        }\n        */\n        \n        var _url = request.getUrlWithParams();\n      \n        frameRef.location.replace(_url);\n        this.isOpen = true;\n        \n      } catch(_e) {\n        //what could I do? \n        streamLogger.logError(\"Error while sending request using  replace on forever-frame\",_e);\n        return false;\n      }\n      \n      return true;\n      \n    },\n    \n    /*private*/ loadByForm: function(request,phase,responseCallback,errorCallback) {\n      if (!this.formConnection) {\n        this.formConnection = new FormConnection(this.target);\n      }\n      this.callPhase++;\n      var res = this.formConnection._load(request,phase,responseCallback,errorCallback);\n      if (res) {\n        this.isOpen = true;\n      }\n      return res;\n    },\n    \n    /*public*/ _load: function(request,phase,responseCallback,errorCallback,connectionEndCallback) {\n      if (request.method == Request._POST) {\n        //we can't handle POST requests, so fall back to a FormConnection\n        return this.loadByForm(request,phase,responseCallback,errorCallback);\n      }\n      var ph = ++this.callPhase;\n      Executor.addTimedTask(this._loadImpl,0,this,[ph,request,phase,responseCallback,errorCallback]);\n      return true;\n    },\n    \n    /*public*/ getEncoder: function() {\n      return LEGACY_ENCODER;\n    }\n    \n  };\n  \n  Inheritance(FrameConnection, FakeNotifyConnection);\n  export default FrameConnection;\n  \n","import ServerConnection from \"./ServerConnection\";\nimport FakeNotifyConnection from \"./FakeNotifyConnection\";\nimport Inheritance from \"../../src-tool/Inheritance\";\nimport IFrameHandler from \"../../src-tool/IFrameHandler\";\nimport Executor from \"../../src-tool/Executor\";\nimport Environment from \"../../src-tool/Environment\";\nimport LoggerManager from \"../../src-log/LoggerManager\";\nimport LegacyEncoder from \"../encoders/LegacyEncoder\";\nimport Constants from \"../Constants\";\nimport Utils from \"../Utils\";\n  \n  var LEGACY_ENCODER = new LegacyEncoder();\n  \n  var streamLogger = LoggerManager.getLoggerProxy(Constants.STREAM);\n  \n  var formLifeSpan = 1000;\n  \n  var FormConnection = function(_target) {\n    this._callSuperConstructor(FormConnection); \n    if (_target) {\n      this.target = Utils.sanitizeIFrameName(_target);\n      IFrameHandler.getFrameWindow(_target,true); \n    }\n    \n    this.isOpen = false;\n    this.constr = FormConnection;\n    this.loadPhase = 0;\n  };\n  \n  ServerConnection.attachPublicStaticMethods(FormConnection,{\n    isAvailable: function() {\n      return Environment.isBrowserDocument();\n    },\n    isCrossSite: true, //is not actually cross site, btw as we ignore its responses we can say that isCrossSite \n    isCrossProtocol: true, //is not actually cross site, btw as we ignore its responses we can say that isCrossSite\n    areCookiesGuaranteed: true,\n    attachEngineId: true,\n    canUseCustomHeaders: false\n  });\n  \n  FormConnection.prototype = {\n    \n    /*public*/ toString: function() {\n      return [\"[\",\"FormConnection\",this.target,\"]\"].join(\"|\");\n    },\n    \n    /*public*/ _close: function() {\n      streamLogger.logDebug(\"Closing connection opened using html form; actually doing nothing\");\n      this.isOpen = false;\n      this.loadPhase++;\n    },\n\n    /*public*/ _load: function(request,phase,responseCallback,errorCallback,connectionEndCallback) {\n      if (this.isOpen) {\n        return null; //please wait\n      }\n      this._callSuperMethod(FormConnection,this._loadName,[request,phase,responseCallback,errorCallback]);\n      \n      try {\n        this.loadPhase++;\n        var formToUse = this.generateForm();\n        if (!formToUse) {\n          return false;\n        }\n        \n        if (streamLogger.isDebugLogEnabled()) {\n            streamLogger.logDebug(\"Html form transport sending\", request.getFile(), request.getData());\n        }\n        \n        formToUse.formEl.method = request.getMethod();\n        formToUse.formEl.target = this.target;\n        formToUse.formEl.action = request.getUrl();\n        \n        formToUse.queryString.value = request.getData();\n        formToUse.formEl.submit();\n        \n        var ph = this.loadPhase;\n        Executor.addTimedTask(this.deleteForm,formLifeSpan,this,[formToUse.formEl,ph]);\n        \n        this.isOpen = true;\n        \n      } catch(_e) {\n        streamLogger.logError(\"Error while sending request using html form\",_e);\n        return false;\n      }\n\n      return true;\n    },\n    \n    /*private*/ generateForm: function() {\n      var _body = document.getElementsByTagName(\"BODY\")[0];\n      if (!_body) {\n        return null;\n      }\n      \n      var formObj = {};\n      formObj.formEl = document.createElement(\"FORM\");\n      try {\n        formObj.formEl.acceptCharset=\"utf-8\";\n      } catch(_e) {\n        //just in case\n      }\n      formObj.formEl.style.display = \"none\";\n      \n      formObj.queryString = document.createElement(\"INPUT\");\n      formObj.queryString.type = \"hidden\";\n      formObj.queryString.name=\"LS_querystring\";\n      \n      formObj.formEl.appendChild(formObj.queryString);\n      \n      _body.appendChild(formObj.formEl);\n      \n      return formObj;\n \n      \n      /*\n      <form method=\"post\" name=\"LS_form\" id=\"LS_form\" target=\"LS_CONTROLFRAME\">\n        <input type=\"hidden\" name=\"LS_querystring\" id=\"LS_querystring\" value=\"\">\n      </form>\n      */\n    },\n    \n    /*private*/ deleteForm: function(_el,ph) {\n      _el.parentNode.removeChild(_el);\n      if (ph == this.loadPhase) {\n        this.isOpen = false;\n      }\n    },\n    \n    /*public*/ getEncoder: function() {\n      return LEGACY_ENCODER;\n    }\n  };\n  \n  \n  \n  Inheritance(FormConnection, FakeNotifyConnection);\n  export default FormConnection;\n\n","//Encoder used by FormConnection and FrameConnection (note that FrameConnection is not used for control requests)\n\nimport QueryStringEncoder from \"./QueryStringEncoder\";\nimport Inheritance from \"../../src-tool/Inheritance\";\n  \n  var LegacyEncoder = function() {\n    \n  };\n  \n  LegacyEncoder.prototype = {\n      toString: function() {\n        return \"[LegacyEncoder]\";\n      },\n      \n      getExt: function() {\n        return \".html\";\n      },\n\n      wrapUp: function(requestData) {\n      //in this case the LS_querystring is added by the form itself so we skip the wrap up here.\n        return requestData;\n      }\n  };\n  \n  Inheritance(LegacyEncoder,QueryStringEncoder);\n  export default LegacyEncoder;\n  \n\n","//Encoder used by FormConnection and FrameConnection (note that FrameConnection is not used for control requests)\n\nimport HTTPEncoder from \"./HTTPEncoder\";\nimport Inheritance from \"../../src-tool/Inheritance\";\n  \n  var QUERY_STRING = \"LS_querystring=\";\n  \n  var QueryStringEncoder = function() {\n    \n  };\n  \n  QueryStringEncoder.prototype = {\n\n      /*public*/ getFixedOverhead: function(fileName) {\n        return QUERY_STRING.length;\n      },\n      \n      /*public*/ getInvisibleOverhead: function(requestData) {\n        if (requestData) {\n          //to use the query string the entire requestData needs to be re-encoded again\n          //when the full request is complete\n          return encodeURIComponent(requestData).length - requestData.length;\n        } else {\n          return 0;\n        }\n      },\n      \n      wrapUp: function(requestData) {\n        return QUERY_STRING+encodeURIComponent(requestData);\n      }\n  };\n  \n  Inheritance(QueryStringEncoder,HTTPEncoder);\n  export default QueryStringEncoder;\n  \n\n","import ServerConnection from \"./ServerConnection\";\nimport Inheritance from \"../../src-tool/Inheritance\";\nimport Executor from \"../../src-tool/Executor\";\n  \n  var FakeNotifyConnection = function() {\n    this._callSuperConstructor(FakeNotifyConnection);\n  };\n  \n  //this is an abstract class\n  ServerConnection.attachPublicStaticMethods(FakeNotifyConnection,{\n    isAvailable: false,\n    isCrossSite: false,\n    isCrossProtocol: false,\n    areCookiesGuaranteed: false,\n    attachEngineId: false,\n    canUseCustomHeaders: false\n  });\n  \n  FakeNotifyConnection.prototype = {\n    \n    _load: function(request,phase,responseCallback,errorCallback,connectionEndCallback) {\n      if (responseCallback) {\n        Executor.addTimedTask(this.notifySender,1000,this,[responseCallback,phase]);\n     }\n      return true;\n    },\n    \n    notifySender: function(responseCallback,phase) {\n      //we don't have responses from the form requests (but we could...)\n      //so we wait a moment and then send an empty response\n      \n      Executor.executeTask(responseCallback,[\"\",phase]);\n      \n      \n      //we could notify the handler now, in any case there is a traffic light on the formhandler\n      //that will avoid \"too-close\" requests (the problem here is to not saturate the connection pool\n    }\n    \n  };\n  \n  \n  Inheritance(FakeNotifyConnection, ServerConnection);\n  \n  export default FakeNotifyConnection;\n  \n","import ServerConnection from \"./ServerConnection\";\nimport Inheritance from \"../../src-tool/Inheritance\";\nimport Executor from \"../../src-tool/Executor\";\nimport EnvironmentStatus from \"../../src-tool/EnvironmentStatus\";\nimport StreamAsStringHandler from \"./StreamAsStringHandler\";\nimport LoggerManager from \"../../src-log/LoggerManager\";\nimport Constants from \"../Constants\";\n  \n  // var LICENSE_ERR = \"LS_window.alert('License not valid for this Client version');\";\n    // no longer possible with the required Server versions (>= 6.2)\n    // the related code has now been removed (without even knowing what it was for)\n  \n  var streamLogger = LoggerManager.getLoggerProxy(Constants.STREAM);\n  \n  var IEXSXHRConnection = function() {\n     this._callSuperConstructor(IEXSXHRConnection);\n     this.isOpen=false;\n     \n     this.sendPhase=null;\n     this.parser=null;\n     this.xDomainReqInstance=null;\n     \n     this.progresses = 0;\n     \n     this.constr = IEXSXHRConnection;\n  };\n  if (IEXSXHRConnection.name == null) {\n      IEXSXHRConnection.name = \"IEXSXHRConnection\";\n  }\n  \n  var canStream = null;\n  \n  ServerConnection.attachPublicStaticMethods(IEXSXHRConnection,{\n    isAvailable: function() {\n      if (canStream !== null) {\n        return canStream;\n      }\n      \n      if (typeof(XDomainRequest) != \"undefined\") {\n        canStream = true;\n      } else {\n        canStream = false;\n      }\n      \n      return canStream;  \n    },\n    isStreamEnabled: true,\n    isCrossSite: true,\n    isCrossProtocol: false,\n    areCookiesGuaranteed: false,\n    attachEngineId: false,\n    canUseCustomHeaders: false\n  });  \n  \n  function getCallback(cb) {\n    return function() {\n      Executor.executeTask(cb);\n    };\n  }\n  \n  IEXSXHRConnection.prototype = {\n    \n    /*public*/ toString: function() {\n      return [\"[\",\"IEXSXHRConnection\",this.isOpen,this.sendPhase,\"]\"].join(\"|\");\n    },\n    \n    /*public*/ _close: function() {\n      if (!this.isOpen) {\n        return;\n      }\n      \n      streamLogger.logDebug(\"Closing connection opened using IEXSXHR\");\n      \n      //\"disable callbacks\"\n      this.sendPhase = null;\n      \n      if (this.xDomainReqInstance) {\n        try {\n          this.xDomainReqInstance.abort();\n          \n        } catch (e) {\n          streamLogger.logDebug(\"Error non closing connection opened using IEXSXHR\");\n        }\n      }\n      \n      this.off();\n      \n      return;\n    },\n    \n    /*public*/ _load: function(request,phase,responseCallback,errorCallback,connectionEndCallback) {\n      if (this.isOpen) {\n        return null; //wait please :)\n      }\n      \n      this.progresses = 0;\n      \n      this.xDomainReqInstance = new XDomainRequest();\n      this.parser = new StreamAsStringHandler();\n          \n          \n      var loadCB = Executor.packTask(this.respCompleteEvent,this,[phase,responseCallback,connectionEndCallback]);  \n      var errorCB = Executor.packTask(this.asyncError,this,[phase,errorCallback,\"xdr.err\"]);  \n      var timeoutCB = Executor.packTask(this.asyncError,this,[phase,errorCallback,\"xdr.timeout\"]);  \n      var progressCB = Executor.packTask(this.progressEvent,this,[phase,responseCallback,false]);  \n        \n\n      this.xDomainReqInstance.onload = getCallback(loadCB);\n      this.xDomainReqInstance.onerror = getCallback(errorCB);\n      this.xDomainReqInstance.ontimeout = getCallback(timeoutCB);\n      this.xDomainReqInstance.onprogress = getCallback(progressCB);\n      \n      this.sendPhase = phase;\n      \n      if (streamLogger.isDebugLogEnabled()) {\n          streamLogger.logDebug(\"IEXSXHR transport sending\", request.getFile(), request.getData());\n      }\n      \n      try {\n      \n        this.xDomainReqInstance.open(request.getMethod(), request.getUrl());\n        this.xDomainReqInstance.send(request.getData());\n        \n        this.isOpen = true;\n       \n        \n      } catch(_e) {\n        streamLogger.logError(\"Error opening connection using IEXSXHR\",_e);\n        return false;\n      }\n      \n      return true;\n    },\n    \n    /*private*/ asyncError: function(phase,errorCallback,mex) {\n      if (this.sendPhase != phase || EnvironmentStatus.isUnloaded()) {\n        return;\n      }\n      \n      streamLogger.logDebug(\"Error on connection opened using IEXSXHR\");\n      \n      Executor.executeTask(errorCallback,[mex,phase,false,this.progresses==0,false]);\n    },\n    \n    /*private*/ progressEvent: function(phase,responseCallback,completed) {\n      if (this.sendPhase != phase || EnvironmentStatus.isUnloaded()) {\n        return;\n      }\n      \n      this.progresses++;\n      \n      if (responseCallback) {\n        var newData;\n        if (!completed) {\n          newData = this.parser.streamProgress(String(this.xDomainReqInstance.responseText));\n        } else {\n          newData = this.parser.streamComplete(String(this.xDomainReqInstance.responseText));\n        }\n        \n        if (streamLogger.isDebugLogEnabled()) {\n            streamLogger.logDebug(\"IEXSXHR transport receiving\", newData);\n        }\n        \n        if(newData!=null) {\n          Executor.executeTask(responseCallback,[newData,this.sendPhase]);\n        }\n      }       \n    },\n    \n    /*private*/ respCompleteEvent: function(phase,responseCallback,connectionEndCallback) {\n      if (this.sendPhase != phase || EnvironmentStatus.isUnloaded()) {\n        return;\n      }\n      \n      this.progressEvent(phase,responseCallback,true);\n      \n      this.off();\n      \n      streamLogger.logDebug(\"Connection opened using IEXSXHR completed\");\n      \n      if (connectionEndCallback) {\n        //this is a good end of a connection or a broken connection;\n        //let us check\n        Executor.addTimedTask(this.notifyEnd, 100, this, [connectionEndCallback,phase]);\n      }\n      \n    },\n    \n    /*private*/ notifyEnd: function(connectionEndCallback,ph) {\n      Executor.executeTask(connectionEndCallback, [ph]);\n    },\n    \n    \n    /*private*/ off: function() {\n      this.isOpen = false;\n      this.sendPhase = null;\n      this.parser = null;\n      this.progresses = 0;\n      \n      if (this.xDomainReqInstance) {\n        this.xDomainReqInstance.onload = null;\n        this.xDomainReqInstance.onerror = null;\n        this.xDomainReqInstance.ontimeout = null;\n        this.xDomainReqInstance.onprogress = null;\n        this.xDomainReqInstance = null;\n      }\n    }\n  };\n  \n  \n  Inheritance(IEXSXHRConnection, ServerConnection);\n  export default IEXSXHRConnection;\n\n ","\n  \n  var StreamAsStringHandler = function(){\n    this.progress=0;\n  };\n  \n  StreamAsStringHandler.prototype = {\n    \n    /*private*/ extractNewData: function(_stream,isComplete) {\n      \n      var endIndex = -1;\n      if (isComplete) {\n        endIndex = _stream.length;\n      } else {\n        endIndex = _stream.lastIndexOf(\"\\r\\n\");\n        if (endIndex < 0) {\n          return null;\n        } else {\n          endIndex += 2;\n        }\n      }\n      \n      var newData = _stream.substring(this.progress, endIndex);\n      \n      this.progress = endIndex;\n      \n      return newData;\n      \n    }, \n    \n    /*public*/ streamProgress: function(_stream) {\n      return this.extractNewData(_stream,false);\n    },\n    \n    /*public*/ streamComplete: function(_stream) {\n      return this.extractNewData(_stream,true);\n    }\n    \n  };\n  \n  export default StreamAsStringHandler;\n  \n","import EnvironmentStatus from \"../../src-tool/EnvironmentStatus\";\nimport Helpers from \"../../src-tool/Helpers\";\nimport LoggerManager from \"../../src-log/LoggerManager\";\nimport Executor from \"../../src-tool/Executor\";\nimport MadTester from \"./MadTester\";\nimport Constants from \"../Constants\";\nimport ForceRebindTutor from \"../control/ForceRebindTutor\";\nimport ControlRequest from \"../control/ControlRequest\";\nimport RequestsHelper from \"./RequestsHelper\";\nimport ASSERT from \"../../src-test/ASSERT\";\nimport BrowserDetection from \"../../src-tool/BrowserDetection\";\nimport WebSocketConnection from \"../net/WebSocketConnection\";\nimport Assertions from \"../utils/Assertions\";\nimport RecoveryBean from \"./RecoveryBean\";\nimport RetryDelayCounter from \"./RetryDelayCounter\";\nimport Environment from \"../../src-tool/Environment\";\n  \n  var _OFF = 1;\n  /**\n   * Expecting create_session/recovery response\n   * (next: CREATED)\n   */\n  var CREATING = 2;\n  /**\n   * Expecting LOOP after having received CONOK as create_session/recovery response\n   * (previous: CREATING, next: FIRST_PAUSE)\n   */\n  var CREATED = 3;\n  /**\n   * Expecting the expiration of a small pause after create_session/recovery response \n   * and before sending bind_session \n   * (previous: CREATED, next: FIRST_BINDING)\n   */\n  var FIRST_PAUSE = 4;\n  /**\n   * Expecting bind_session response \n   * (previous: FIRST_PAUSE, next: RECEIVING)\n   */\n  var FIRST_BINDING = 5;\n  var PAUSE = 6;\n  /**\n   * Expecting bind_session response (transport is polling)\n   */\n  var BINDING = 7;\n  /**\n   * Reading item updates\n   * (previous: FIRST_BINDING)\n   */\n  var RECEIVING = 8;\n  var STALLING = 9;\n  var _STALLED = 10;\n  /**\n   * Expecting the expiration of a timeout after an error \n   * and before creating a new session or recovering the current\n   * (next: CREATING)\n   */\n  var SLEEP = 11;\n  \n  \n  var statusStrings = [];\n  statusStrings[_OFF] = \"OFF\";\n  statusStrings[CREATING] = \"CREATING\";\n  statusStrings[CREATED] = \"CREATED\";\n  statusStrings[FIRST_PAUSE] = \"FIRST_PAUSE\";\n  statusStrings[FIRST_BINDING] = \"FIRST_BINDING\";\n  statusStrings[PAUSE] = \"PAUSE\";\n  statusStrings[BINDING] = \"BINDING\";\n  statusStrings[RECEIVING] = \"RECEIVING\";\n  statusStrings[STALLING] = \"STALLING\";\n  statusStrings[_STALLED] = \"STALLED\";\n  statusStrings[SLEEP] = \"SLEEP\";\n  \n  \n  //close session \"helpers\"\n  var CLOSED_ON_SERVER = true;\n  var OPEN_ON_SERVER = false;\n  var NO_RECOVERY_SCHEDULED = true;\n  var RECOVERY_SCHEDULED = false;\n  //var JUST_SLEEP = true; //not used\n  \n  var sessionLogger = LoggerManager.getLoggerProxy(Constants.SESSION);\n  var protocolLogger = LoggerManager.getLoggerProxy(Constants.PROTOCOL);\n  \n  var PERMISSION_TO_FAIL = 1; //called X in the session machine\n  \n  var objectIdCounter = 1;\n  \n  var Session = function(isPolling,forced,handler,handlerPhase,originalSession,skipCors,sessionRecovery,mpnManager) {\n    this.objectId = objectIdCounter++;\n    if (sessionLogger.isDebugLogEnabled()) {\n        sessionLogger.logDebug(\"New session\", \"oid=\" + this.objectId);\n    }\n    this.cbOk = Executor.packTask(this.onStreamResponse,this);\n    this.cbErr = Executor.packTask(this.onStreamError,this);\n    this.cbEnd = Executor.packTask(this.onStreamEnd,this);\n    \n    \n    this.isPolling = isPolling;\n    this.forced = forced;\n    this.dataNotificationCount = 0;\n    \n    this.phase = _OFF;\n    this.phaseCount = 0;\n    this.push_phase =  Helpers.randomG(100) * 100;\n    \n    this.handler = handler;\n    this.handlerPhase = handlerPhase;\n    \n    //extracted from handler\n    this.slowing = handler.getSlowing();\n    this.policyBean = handler.getPolicyBean();\n    this.connectionBean = handler.getConnectionBean();\n    this.evalQueue = null;\n    this.controlHandler = handler.getControlConnectionHandler();\n    this.engineId = handler.getEngineId();\n    \n    this.serverSentBW = 0;\n    this.workedBefore = 0;\n    this.lastKATO = 0;\n    this.lastKATask = null;\n    this.reconnectTimeout = null;\n    this.sentTime = null;\n    \n    this.reset();\n    \n    /**\n     * The flag is true when the data connection fell down and the next actions will be the creation\n     * of a new session object and the recovery of the (logical) session.\n     * \n     * preparingRecovery is a kind of clone of the flag recoveryBean.isRecovery() with the difference\n     * that preparingRecovery is true in the session object experiencing a network error \n     * (where recoveryBean.isRecovery() is false) \n     * while recoveryBean.isRecovery() is true in the session object created for the recovery \n     * (where preparingRecovery is false).\n     */\n    this.preparingRecovery = false;\n    /**\n     * Recovery can be temporarily disabled when the client discovers that the server counter\n     * (as expressed by PROG) is different from the client counter.\n     * The current session is not invalidated but in case of error a new session will be created.\n     */\n    this.isRecoveryDisabled = false;\n    \n    /**\n     * When true, the special create request must be emitted which handles CONERR,5\n     */\n    this.serverBusy = false;\n    \n    if (originalSession) {\n      //inheriting a session\n      this.bindCount = originalSession.bindCount;\n      this.dataNotificationCount = originalSession.dataNotificationCount;\n      sessionLogger.logDebug(\"Copying prog \", this.dataNotificationCount);\n      \n      this.sessionId = originalSession.sessionId;\n      /**\n       * Address of the server for the current session.\n       * It can be the control-link (carried by CONOK message), \n       * or {@link ConnectionDetails#getServerAddress()} if the control-link is not set.\n       * It can also be null before receiving the first CONOK message.\n       */\n      this.sessionServerAddress = originalSession.sessionServerAddress;\n      this.push_phase = originalSession.push_phase;\n      this.serverSentBW = originalSession.serverSentBW;\n      \n      /**\n       * Copy of {@link ConnectionDetails#getServerAddress()}.\n       */\n      this.serverAddressCache =  originalSession.serverAddressCache;\n      /**\n       * Copy of {@link ConnectionOptions#isServerInstanceAddressIgnored()}.\n       */\n      this.ignoreServerAddressCache = originalSession.ignoreServerAddressCache;\n      \n      this.recoveryBean = new RecoveryBean(sessionRecovery, originalSession.recoveryBean);\n      \n    }  else {\n        Assertions.assert(! sessionRecovery, \"Recovery unexpected\");\n        this.recoveryBean = new RecoveryBean();\n    } \n    \n    this.mpnManager = mpnManager;\n    \n    if (Environment.isBrowser()) {\n        var that = this;\n        this.onlineHandler = function(e) {\n            var timeLeftMs = that.recoveryBean.timeLeftMs(that.policyBean.sessionRecoveryTimeout);\n            if (timeLeftMs <= 0) {\n                // close the current session and prepare to create a new one\n                that.closeSession('recovery.timeout.elapsed', CLOSED_ON_SERVER, RECOVERY_SCHEDULED);\n                //now is SLEEPing\n            }\n            that.launchTimeout(\"online.again\", 0);\n        };\n        try {\n            window.addEventListener('online', this.onlineHandler, false);\n        } catch (e) {\n            // online event not supported by the browser\n        }\n    }\n  };\n  \n  //I need to expose these values to sub classes\n  Session._OFF = _OFF;\n  Session.CREATING = CREATING;\n  Session.CREATED = CREATED;\n  Session.FIRST_PAUSE = FIRST_PAUSE;\n  Session.FIRST_BINDING = FIRST_BINDING;\n  Session.BINDING = BINDING;\n  Session.RECEIVING = RECEIVING;\n  Session.STALLING = STALLING;\n  Session._STALLED = _STALLED;\n  Session.PAUSE = PAUSE;\n  Session.SLEEP = SLEEP;\n \n  Session.prototype = {\n\n      /*private*/ reset: function() {\n        if (sessionLogger.isDebugLogEnabled()) {            \n            sessionLogger.logDebug(\"Resetting session oid=\", this.objectId);\n        }\n        this.bindCount = 0;\n        this.sessionServerAddress = null;\n        this.sessionId = null;\n        this.dataNotificationCount = 0;\n        \n        this.serverSentBW = 0;\n        this.cachedRequiredBW = false; //this is set only if a changeBW request is received while in CREATING status (too late to send it via create_session, too early to issue a control)\n        //note that when the session number is received the control handler is reset, so that put it there is not an option\n        \n        this.switchRequired = false;\n        this.switchForced = false;\n        this.switchCause = \"\";\n        this.slowRequired = false;\n        \n        this.preparingRecovery = false;\n      },\n      \n      /*public*/ resetConnectionList: function(skipCors) {\n        //do nothing\n      },\n      \n///////////////////////////////////phase handling\n      \n      /*private*/ changePhaseType: function(newType) {\n        if (sessionLogger.isDebugLogEnabled()) {\n            sessionLogger.logDebug(\"Session state change\", this.objectId, statusStrings[this.phase], \"->\", statusStrings[newType]);\n        }\n        \n        this.phase = newType;\n        this.phaseCount++;\n        var ph = this.phaseCount;\n        \n        this.handler.statusChanged(this.handlerPhase);\n        \n        return ph == this.phaseCount;\n      },\n      \n      /*private*/ incPushPhase: function() {\n        this.push_phase++; \n      },\n      \n      /*public*/ checkSessionPhase: function(ph) {\n        return this.push_phase == ph;\n      },\n      \n      /*public*/ getHighLevelStatus: function() {\n        var ph = this.phase;\n        \n        if (ph == _OFF) {\n          return Constants.DISCONNECTED;\n          \n        } else if (ph == SLEEP) {\n          if (this.preparingRecovery) {\n              return Constants.TRYING_RECOVERY;\n          } else {\n              return Constants.WILL_RETRY;\n          }\n          \n        } else if (ph == CREATING) {\n            if (this.recoveryBean.isRecovery()) {\n                return Constants.TRYING_RECOVERY;\n            } else {\n                return Constants.CONNECTING;\n            }\n          \n        } else if (ph == CREATED || ph == FIRST_PAUSE || ph == FIRST_BINDING) {\n          return Constants.CONNECTED + this.getFirstConnectedStatus();\n          \n        } else if (ph == _STALLED) {\n          return Constants.STALLED;\n          \n        /*} else if (ph == RECEIVING && (this.switchRequired || this.slowRequired)) {\n          return Constants.CONNECTED + Constants.SENSE;\n          \n          this would avoid the SENSE->STREAMING->POLLING case but introduces the\n          STREAMING->_STALLED->SENSE->POLLING one (problem is the client would be receiving data while in SENSE status)\n          \n          */\n          \n        } else { //BINDING RECEIVING STALLING PAUSE\n          return Constants.CONNECTED + this.getConnectedHighLevelStatus();\n        }        \n      },\n      \n      /*public*/ isOpen: function() { \n        return this.phase != _OFF && this.phase != CREATING && this.phase != SLEEP;\n      },\n      \n      /*public*/ isWaitingOKFromNet: function() {\n        return this.phase == CREATING || this.phase == BINDING || this.phase == FIRST_BINDING;\n      },\n      \n      /*public*/ isReceivingAnswer: function() { \n        return this.phase == CREATED ||  this.phase == RECEIVING ||  this.phase == STALLING ||  this.phase ==  _STALLED;\n      },\n      \n      /*public*/ isRecovering: function() {\n          return this.recoveryBean.isRecovery();\n      },\n      \n      /*public*/ isStreamingSession: function() {\n        return !this.isPolling;\n      },\n      \n      /*public*/ getPushServerAddress: function() {\n          // use the control-link address if available, otherwise use the address configured at startup \n          return this.sessionServerAddress == null ? this.serverAddressCache : this.sessionServerAddress;\n      },\n      \n      /*public*/ getSessionId: function() {\n        return this.sessionId;\n      },\n      \n      /*public*/ getSessionHost: function() {\n        return this.sessionServerAddress;\n      },\n      \n      /*public*/ /*isSlowRequired: function() {\n        return this.slowRequired;\n      },*/\n\n//////////////////////////////////external calls\n      /*public*/ createSession: function(oldSessionId,reconnectionCause,serverBusy) {\n        this.serverBusy = serverBusy;\n        \n        var openOnServer = this.phase != _OFF && this.phase != SLEEP ? OPEN_ON_SERVER : CLOSED_ON_SERVER;\n        \n        if (!MadTester.canMakeRequest()) {\n          sessionLogger.logDebug(\"Mad timeouts? Avoid connection\",this);\n          this.closeSession(\"mad\",openOnServer,NO_RECOVERY_SCHEDULED);\n          return false;\n        }\n        \n        if (openOnServer == OPEN_ON_SERVER) {\n          sessionLogger.logDebug(\"Opening on server, send destroy\",this);\n          this.closeSession(\"new.\"+(reconnectionCause||\"\"),OPEN_ON_SERVER,RECOVERY_SCHEDULED);\n        }\n\n        sessionLogger.logInfo(\"Opening new session\",this);\n        \n        this.reset();\n        \n        this.prepareSlowing();\n        \n        //this.policyBean.simpleSetter('serverKeepaliveInterval',NaN);\n        //this.policyBean.simpleSetter('serverPollingInterval',NaN);\n        //this.policyBean.simpleSetter('serverSideBandwidth',NaN);\n        this.connectionBean.simpleSetter(\"sessionId\",null);\n        this.connectionBean.simpleSetter(\"serverSocketName\",null);\n        this.connectionBean.simpleSetter(\"serverInstanceAddress\",null);\n        \n        this.serverAddressCache =  this.connectionBean.serverAddress;\n        this.ignoreServerAddressCache =  this.policyBean.serverInstanceAddressIgnored;\n        \n        \n        this.incPushPhase();\n        \n        return true; \n      },\n      \n      /*public*/ bindSession: function(bindCause) {\n        if (!MadTester.canMakeRequest()) {\n          this.closeSession(\"madb\",OPEN_ON_SERVER,NO_RECOVERY_SCHEDULED);\n          return false;\n        }\n        \n        this.bindCount++;\n      //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n        if (!ASSERT.verifyOk(this.phase == PAUSE || this.phase == FIRST_PAUSE || this.phase == _OFF)) {\n          sessionLogger.logError(\"Unexpected phase during binding of session\");\n        }\n      //>>excludeEnd(\"debugExclude\");\n        \n        if (this.phase == _OFF) {\n          //bind someonelse's session\n          if (!this.changePhaseType(FIRST_PAUSE)) { \n            return false;\n          }\n          \n          this.prepareSlowing();\n          \n        }\n        \n        // upon the new connection, the reverse heartbeat interval may have changed;\n        // this causes a dynamic invocation of handleReverseHeartbeat, but it is not enough;\n        // now we have to set \"force\" to true, because the interval is also being communicated\n        // to the Server with the bind_session request;\n        // moreover, if we switch from HTTP to WS or from WS to HTTP,\n        // the reverse heartbeat behavior may change (though currently not)\n        this.handleReverseHeartbeat(true);\n        \n        this.incPushPhase();\n\n        if (this.isPolling) {\n          sessionLogger.logDebug(\"Binding session\",this);\n        } else {\n          sessionLogger.logInfo(\"Binding session\",this);\n        }\n\n        return true; \n      },\n      \n      isActive: function() {\n          return this.phase == CREATED \n              || this.phase == FIRST_BINDING \n              || this.phase == BINDING \n              || this.phase == RECEIVING \n              || this.phase == STALLING \n              || this.phase == _STALLED;\n      },\n      \n      /*public*/ requestSwitch: function(newHPhase,switchCause,forced) {\n        this.handlerPhase = newHPhase;\n        \n        if (this.switchRequired) {\n          //switch already requested!\n          return;\n        }\n\n        sessionLogger.logDebug(\"Switch requested\",this);\n\n        //in case we were waiting a slow-switch we have to override that command\n        this.slowRequired = false;\n        \n        if (this.phase == CREATING || this.phase == SLEEP || this.phase == _OFF) { //Session Machine: during these statuses we do not have a session id\n          /*\n           * WARNING\n           * I suppose that this condition does not happen because a session creation should never\n           * superimpose another one, but I am not sure.\n           */\n          sessionLogger.logError(\"Unexpected creation of a session while another one is still creating\");\n          this.handler.createMachine(this.handlerPhase,switchCause,forced);\n          \n        } else if (this.phase == PAUSE || this.phase == FIRST_PAUSE) {\n          this.handler.switchMachine(this.handlerPhase,switchCause,forced);\n          \n        } else  { //Session Machine: during these statuses a control to ask for an immediate loop is sent if switch or slow are requested\n          // CREATED, FIRST_BINDING, BINDING, RECEIVING, STALLING, STALLED\n          this.switchRequired = true;\n          this.switchForced = forced;\n          this.switchCause = switchCause;\n          \n          this.forceRebind(switchCause);\n        } \n\n      },\n      \n      /*public*/ requestSlow: function(newHPhase) {\n        \n        this.handlerPhase = newHPhase;\n        \n        if (this.slowRequired) {\n          //slow already requested\n          return;\n        }\n\n      sessionLogger.logDebug(\"Slow requested\",this);\n\n      //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n        if (!ASSERT.verifyOk(this.phase != CREATING && this.phase != SLEEP && this.phase != _OFF)) {\n          sessionLogger.logError(\"Unexpected phase during slow handling\");\n        }\n      //>>excludeEnd(\"debugExclude\");\n \n        if (this.phase == PAUSE || this.phase == FIRST_PAUSE) {\n          this.handler.slowMachine(this.handlerPhase);\n          \n        } else {\n          this.slowRequired = true;\n          this.forceRebind(\"slow\");\n        }\n      },\n      \n      /*private*/ prepareSlowing: function() {\n        if (this.phase == _OFF || this.phase == SLEEP) { \n          //otherwise we're binding someone else session \n          this.slowing.prepareForSync();\n        }\n        \n        if (this.isPolling && this.forced) {\n          // by convention, if polling is explicitly requested\n          // we reset the estimate on the delay of the polling cycle\n          this.slowing.resetSync();\n        }\n      },\n      \n      /*public*/ handleReverseHeartbeat: function(force) {\n        if (this.phase == Session._OFF || this.phase == Session.CREATING || this.phase == Session.SLEEP) {\n          return;\n        } else {\n          if (this.policyBean.reverseHeartbeatInterval > 0) {\n            this.controlHandler.startReverseHeartbeats(this.policyBean.reverseHeartbeatInterval, force);\n          } else {\n            this.controlHandler.stopReverseHeartbeats(force);\n          }\n        }\n      },\n      \n      /*public*/ closeSession: function(closeReason,alreadyClosedOnServer,noRecoveryScheduled) {\n        sessionLogger.logInfo(\"Closing session\",this,closeReason);\n        if (this.phase != _OFF && this.phase != CREATING && this.phase != SLEEP) {\n          this.handler.onObsoleteControlLink(this.getPushServerAddress());\n          \n          if (!alreadyClosedOnServer) {\n            this.sendDestroySession(closeReason);\n          }  \n       \n          this.handlerPhase = this.handler.onSessionClose(this.handlerPhase,noRecoveryScheduled);\n\n          this.connectionBean.simpleSetter(\"sessionId\",null);\n          this.connectionBean.simpleSetter(\"serverSocketName\",null);\n          this.connectionBean.simpleSetter(\"serverInstanceAddress\",null);\n\n        } else {\n            this.handlerPhase = this.handler.onSessionClose(this.handlerPhase,noRecoveryScheduled);\n        }\n\n        this.shutdown(!noRecoveryScheduled);\n      },\n      \n      resetTimers: function() {\n          this.policyBean.resetRetryDelay(this.policyBean.retryDelay);\n          this.policyBean.resetConnectTimeout(this.policyBean.retryDelay);\n      },\n      \n      /*public*/ shutdown: function(justSleep) {\n        this.incPushPhase();\n        this.reset();\n        this.changePhaseType(justSleep?SLEEP:_OFF);\n        if (this.phase == _OFF) {\n            if (this.onlineHandler) {\n                try {\n                    window.removeEventListener('online', this.onlineHandler);\n                } catch (e) {\n                    // online event not supported by the browser\n                }\n            }\n        }\n        sessionLogger.logDebug(\"Session shutdown\",this);\n      },\n      \n      /*private*/ doPause: function(serverSentPause) {\n        if (!this.changePhaseType(this.phase == CREATED ? FIRST_PAUSE : PAUSE)) {\n          return;\n        }\n        \n        //I have to inc here or I can wrongly handle a onStreamEnd notification. -\n        this.incPushPhase();\n        \n        var pauseToUse = serverSentPause;\n        if (this.isPolling) {\n          //chiusura di un blocco di dati arrivati in polling\n          \n          if (serverSentPause >= this.policyBean.pollingInterval) {\n            // we're likely delaying because of the slowing algorithm\n            // nothing to do\n          } else {\n            this.policyBean.simpleSetter(\"pollingInterval\", serverSentPause);\n          }\n          \n          pauseToUse = this.getRealPollingInterval();\n\n        }\n        \n        if (this.phase != FIRST_PAUSE && pauseToUse && pauseToUse > 0) {\n          sessionLogger.logDebug(\"Make pause before next bind\");\n          this.launchTimeout(\"pause\", pauseToUse);\n        } else {\n          this.onTimeout(\"noPause\", this.phaseCount);\n        }\n      },\n      \n/////////////////////////////////////////EVENTS\n      \n      /*private*/ onTimeout: function(timeoutType, ph,usedTimeout,coreCause) {\n          /*\n           * !!!!! WARNING !!!!!\n           * Check that the signature of this method is coherent with the use of modifyTaskParam\n           * in method timeoutForStalling()\n           */\n        if (ph != this.phaseCount) {\n          return;\n        }\n        if (sessionLogger.isDebugLogEnabled()) {\n            sessionLogger.logDebug(\"Timeout event\", timeoutType, statusStrings[this.phase], \n                    \"sid\", this.sessionId,\n                    \"cause=\", coreCause,\n                    \"preparingRecovery=\", this.preparingRecovery);\n        }\n\n        //in case of sleep we lose information in the LS_cause\n        var tCause = \"timeout.\"+this.phase+\".\"+this.bindCount;\n        if (this.phase == SLEEP && coreCause) {\n          tCause = coreCause;\n        }\n\n        if (this.phase == CREATING) {\n          var timeLeftMs = this.recoveryBean.timeLeftMs(this.policyBean.sessionRecoveryTimeout);\n          if (this.recoveryBean.isRecovery() && timeLeftMs > 0) {\n              /*\n               * POINT OF RECOVERY (1/2):\n               * a previous recovery request has received no response within the established timeout, \n               * so we send another request in loop.\n               */\n              if (sessionLogger.isDebugLogEnabled()) {\n                  sessionLogger.logDebug(\"Start session recovery. Cause: no response timeLeft=\", timeLeftMs);\n              }\n              this.policyBean.increaseConnectTimeout();\n              this.handler.recoverSession(this.handlerPhase, tCause, this.forced);\n              \n          } else {\t    \n              sessionLogger.logDebug(\"Start new session. Cause: no response\");\n              var sleepCause = \"create.timeout\";\n              //send to SLEEP\n              this.closeSession(sleepCause,CLOSED_ON_SERVER,RECOVERY_SCHEDULED);\n              \n              this.policyBean.increaseConnectTimeout();\n              this.launchTimeout(\"zeroDelay\", 0, sleepCause);\n          }\n\n        } else if (this.phase == CREATED || this.phase == BINDING || this.phase == _STALLED || this.phase == SLEEP) {\n          if (this.slowRequired || this.switchRequired) {\n              sessionLogger.logDebug(\"Timeout: switch transport\");\n              this.handler.createMachine(this.handlerPhase,tCause+\".switch\",this.switchForced);\n          } else if (!this.isPolling || this.forced) {\n              if (this.preparingRecovery) {\n                  /*\n                   * POINT OF RECOVERY (2/2):\n                   * \n                   * This point is reached \n                   * 1) after the method onErrorEvent has detected a socket failure,\n                   *    set the phase to SLEEP and scheduled the onTimeout task; or\n                   * 2) when the session is STALLED because the client doesn't receive any data from the server\n                   *    (see method timeoutForReconnect)\n                   */\n                  sessionLogger.logDebug(\"Timeout: recover session\");\n                  this.handler.recoverSession(this.handlerPhase, tCause, this.forced);\n                  \n              } else {\n                  sessionLogger.logDebug(\"Timeout: new session\");\n                  this.handler.retry(this.handlerPhase,tCause,this.forced,this.serverBusy);\n              }\n          } else {\n              /*\n               * Branch reserved for polling.\n               * \n               * NOTE \n               * In the past, when an error occurred during polling, the new session was created not in polling\n               * but in streaming (probably because polling was seen as sub-optimal transport).\n               * With the introduction of the recovery, we are faced with 3 options:\n               * 1) recovering the session in polling\n               * 2) recovering the session in streaming\n               * 3) creating a new session in streaming.\n               * The second option is probably the best one, but, since the client falls-back rarely to polling,\n               * in order to ease the implementation, I have decided to follow the third path.\n               */\n              sessionLogger.logDebug(this.preparingRecovery ? \"Timeout: switch transport from polling (ignore recovery)\" : \"Timeout: switch transport from polling\");\n              this.handler.createMachine(this.handlerPhase,tCause,false);\n          }\n\n        } else if (this.phase == FIRST_BINDING) {\n          this.workedBefore--;\n\n          if (this.slowRequired || this.switchRequired) {\n            this.handler.createMachine(this.handlerPhase,tCause+\".switch\",this.switchForced);\n          } else if (this.workedBefore > 0 || this.forced) {\n              this.handler.retry(this.handlerPhase,tCause,this.forced,this.serverBusy);\n              //this.createSession(this.sessionId,tCause); //THIS is bad, because it forces us to reuse stuff\n          } else if (this.createNewOnFirstBindTimeout()) {\n            this.handler.createMachine(this.handlerPhase,tCause+\".switch\",this.switchForced);\n          } else {\n            this.onSessionGivesUp(this.handlerPhase,tCause);\n          }\n\n        } else if (this.phase == PAUSE) {\n          if (this.isPolling) {\n            this.slowing.testPollSync(usedTimeout);\n          }\n          this.bindSession(\"loop\");\n\n        } else if(this.phase == FIRST_PAUSE) {\n          this.bindSession(\"loop1\");\n\n        } else if (this.phase == RECEIVING) {\n          this.timeoutForStalled();\n\n        } else if (this.phase == STALLING) {\n          this.timeoutForReconnect();\n\n        } else { //_OFF\n          sessionLogger.logWarn(\"Unexpected timeout event while session is _OFF\",this);\n        }\n      \n      },\n      \n      /*protected*/ createNewOnFirstBindTimeout: function() {\n        return this.isPolling;\n      },\n      \n      /*private*/ shouldGiveUpTrying: function() {\n        return this.forced || this.handler.shouldGiveUpTrying();\n      },\n      \n      /*protected*/ onSessionGivesUp: function(ph,reason) {\n        var mustClose = this.shouldGiveUpTrying();\n        if (mustClose) {\n          var openOnServer = this.phase != _OFF && this.phase != SLEEP ? OPEN_ON_SERVER : CLOSED_ON_SERVER;\n          this.closeSession(\"giveup\",openOnServer,NO_RECOVERY_SCHEDULED);\n        }\n        \n        this.handler.onSessionGivesUp(ph,reason,mustClose);\n      },\n      \n      formatArgs: function(obj) {\n          var s = \"\";\n          for (var p in obj) {\n              s += p + \"=\" + obj[p] + \" \";\n          }\n          return s;\n      },\n      \n      /**\n       * @param reason\n       * @param closedOnServer true when receiving CONERR\n       * @param fromWS\n       * @param unableToOpen\n       * @param noImplAvailable\n       * @param possibleLoop\n       * @param tryRecovery the flag is true when the method is called from onStreamError or from onStreamEnd\n       * @param serverBusyError true when receiving CONERR,5\n       * @param reconnectMaxDelay delay before reconnecting when the Remote Data Adapter or Metadata Adapter is disconnected (see LightstreamerClient.handleRemoteAdapterStatus)\n       */\n      /*protected*/ onErrorEvent: function(reason, args) {\n        args = args || {};\n        var closedOnServer = args.closedOnServer;\n        var fromWS = args.fromWS;\n        var unableToOpen = args.unableToOpen;\n        var noImplAvailable = args.noImplAvailable;\n        var possibleLoop = args.possibleLoop;\n        var tryRecovery = args.tryRecovery;\n        var serverBusyError = args.serverBusyError;\n        var reconnectMaxDelay = args.reconnectMaxDelay;\n        var timeLeftMs = this.recoveryBean.timeLeftMs(this.policyBean.sessionRecoveryTimeout);\n        if (sessionLogger.isDebugLogEnabled()) {\n            sessionLogger.logDebug(\"Error event\", statusStrings[this.phase], \"reason=\" + reason, \n                    \"sid=\" + this.sessionId,\n                    \"timeLeft=\" + timeLeftMs,\n                    \"isRecoveryDisabled=\" + this.isRecoveryDisabled,\n                    this.formatArgs(args));\n        }\n        var startRecovery = tryRecovery && timeLeftMs > 0;\n        if (this.phase == RECEIVING || this.phase == _STALLED ||this.phase == STALLING ||this.phase == BINDING || this.phase == PAUSE) {\n          if (startRecovery && ! this.isRecoveryDisabled) {\n              /*\n               * POINT OF RECOVERY (1/2):\n               * the socket failure has happened while we were receiving data.\n               * \n               * To recover the session after a socket failure, set the phase to SLEEP \n               * and schedule the onTimeout task (see launchTimeout below), \n               * where the recovery will be performed.\n               */\n              sessionLogger.logDebug(\"Start session recovery. Cause: socket failure while receiving\");\n              this.preparingRecovery = true;\n              this.changePhaseType(SLEEP);\n              this.launchTimeout(\"firstRetryMaxDelay\", Helpers.randomG(this.policyBean.firstRetryMaxDelay), reason);\n              \n          } else {\n              sessionLogger.logDebug(\"Start new session. Cause: socket failure while receiving\");\n              this.closeSession(reason,closedOnServer,RECOVERY_SCHEDULED);\n              //now is SLEEPing\n              if (possibleLoop) {\n                  this.launchTimeout(\"currentRetryDelay\", this.calculateRetryDelay(),reason);\n              } else {\n                  if (reconnectMaxDelay) {\n                      // Remote Data Adapter is disconnected\n                      this.launchTimeout(\"reconnectMaxDelay\", Math.ceil(Math.random() * reconnectMaxDelay), reason);\n                  } else {                      \n                      this.launchTimeout(\"firstRetryMaxDelay\", Helpers.randomG(this.policyBean.firstRetryMaxDelay),reason);\n                      // this can still lead to tight loops if the session always fails just after\n                      // being established for some persistent cause; but see task:\n                      // https://organizza.5pmweb.com/?def=1&task=2473\n                  }\n              }\n          }\n          \n        } else if (this.phase == CREATING || this.phase == CREATED || this.phase == FIRST_BINDING) {\n          if (this.recoveryBean.isRecovery() && timeLeftMs > 0 && ! closedOnServer) {\n              /*\n               * POINT OF RECOVERY (2/2):\n               * the socket failure has happened while we were trying to do a recovery.\n               * \n               * When a recovery request fails we send another one in loop until a recovery succeeds or\n               * the server replies with a sync error.\n               */\n              sessionLogger.logDebug(\"Start session recovery. Cause: socket failure while recovering\");\n              this.preparingRecovery = true;\n              this.changePhaseType(SLEEP);              \n              this.launchTimeout(\"currentRetryDelay\", this.calculateRetryDelay(),reason);\n              this.policyBean.increaseRetryDelay();\n              \n          } else if ((this.switchRequired && !this.forced) || BrowserDetection.isProbablyAndroidBrowser()) {\n            sessionLogger.logDebug(\"Switching transport\");\n            //connection is broken but we already requested a change in session type, so move on\n            this.handler.createMachine(this.handlerPhase,this.switchCause+\".error\",this.switchForced);\n\n          } else {\n              var cause = (closedOnServer ? \"closed on server\" /*i.e. CONERR*/ : \"socket error\");\n              sessionLogger.logDebug(\"Start new session. Cause: \", cause);\n              this.closeSession(reason,closedOnServer,RECOVERY_SCHEDULED);\n              //now is SLEEPing\n\n              if (serverBusyError) {\n                  // Manage CONERR 5\n                  this.launchTimeout(\"zeroDelay\", 0, reason);\n                  this.policyBean.increaseConnectTimeoutToMax();\n              } else if (closedOnServer) {\n                  // Manage other CONERRs\n                  if (reconnectMaxDelay) {\n                      /*\n                       * If the client is trying to create a new session\n                       * When it receives a CONERR because the Metadata adapter is down\n                       * Then it creates a new session after reconnectMaxDelay\n                       */\n                      this.launchTimeout(\"reconnectMaxDelay\", Math.ceil(Math.random() * reconnectMaxDelay), reason);\n                  } else {\n                      /*\n                       * If the client is trying to create a new session\n                       * When it receives a CONERR \n                       * Then it creates a new session immediately\n                       */\n                      this.launchTimeout(\"zeroDelay\", 0, reason);\n                  }\n              } else if (this.recoveryBean.isRecovery() && timeLeftMs <= 0) {\n                  /*\n                   * If the client is trying to recovering the current session\n                   * When it detects a connection error but it can't do a recovery because the sessionRecoveryTimeout is expired\n                   * Then it creates a new session immediately\n                   */\n                  this.launchTimeout(\"zeroDelay\", 0, reason);\n              } else {\n                  this.launchTimeout(\"currentRetryDelay\", this.calculateRetryDelay(), reason);\n                  this.policyBean.increaseRetryDelay();                  \n              }\n          }\n          \n          \n          \n          \n        } else { //FIRST_PAUSE || _OFF || SLEEP\n        /*\n         * 23/05/2018\n         * I think that it is logically possible that errors can occur during non-active phase, \n         * so I commented out the assertion.\n         */\n        //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n        //ASSERT.fail();\n        //>>excludeEnd(\"debugExclude\");\n        //sessionLogger.logError(\"Unexpected error event while session is an non-active status\",reason,this);\n        }\n                \n      },\n      \n      /*private*/ onLoop: function(serverSentPause) {\n        \n        if (this.evalQueue && this.evalQueue.garbageCollection) {\n          this.evalQueue.garbageCollection();\n        }\n        //phase check @ PushEvent level\n        \n        if (this.phase == RECEIVING || this.phase == STALLING || this.phase == _STALLED || this.phase == CREATED) {\n          if (this.switchRequired) {\n            this.handler.switchMachine(this.handlerPhase,this.switchCause,this.switchForced);\n          } else if(this.slowRequired) {\n            this.handler.slowMachine(this.handlerPhase);\n          } else {\n            this.doPause(serverSentPause);\n          }\n        } else {\n        //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n          ASSERT.fail();\n        //>>excludeEnd(\"debugExclude\");\n          sessionLogger.logError(\"Unexpected loop event while session is an non-active status\",this);\n        }\n      },\n      \n      /*private*/ onEvent: function() {\n        \n        //phase check @ PushEvent level\n        \n        if (this.phase == CREATING) {\n          if (!this.changePhaseType(CREATED)) { //inc phase count\n            return;\n          } \n          this.timeoutForExecution();\n          \n        } else if (this.phase == CREATED) {\n          //stay created\n          \n        } else if (this.phase == BINDING || this.phase == FIRST_BINDING || this.phase == STALLING || this.phase == _STALLED || this.phase == RECEIVING) {\n          if (!this.changePhaseType(RECEIVING)) { //inc phase count\n            return;\n          } \n          this.timeoutForStalling();\n\n        } else { //FIRST_PAUSE PAUSE SLEEP _OFF \n        //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n          ASSERT.fail();\n        //>>excludeEnd(\"debugExclude\");\n          sessionLogger.logError(\"Unexpected push event while session is an non-active status\",this);\n        }\n        \n      },\n      \n////////////////////////////////////////////////////////actions\n      \n      /*private*/ createSent: function() {\n        MadTester.incMadTest();\n        this.sentTime = Helpers.getTimeStamp();\n      //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n        if (!ASSERT.verifyOk(this.phase == _OFF || this.phase == SLEEP)) {\n          sessionLogger.logError(\"Unexpected phase after create request sent\");\n        }\n      //>>excludeEnd(\"debugExclude\");\n        if (!this.changePhaseType(CREATING)) {\n          return false;\n        }\n        \n        this.launchTimeout(\"currentConnectTimeout\", this.getCurrentConnectTimeout());//will be executed if create does not return, no need to specify the cause\n        \n        this.evalQueue = this.handler.getEvalQueue();\n      },\n      \n      /*private*/ bindSent: function() {\n        this.sentTime = Helpers.getTimeStamp();\n      //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n        if (!ASSERT.verifyOk(this.phase == PAUSE || this.phase == FIRST_PAUSE)) {\n          sessionLogger.logError(\"Unexpected phase after bind request sent\",this);\n        }\n      //>>excludeEnd(\"debugExclude\");\n        if (!this.changePhaseType(this.phase == PAUSE ? BINDING : FIRST_BINDING)) {\n          return false;\n        }\n        \n        this.serverBusy = false;\n        \n        this.launchTimeout(\"bindTimeout\", this.getBindTimeout()); //will be executed if the bind does not return no need to specify the cause\n        \n        this.evalQueue = this.handler.getEvalQueue();\n      },\n      \n      /*protected*/ launchTimeout: function(timeoutType, triggerAfter,timeoutCause) {\n          /*\n           * !!!!! WARNING !!!!!\n           * Check that the signature of this method is coherent with the use of modifyTaskParam\n           * in method timeoutForStalling()\n           */\n        if (sessionLogger.isDebugLogEnabled()) {        \n            sessionLogger.logDebug(\"Status timeout in \", triggerAfter, timeoutType);\n        }\n        return Executor.addTimedTask(this.onTimeout,triggerAfter,this,[timeoutType,this.phaseCount,triggerAfter,timeoutCause]);\n      },\n      \n      /*private*/ timeoutForStalling: function() {\n        if (this.policyBean.keepaliveInterval > 0) {\n          var now = Helpers.getTimeStamp();\n          //avoid filling the Executor with timeouts\n          if (now - this.lastKATO < 50 && this.lastKATask) {\n            /*\n             * !!!!! WARNING !!!!!\n             * 1) lastKATask will execute method onTimeout()\n             * 2) We want to modify the parameter phase, which is currently the second one \n             *    on the signature of onTimeout()\n             * 3) Check that the signatures of onTimeout() and of launchTimeout() are coherent \n             *    with the index of modifyTaskParam\n             */\n            Executor.modifyTaskParam(this.lastKATask,1,this.phaseCount);\n          } else {\n            this.lastKATO = now;\n            this.lastKATask = this.launchTimeout(\"keepaliveInterval\", this.policyBean.keepaliveInterval); //we won't reconnect if this executes, so no need to add a cause\n          }\n        }\n      },\n      \n      /*private*/ timeoutForStalled: function() {\n        if (!this.changePhaseType(STALLING)) {\n          return;\n        }\n        this.launchTimeout(\"stalledTimeout\", this.policyBean.stalledTimeout); //we won't reconnect if this executes, so no need to add a cause\n      },\n      \n      /*private*/ timeoutForReconnect: function() {\n        if (!this.changePhaseType(_STALLED)) {\n          return;\n        }\n        var timeLeftMs = this.recoveryBean.timeLeftMs(this.policyBean.sessionRecoveryTimeout);\n        this.preparingRecovery = timeLeftMs > 0 && ! this.isRecoveryDisabled;\n        this.launchTimeout(\"reconnectTimeout\", this.policyBean.reconnectTimeout); //the onTimeout already knows the cause for this because we're STALLED\n      },\n      \n      /*private*/ timeoutForExecution: function() {\n      //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n        if (!ASSERT.verifyValue(this.phase,CREATED)) {\n          sessionLogger.logError(\"Unexpected phase during OK execution\");\n        }\n      //>>excludeEnd(\"debugExclude\");\n        this.launchTimeout(\"stalledTimeout\", this.policyBean.stalledTimeout);  //we won't reconnect if this executes, so no need to add a cause\n      },\n      \n////////////////////////////////////////////////////////timeouts      \n      \n      /*private*/ getBindTimeout: function() {\n        if (this.isPolling) {\n          return this.getCurrentConnectTimeout() + this.policyBean.idleTimeout;\n        } else {\n          return this.workedBefore > 0 && this.reconnectTimeout != null ? this.reconnectTimeout : this.getCurrentConnectTimeout();\n        }\n      },\n      \n      /*private*/ getRealPollingInterval: function() {\n        if (this.phase == FIRST_PAUSE) {\n          return this.policyBean.pollingInterval;\n          \n        } else {\n        \n          var refInterval = this.policyBean.pollingInterval;\n  \n          if (this.sentTime) {\n            var now = Helpers.getTimeStamp();\n            var diff = now - this.sentTime;\n            if (refInterval > diff) {\n              refInterval -= diff;\n              // compensiamo il tempo gia' trascorso durante la richiesta;\n              // notare che poteva trattarsi di polling asincrono\n            } else {\n              refInterval = 0;\n            }\n          }\n  \n          /*if (! isNaN(this.policyBean.serverPollingInterval)) {\n            if (this.policyBean.serverPollingInterval < refInterval) {\n              // non possiamo attendere piu' di quanto il Server ci concede\n              refInterval = this.policyBean.serverPollingInterval;\n            }\n          }*/\n          return refInterval;\n        }\n      },\n      \n      /*private*/ calculateRetryDelay: function() {\n        var spent = Helpers.getTimeStamp() - this.sentTime;\n        var currentRetryDelay = this.getCurrentRetryDelay();\n        return spent > currentRetryDelay ? 0 : currentRetryDelay - spent;\n      },\n      \n      /*private*/ calculateReconnectTimeout: function() {\n        if (!this.sentTime) {\n        //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n          ASSERT.fail();\n        //>>excludeEnd(\"debugExclude\");\n          sessionLogger.logError(\"Unexpected empty start time\",this);\n          this.reconnectTimeout = null;\n        }\n        \n        \n        //is the actual time we spent to send the request and receive the reponse (the roundtirp) \n        var spentTime = Helpers.getTimeStamp() - this.sentTime;\n        \n        //we add to our connectTimeout the spent roundtrip and we'll use that time as next connectCheckTimeout\n        //ok, we wanna give enough time to the client to connect if necessary, but we should not exaggerate :)\n        //[obviously if spentTime can't be > this.policyBean.connectTimeout after the first connection, \n        //but it may grow connection after connection if we give him too much time]\n        var ct = this.getCurrentConnectTimeout();\n        this.reconnectTimeout = (spentTime > ct ? ct : spentTime) + ct;\n      },\n      \n      \n      \n///////////////////////////////////////////////Callbacks\n     \n      /*private*/ onStreamResponse: function(_data,toCheckPhase) {\n        if (EnvironmentStatus.isUnloaded() || !this.checkSessionPhase(toCheckPhase)) {  //must check the unloaded because may be called by the ajaxFrame thread\n          //not from this phase, we don't care, this response is obsolete\n          return;\n        }\n         \n        if (_data === \"\") {\n          //fake notification\n          return;\n        }\n        \n        if (_data == null) {\n          //something went wrong\n          //maybe the server went down? \n          //notify that something went wrong...\n          MadTester.rollbackLastMadTest();\n          this.onErrorEvent(\"nullresp\");\n          return;\n        }\n       \n        this.evalQueue._enqueue(toCheckPhase,_data); //will fail if domain changes\n      },\n      \n      /*private*/ onStreamError: function(reason,toCheckPhase,fromWS,unableToOpen,possibleLoop) {\n        //must check the unloaded because may be called by the ajaxFrame thread\n        //the call is usually in sync with the load call; that's not the case on Opera\n        if (EnvironmentStatus.isUnloaded() || !this.checkSessionPhase(toCheckPhase)) { \n          return;\n        }\n        \n        MadTester.rollbackLastMadTest();\n        this.onErrorEvent(\"failure.\" + reason, {fromWS: fromWS, unableToOpen: unableToOpen, possibleLoop: possibleLoop, tryRecovery: true});\n      },\n      \n      /*private*/ onStreamEnd: function(toCheckPhase,fromWS) {\n          if (this.sessionRecovery && this.phase == SLEEP) {\n              /*\n               * The method is called because the recovery has failed due to a socket error and \n               * the socket has been closed.\n               * But since we are expecting the expiration of the retryDelay to try again the recovery,\n               * we don't generate an error event (see method onErrorEvent: POINT OF RECOVERY (2/2)).\n               */\n              return;\n          }\n        //in case of a good end the checkSessionPhase check will fail as we changed phase due to the loop [http cases]\n        //in case of a good end the checkSessionPhase check will fail as we changed phase due to the fact that we're now in the off case [ws cases]\n        \n        if (this.checkSessionPhase(toCheckPhase)) {\n          //avoid to count this connection as mad\n          MadTester.rollbackLastMadTest();\n          //try to open a new session\n          this.onErrorEvent(\"wrongend\",{fromWS: fromWS,tryRecovery: true});\n        }\n      \n      },\n      \n      /*public*/ evaluationError: function() {\n        this.onErrorEvent(\"eval\");\n      },\n      \n\n///////////////////////////////////////////////SlowingEvents\n      \n      //slowing calls this one\n      onSlowRequested: function() {\n        //if already slowing or switching I should not ask to slow again...\n        if (this.switchRequired || this.slowRequired) {\n          //this Session is already changing, we do not act\n          return;\n        }\n            \n        this.handler.onSlowRequired(this.handlerPhase);\n      },\n      \n      //slowing calls this one\n      /*public*/ onSynchOk: function() {\n        \n        if (protocolLogger.isDebugLogEnabled()) {\n          protocolLogger.logDebug(\"Synch event received\");\n        }\n        \n        this.onEvent();\n        \n        if (this.phase == RECEIVING) {\n          //with XHRStreamingConnection we've seen cases (eg: Chrome on Android 2.2 / Opera 10.64 on Kubuntu)\n          //where the first part of the connection is sent as expected while its continuation is not sent at all (Opera)\n          //or is sent in blocks (Chrome) so we wait for the sync method before remembering that the streaming actually works\n          this.workedBefore = PERMISSION_TO_FAIL; \n        }\n      \n      },\n      \n///////////////////////////////////////////////PushEvents\n      \n      onServerSentBandwidth: function(maxBandwidth) {\n        if (protocolLogger.isDebugLogEnabled()) {\n          protocolLogger.logDebug(\"Available bandwidth event received\",maxBandwidth);\n        }\n        this.serverSentBW = maxBandwidth;\n        this.policyBean.simpleSetter(\"realMaxBandwidth\", (maxBandwidth == \"unmanaged\" ? \"unlimited\" : maxBandwidth));\n      },\n      \n      onError41: function() {\n        if (protocolLogger.isDebugLogEnabled()) {\n          protocolLogger.logDebug(\"Error41 event received\");\n        }\n        //this is a nasty android browser bug, that causes a POST to be lost and another one to be reissued \n        //under certain circumnstances (https is fundamental for the issue to appear).\n        //seen on Android: see mail thread with PartyGaming around the 13/12/2010 for further details. \n\n        //this is also a Sont-Bravia TV Opera bug, that causes frame-made requests to be reissued when the frame changes again\n        //sometimes the correct answer reach the client, others the wrong one carrying error 41 does\n        //seen on Opera on bravia TV: see mail thread with Cell-Data around 15/10/2011 for further details.  \n        this.onErrorEvent(\"error41\",{closedOnServer: true});\n      },\n      \n      /*public*/ onKeepalive: function() {\n        if (protocolLogger.isDebugLogEnabled()) {\n          protocolLogger.logDebug(\"Keepalive event received\");\n        }\n        this.onEvent();\n        /*\n         * In order to notify the client listener about a probe message, the following classes must be traversed:\n         * - PushEvents\n         * - Session\n         * - SessionHandler\n         * - LightstreamerEngine\n         * - PushPageCollectionHandler\n         * - NewPushPageHandler\n         * - NewEngineHandler\n         * - LightstreamerClient\n         */\n        this.handler.onServerKeepalive();\n      },\n      \n      onOKReceived: function(newSession,controlLink,requestLimitLength,keepaliveIntervalDefault) {\n        if (protocolLogger.isDebugLogEnabled()) {\n          protocolLogger.logDebug(\"OK event received\");\n        }\n       \t\n        var lastUsedAddress = this.getPushServerAddress();\n        var addressToUse = lastUsedAddress;\n        if (controlLink != null && !this.ignoreServerAddressCache) {\n          controlLink = RequestsHelper.completeControlLink(addressToUse, controlLink);\n          addressToUse = controlLink;\n        }\n        this.sessionServerAddress = addressToUse;\n        \n        if (lastUsedAddress != this.sessionServerAddress) {\n          this.handler.onObsoleteControlLink(lastUsedAddress);\n          this.handler.onNewControlLink(this.sessionServerAddress);\n        }\n        \n        if (keepaliveIntervalDefault) {\n          if (this.isPolling) {\n            //on polling sessions the longest inactivity permitted is sent instead of the keepalive setting\n            this.policyBean.simpleSetter(\"idleTimeout\", keepaliveIntervalDefault);\n          } else {\n            //this.policyBean.simpleSetter('serverKeepaliveInterval', keepaliveIntervalDefault);\n            this.policyBean.simpleSetter(\"keepaliveInterval\", keepaliveIntervalDefault);\n          }\n        }\n        \n        if (this.phase == CREATING) {\n          //New session!\n            if (this.sessionId != null && this.sessionId != newSession) {\n                // nothing can be trusted here\n                sessionLogger.logInfo(\"Initializing session\", newSession, this.sessionId);\n                this.reset();\n            }\n          this.sessionId = newSession;\n          \n        } else {\n        //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n          if (!ASSERT.verifyValue(this.sessionId,newSession)) {\n            sessionLogger.logError(\"Unexpected session id received on bind OK\");\n          }\n        //>>excludeEnd(\"debugExclude\");\n          this.calculateReconnectTimeout();\n          \n        }\n        \n        this.slowing.startSync(this.isPolling);\n        \n        // NB \n        // onEvent() changes the connection status, \n        // so the connection details/options must be set before notifying the user\n        this.connectionBean.simpleSetter(\"sessionId\",newSession);\n        this.connectionBean.simpleSetter(\"serverInstanceAddress\",this.sessionServerAddress);\n\n        this.onEvent();\n       \n        if (this.phase == CREATED) {\n            if (this.recoveryBean.isRecovery()) {\n                /* \n                 * branch reserved for recovery responses \n                 * (i.e. bind_session requests with LS_recovery_from parameter)\n                 */\n                this.recoveryBean.restoreTimeLeft();\n                \n            } else {\n                /* \n                 * branch reserved for create_session responses \n                 */\n                this.handler.onSessionStart(requestLimitLength);\n                                \n                if (this.cachedRequiredBW) {\n                    this.changeBandwidth();\n                    this.cachedRequiredBW = false;\n                }\n            }\n          \n        } else {\n            /* \n             * branch reserved for bind_session responses (recovery responses excluded) \n             */\n            this.handler.onChangeRequestLimitLength(requestLimitLength);\n            this.handler.onSessionBound();\n            this.onSessionBound();\n        }\n      },\n      \n      onIPReceived: function(clientIp) {\n          if (clientIp) {\n              this.handler.onIPReceived(clientIp);\n              this.connectionBean.simpleSetter(\"clientIp\", clientIp);\n          }\n      },\n      \n      onSyncReceived: function(secs) {\n        if (protocolLogger.isDebugLogEnabled()) {\n          protocolLogger.logDebug(\"Sync event received\");\n        }\n        \n        this.slowing.syncCheck(secs);\n        \n        this.onEvent();\n      },\n        \n      /*public*/ onLoopReceived: function(serverSentPause) {\n        if (protocolLogger.isDebugLogEnabled()) {\n          protocolLogger.logDebug(\"Loop event received\");\n        }\n      \n        this.onLoop(serverSentPause);\n      },\n      \n      /*public*/ onSyncError: function(cause) {\n        this.onSessionError(cause);\n      },\n      \n      /**\n       * Manages CONERR errors.\n       */\n      forwardError: function(errorCode, errorMsg) {\n          if (errorCode === this.policyBean.remoteAdapterStatusObserver.metadataErrorCode) {\n              this.onMetadataAdapterError();\n              return;\n          }\n          switch (errorCode) {\n          \n          case 20: // sync error\n              this.onSyncError(\"syncerror\");\n              break;\n              \n          case 4: // recovery error\n              this.onSyncError(\"recovery.error\");\n              break;\n              \n          case 5:\n              if (Constants.handleError5) {\n                  this.onServerBusy();\n              } else {\n                  this.onFatalError(errorCode, errorMsg);\n              }\n              break;\n              \n          case 40:\n          case 41:\n          case 48:\n              // other errors which cause a new session creation\n              this.onSessionError(\"error\" + errorCode);\n              break;\n              \n          default:\n              this.onFatalError(errorCode, errorMsg);\n          }\n      },\n      \n\tforwardREQERR: function(errorCode, errorMsg, listenerCallback) {\n        if (errorCode == 20) { // sync error\n            this.onSyncError(\"syncerror\");\n        } else if (errorCode == 11 || errorCode == 65 || errorCode == 67) {\n            // error 11 is managed as CONERR 21\n            if (errorCode == 11) {\n                this.onFatalError(21, errorMsg);\n            } else {\n                this.onFatalError(errorCode, errorMsg);\n            }\n        } else if (listenerCallback != null) {\n            try {\n                listenerCallback();\n            } catch (e) {\n                this.handler.onFatalError(e);\n            }\n        } else {\n            if (protocolLogger.isWarnLogEnabled()) {\n                protocolLogger.logWarn(\"Ignore error\", errorCode, errorMsg);\n            }\n        }\n\t},\n    \n    forwardERROR: function(errorCode, errorMsg) {\n        /*\n         * close current session, don't create a new session, notify client listeners\n         */\n        this.onFatalError(errorCode, errorMsg);\n    },\n      \n      onMetadataAdapterError: function() {\n          MadTester.rollbackLastMadTest();\n          this.onErrorEvent(\"metadata.adapter.disconnected\", {\n              closedOnServer: true, \n              reconnectMaxDelay: this.policyBean.remoteAdapterStatusObserver.reconnectMaxDelay});\n      },\n      \n      /**\n       * Closes the current session and creates a new session. \n       */\n      onSessionError: function(cause) {\n          //we've to rollback a count on the mad create or there is a tiny risk that we'll get a false positive\n          //on the mad timeouts algorithm\n          MadTester.rollbackLastMadTest();\n          this.onErrorEvent(cause,{closedOnServer: true});\n      },\n      \n      disconnectAndReconnect: function() {\n          MadTester.rollbackLastMadTest();\n          this.onErrorEvent(\"remote.adapter.disconnected\", {\n              reconnectMaxDelay: this.policyBean.remoteAdapterStatusObserver.reconnectMaxDelay});\n      },\n      \n      onServerBusy: function() {\n          //we've to rollback a count on the mad create or there is a tiny risk that we'll get a false positive\n          //on the mad timeouts algorithm\n          MadTester.rollbackLastMadTest();\n          \n          this.serverBusy = true;\n          this.onErrorEvent(\"server.busy\",{closedOnServer: true,serverBusyError: true});\n      },\n      \n      /**\n       * Closes the current session, doesn't create a new session and notifies the client listeners.\n       */\n      onFatalError: function(errorCode, errorMsg) {\n          this.onServerError(errorCode, errorMsg);\n      },\n      \n      /*public*/ onEnd: function(message) {\n        if (protocolLogger.isDebugLogEnabled()) {\n          protocolLogger.logDebug(\"End event received\",message);\n        }\n        this.closeSession(\"end\",CLOSED_ON_SERVER,NO_RECOVERY_SCHEDULED);\n      },\n      \n      onPROGCounterMismatch: function() {\n          this.isRecoveryDisabled = true;\n      },\n      \n      /*public*/ onUpdateReceived: function(args,snap) {\n        this.onEvent();\n        \n        this.handler.onUpdateReceived(args,snap);\n      },\n      \n      /*public*/ onEndOfSnapshotEvent: function(args) {\n        this.onEvent();\n        \n        this.handler.onEndOfSnapshotEvent(args);\n      },\n      \n      /*public*/ onClearSnapshotEvent: function(args) {\n        this.onEvent();\n        \n        this.handler.onClearSnapshotEvent(args);\n      },\n      \n      /*public*/ onLostUpdatesEvent: function(args) {\n        this.onEvent();\n        \n        this.handler.onLostUpdatesEvent(args);\n      },\n      \n      /*public*/ onMessageAck: function(sequence,num) {\n        this.onEvent();\n        \n        this.handler.onMessageAck(sequence, num);\n      },\n      \n      onMessageOk: function(sequence,num) {\n        this.onEvent();\n        \n        this.handler.onMessageOk(sequence, num);\n      },\n      \n      // <= 0 message rejected by the Metadata Adapter\n      onMessageDeny: function(sequence,flag,msg,num) {\n        this.onEvent();\n        \n        this.handler.onMessageDeny(sequence,flag,num,msg);\n      },\n      \n      // 38 message has not arrived in time (and perhaps never come)\n      /*public*/ onMessageDiscarded: function(sequence,num) {\n        this.onEvent();\n        \n        this.handler.onMessageDiscarded(sequence,num);\n      },\n      \n      /*public*/ onMessageError: function(sequence,flag,msg,num) {\n         this.onEvent();\n        \n         this.handler.onMessageError(sequence,flag,num,msg);\n      },\n      \n      /*public*/ onTableError: function(tableCode,flag,msg) {\n        this.onEvent();\n         \n        this.handler.onTableError(tableCode,flag,msg);\n      },\n       \n      /*public*/ onServerError: function(flag,msg) {\n        this.onEnd(msg);\n        \n        this.handler.onServerError(flag,msg);\n      },\n      \n      /*public*/ onUnsubscription: function(tableCode) {\n        this.onEvent();\n        \n        this.handler.onUnsubscription(tableCode);\n      },\n      \n      /*public*/ onSubscription: function(tableCode,numOfSubscribedItems,numOfSubscribedFields,keyPos,commandPos) {\n        this.onEvent();\n        \n        this.handler.onSubscription(tableCode,numOfSubscribedItems,numOfSubscribedFields,keyPos,commandPos);\n      },\n      \n      /*public*/ onSubscriptionReconf: function(tableCode,phase,frequency) {\n        this.onEvent();\n        \n        this.handler.onSubscriptionReconf(tableCode,phase,frequency);\n      },\n           \n      getDataNotificationProg: function() {\n          return this.dataNotificationCount;\n      },\n\n      onDataNotification: function() {\n          this.dataNotificationCount++;\n      },\n      \n///////////////////////////////////////////////CONTROL      \n      \n      /*private*/ forceRebind: function(rebindCause) {  \n        sessionLogger.logInfo(\"Sending request to the server to force a rebind on the current connection\",this);\n        \n        var _data = RequestsHelper.getForceRebindParams(rebindCause,this.slowing.getDelay());\n\n        //this is used to retry force_bind requests in case they fail to reach the server\n        var tutor = new ForceRebindTutor(rebindCause,this,this.push_phase,this.policyBean);\n        \n        var requestListener = {\n                onREQOK: function(LS_window) {\n                    // nothing to do: expecting CONS\n                },\n\n                onREQERR: function(LS_window, phase, errorCode, errorMsg) {\n                    tutor.discard();\n                    sessionLogger.logError(\"force_rebind request caused the error: \" + errorCode + \" \" + errorMsg + \" - The error will be silently ignored.\");\n                }\n        };\n        this.controlHandler.addRequest(this.sessionId, _data, ControlRequest.FORCE_REBIND, tutor, null, requestListener);\n        \n      },\n      \n      // NB: you should never call sendDestroySession directly, call closeSession instead \n      // (sendDestroySession does not make checks on the situation) \n      /*private*/ sendDestroySession: function(reason) { \n        sessionLogger.logInfo(\"Sending request to the server to destroy the current session\",this);\n    \n        //we always destroy the last session: if we need to destroy a session \n        //is on a browser were we don't permit the buffering of a second session\n        \n        var _data = RequestsHelper.getDestroyParams(this.sessionId,reason);\n        \n        var requestListener = {\n                onREQOK: function(LS_window) {\n                    // nothing to do\n                },\n\n                onREQERR: function(LS_window, phase, errorCode, errorMsg) {\n                    sessionLogger.logError(\"destroy request caused the error: \" + errorCode + \" \" + errorMsg + \" - The error will be silently ignored.\");\n                }\n        };\n        this.forwardDestroyRequestToTransport(this.sessionId, _data, ControlRequest.DESTROY,null,this.getPushServerAddress(),requestListener);\n      },\n      \n      changeBandwidth: function() {\n        if (this.phase == _OFF || this.phase == SLEEP) {\n          return;\n        } else if (this.phase == CREATING) {\n          //too late to send it via create_session\n          //too early to send it via control\n          this.cachedRequiredBW = true;\n          return;\n        } else if (this.serverSentBW == \"unmanaged\") {\n          return;\n        }\n        var query = RequestsHelper.getConstraintParams(this.policyBean);\n        \n        var requestListener = {\n                onREQOK: function(LS_window) {\n                    // nothing to do: expecting CONS\n                },\n\n                onREQERR: function(LS_window, phase, errorCode, errorMsg) {\n                    sessionLogger.logError(\"constrain request \" + printObj(query) + \" caused the error: \", errorCode, errorMsg);\n                }\n        };\n        this.controlHandler.addRequest(null, query, ControlRequest.CONSTRAINT, null, null, requestListener);\n      },\n      \n      onServerName: function(name) {\n          this.connectionBean.simpleSetter(\"serverSocketName\", name);\n      },\n\n      /**@protected*/onSessionBound: function() {\n          this.resetTimers();\n      },\n      \n      /**\n       * @abstract\n       * Forwards a destroy request to the transport.\n       * <p>\n       * <i>HTTP and WebSocket implementations must be different because, since the method is called \n       * when the session is closing, WebSocket can delivery the request synchronously \n       * while HTTP has to delivery the request asynchronously.</i> \n       */\n      forwardDestroyRequestToTransport: function(sessionId, request, type, related, retryingOrHost, requestListener) {\n          throw new Error(\"abstract method\");\n      },\n      \n      onMpnRegisterOK: function(deviceId, adapterName) {\n    \t  this.mpnManager.eventManager.onRegisterOK(deviceId, adapterName);\n      },\n      \n      onMpnRegisterError: function(code, message) {\n    \t  this.mpnManager.eventManager.onRegisterError(code, message);\n      },\n      \n      onMpnSubscribeOK: function(lsSubId, pnSubId) {\n          this.mpnManager.eventManager.onSubscribeOK(lsSubId, pnSubId);\n      },\n      \n      onMpnSubscribeError: function(subId, code, message) {\n          this.mpnManager.eventManager.onSubscribeError(subId, code, message);\n      },\n      \n      onMpnUnsubscribeOK: function(pnSubId) {\n          this.mpnManager.eventManager.onUnsubscribeOK(pnSubId);\n      },\n      \n      onMpnUnsubscribeError: function(subId, code, message) {\n          this.mpnManager.eventManager.onUnsubscribeError(subId, code, message);\n      },\n      \n      getCurrentConnectTimeout: function() {\n          return this.policyBean.currentConnectTimeout;\n      },\n      \n      getCurrentRetryDelay: function() {\n          return this.policyBean.currentRetryDelay;\n      }\n  };\n  \n  function printObj(obj) {\n      var s = \"{\";\n      for (var p in obj) {\n          s += p + \"=\" + obj[p] + \" \";\n      }\n      s += \"}\";\n      return s;\n  }\n\n  export default Session;\n  \n\n\n\n","import Assertions from \"../utils/Assertions\";\n    \n    /**\n     * Bean about the status of the recovery attempt.\n     * <p>\n     * State graph of the bean. The event start=T means the client wants to recover the current session.\n     * Transitions not depicted should not happen.\n    <pre>\n       start=F                            start=T\n       +--+                               +--+\n       |  |                               |  |\n       |  |                               |  |\n    +--+--v------+   start=T/set ts    +--+--v-----+\n    |recovery=F  +--------------------->recovery=T |\n    |            +<--------------------+           |\n    +------------+   start=F/reset ts  +-----------+\n    </pre>\n     *\n     * @since May 2018\n     */\n    var RecoveryBean = function() {\n        if (arguments.length == 0) {\n            this.ctor0();\n        } else {\n            Assertions.assert(arguments.length == 2, \"Recovery error (1)\");\n            this.ctor2(arguments[0], arguments[1]);\n        }\n        Assertions.assert(this.invariant(), \"Recovery error (2)\");\n    };\n    \n    RecoveryBean.prototype = {\n            \n            invariant: function() {\n                return this.recovery ? this.recoveryTimestampMs != -1 : this.recoveryTimestampMs == -1;\n            },\n            \n            /**\n             * Initial state. No recovery.\n             */\n            ctor0: function() {\n                this.recovery = false;\n                this.recoveryTimestampMs = -1;\n            },\n            \n            /**\n             * Next state.\n             * \n             * @param {boolean} startRecovery\n             * @param {RecoveryBean} old\n             */\n            ctor2: function(startRecovery, old) {\n                if (old.recovery) {\n                    if (startRecovery) {\n                        this.recovery = true;\n                        this.recoveryTimestampMs = old.recoveryTimestampMs;                        \n                    } else {\n                        /*\n                         * This case can occur when, for example, after a recovery\n                         * the client rebinds in HTTP because the opening of Websockets takes too long. \n                         */\n                        this.recovery = false;\n                        this.recoveryTimestampMs = -1;\n                    }\n                    \n                } else {\n                    if (startRecovery) {\n                        this.recovery = true;\n                        this.recoveryTimestampMs = Date.now();\n                        \n                    } else {\n                        Assertions.assert(old.recoveryTimestampMs == -1, \"Recovery error (4)\");\n                        this.recovery = false;\n                        this.recoveryTimestampMs = -1;\n                    }\n                }\n            },\n            \n            /**\n             * Restore the time left to complete a recovery, i.e. calling timeLeftMs(maxTimeMs) returns maxTimeMs.\n             * The method must be called when a recovery is successful.\n             */\n            restoreTimeLeft: function() {\n                this.recovery = false;\n                this.recoveryTimestampMs = -1;\n            },\n            \n            /**\n             * True when the session has been created to recover the previous session,\n             * which was discarded because of a network error.\n             */\n            isRecovery: function() {\n                return this.recovery;\n            },\n            \n            /**\n             * Time left to recover the session.\n             * When zero or a negative value, the session must be discarded.\n             * \n             * @param {Number} maxTimeMs\n             * @return {Number}\n             */\n            timeLeftMs: function(maxTimeMs) {\n                if (this.recovery) {\n                    Assertions.assert(this.recoveryTimestampMs != -1, \"Recovery error (5)\");\n                    return maxTimeMs - (Date.now() - this.recoveryTimestampMs);\n                    \n                } else {            \n                    return maxTimeMs;\n                }\n            }\n    };\n    \n    export default RecoveryBean;\n","import Inheritance from \"../../src-tool/Inheritance\";\nimport Tutor from \"./Tutor\";\n\n  var ForceRebindTutor = function(_cause,session,_phase,connOptions) {\n    \n    this._callSuperConstructor(ForceRebindTutor,[connOptions]);\n    \n    this._cause = _cause;\n    this._phase = _phase;\n    this.session = session;\n  };\n  \n  ForceRebindTutor.prototype = {\n\n    verifySuccess: function() {\n      //if push_pase is changed we've already received a loop so that our request is successful\n      return !this.session.checkSessionPhase(this._phase);\n    },\n    \n    doRecovery: function() {\n      //let's try again\n      this.session.forceRebind(this._cause);\n    },\n    \n    getFixedTimeout: function() {\n      return this.connOptions.forceBindTimeout;\n    },\n    \n    notifyAborted: function() {\n      //nothing to do\n    }\n    \n  };\n  \n  Inheritance(ForceRebindTutor,Tutor);\n  export default ForceRebindTutor;\n\n","import Encoder from \"./Encoder\";\nimport Inheritance from \"../../src-tool/Inheritance\";\nimport Utils from \"../Utils\";\nimport Assertions from \"../utils/Assertions\";\n    \n    var names = {\n            encodeRequest: 'encodeRequest',\n            encodeUnqRequest: 'encodeUnqRequest'\n    };\n    names = Utils.getReverse(names);\n  \n  var WSEncoder = function(wsConnection) {\n      this.wsConnection = wsConnection;\n  };\n  \n  WSEncoder.prototype = {\n      toString: function() {\n        return \"[WSEncoder]\";\n      },\n      \n      getFixedOverhead: function(fileName) {\n        //the batching algorithm doesn't count the name of the \n        //request file (e.g. control.js) as part of the request and thus as part of the length of\n        //the request; however in the ws case the file name is part of the request body and thus \n        //should be taken into account. \n        return fileName.length+2; //2 is \\r\\n\n      },\n      \n      getExt: function() {\n        return \"\";\n      },\n      \n      /**\n       * @override\n       */\n      encodeRequest: function(params,extraParams,sessionId) {\n          extraParams = this.expandWithSessionId(extraParams, sessionId);\n          return this._callSuperMethod(WSEncoder,names['encodeRequest'],[params,extraParams,sessionId]);\n      },\n      \n      /**\n       * @override\n       */\n      encodeUnqRequest: function(params,extraParams,unquotedParam,sessionId) {\n          extraParams = this.expandWithSessionId(extraParams, sessionId);\n          return this._callSuperMethod(WSEncoder,names['encodeUnqRequest'],[params,extraParams,unquotedParam,sessionId]);\n      },\n      \n      /**\n       * @override\n       */\n      encodeDestroyRequest: function(params,bridge,sessionId,extraParams) {\n          // destroy request already have sessionId set\n          return this._callSuperMethod(WSEncoder,names['encodeRequest'],[params,extraParams,sessionId]);\n      },\n      \n      /**\n\t   * Adds the parameter LS_session only if the WS connection has no default sessionId.\n       * The default sessionId is established when the client receives the response of\n       * a bind_session request.\n       *\n       * @private\n       */\n      expandWithSessionId: function(extraParams, sessionId) {\n          var defaultSessionId = this.wsConnection.getDefaultSessionId();\n          if (defaultSessionId == null) {\n              extraParams = Utils.extendObj(extraParams,{\"LS_session\": sessionId});\n\n          } else {\n              // omit LS_session since the server knows the sessionId of the connection\n              //>>excludeStart(\"debugExclude\", pragmas.debugExclude);            \n              Assertions.verifyValue(defaultSessionId, sessionId, \"Unexpected session ID\");\n              //>>excludeEnd(\"debugExclude\");\n          }\n          return extraParams;\n      }\n  };\n  \n  Inheritance(WSEncoder,Encoder);\n  export default WSEncoder;\n  \n\n","import LoggerManager from \"../../src-log/LoggerManager\";\nimport Constants from \"../Constants\";\nimport Executor from \"../../src-tool/Executor\";\nimport EnvironmentStatus from \"../../src-tool/EnvironmentStatus\";\nimport Utils from \"../Utils\";\nimport ASSERT from \"../../src-test/ASSERT\";\nimport UnsubscribeTutor from \"../control/UnsubscribeTutor\";\nimport SubscribeTutor from \"../control/SubscribeTutor\";\nimport SubscriptionChangeTutor from \"../control/SubscriptionChangeTutor\";\n  \n  var sharingLogger = LoggerManager.getLoggerProxy(Constants.SHARING);\n\n  var PushPageCollectionHandler = function(engine,configuration,details,options) {\n    this.reqPhase = 1;\n    this.engine = engine;\n    this.configuration = configuration;\n    this.details = details;\n    this.options = options;\n    this.sessionPhase = 0;\n    this.sessionAlive = false;\n\n    this.pushPages = {};\n    this.clientsCount = 0;\n\n    this.subscriptions = {};\n    this.page2Tables = {};\n\n\n    this.cleanTask = Executor.addRepetitiveTask(this.cleanThread,5000,this);\n\n    EnvironmentStatus.addBeforeUnloadHandler(this);\n    EnvironmentStatus.addUnloadHandler(this);\n  };\n  \n  PushPageCollectionHandler.prototype = {\n    \n    /*public*/ toString: function() {\n      return [\"[\",\"PushPageCollectionHandler\",\"]\"].join(\"|\");\n    },\n\n    getSessionPhase: function() {\n      return this.sessionPhase;\n    },\n\n    /*public*/ checkSessionPhase: function(pPhase) {\n      return pPhase == this.sessionPhase;\n    },\n\n\n    checkConnectionPool: function(onlyMeCount) {\n      var status = this.engine.getSharedStatus();\n      if (status && status.getNumberOfConnectionsToServer(this.engine.sessionHandler.getPushServerAddress()) > onlyMeCount) {\n        sharingLogger.logWarn(\"There is probably another web application connected to the same Lightstreamer Server within this browser instance. That could prevent the current application from connecting to the Server. Please close the other application to unblock the current one\");\n      }\n    },\n\n\n    /*private*/ cleanAll: function() {\n      this.subscriptions = {};\n      for (var i in this.page2Tables) {\n        this.page2Tables[i] = {};\n      }\n    },\n\n    forEachPushPage: function(callback) {\n      for (var i in this.pushPages) {\n        callback(this.pushPages[i],i);\n      }\n    },\n\n    onNewPushPage: function(ppId,pp) {\n      this.pushPages[ppId] = pp;\n      this.page2Tables[ppId] = {};\n\n      this.clientsCount++;\n      this.configuration.simpleSetter('clientsCount',this.clientsCount);\n\n      sharingLogger.logDebug(\"New client attached to engine\",this);\n      if (ppId !== Constants.MAIN_CLIENT) {\n\n        this.details.forEachProperty(function(prop,value) {\n          pp.onEngineConfigurationChange(\"ConnectionDetails\",prop,value);\n        });\n        this.options.forEachProperty(function(prop,value) {\n          pp.onEngineConfigurationChange(\"ConnectionOptions\",prop,value);\n        });\n        this.configuration.forEachProperty(function(prop,value) {\n          pp.onEngineConfigurationChange(\"Configuration\",prop,value);\n        });\n\n        pp.onStatusChange(this.engine.getStatus());\n\n        if (this.sessionAlive) {\n          pp.onSessionStart(this.sessionPhase);\n        } else {\n          pp.onSessionEnd(this.sessionPhase);\n        }\n\n      }\n\n\n\n    },\n\n    onPushPageLost: function(ppId) {\n      sharingLogger.logDebug(\"Dismissing client\",this,ppId);\n      if (this.pushPages[ppId]) {\n        var relatedTables = this.page2Tables[ppId];\n        for (var tableNum in relatedTables) {\n          this.removeTable(tableNum);\n        }\n\n        this.pushPages[ppId].dispose();\n        delete (this.pushPages[ppId]);\n        delete this.page2Tables[ppId];\n\n        this.clientsCount--;\n        this.configuration.simpleSetter('clientsCount',this.clientsCount);\n      }\n    },\n\n\n\n    getPushPageHandlerFromTableNumber: function(tableNum) {\n      var sub = this.subscriptions[tableNum];\n      if (!sub) {\n        sharingLogger.logDebug(\"Can't find subscription anymore\");\n        return null;\n      }\n      return this.getPushPageHandler(sub.pageNum);\n    },\n    /*public*/ getPushPageHandler: function(pageNum) {\n      if (!this.pushPages[pageNum]) {\n        sharingLogger.logDebug(\"Can't find page anymore\");\n        return null;\n      }\n\n      return this.pushPages[pageNum];\n    },\n\n\n\n\n\n    notifyNewStatus: function(newStatus,oldStatus) {\n      this.forEachPushPage(function(pp) {\n        pp.onStatusChange(newStatus);\n      });\n      return true;\n    },\n\n    /*public*/ onSessionStart: function() {\n      // I delete the accumulated deletes, so the pushpages after this refresh will be\n      // forced to repeat their requests and the deletes\n      this.cleanAll();\n      this.sessionAlive = true;\n      var phase = ++this.sessionPhase;\n      this.forEachPushPage(function(pp) {\n        pp.onSessionStart(phase);\n      });\n\n    },\n\n    /*public*/ onSessionEnd: function() {\n      // I delete the accumulated deletes, so the pushpages after this refresh will be\n      // forced to repeat their requests and the deletes\n      this.cleanAll();\n      this.sessionAlive = false;\n      var phase = ++this.sessionPhase;\n      this.forEachPushPage(function(pp) {\n        pp.onSessionEnd(phase);\n      });\n\n    },\n\n    onSubscription: function(tableNum) {\n      if (!this.subscriptions[tableNum]) {\n        return;\n      }\n      this.subscriptions[tableNum].pendingSubscription = false;\n    },\n    onSubscriptionError: function(tableNum) {\n      /*if (!this.subscriptions[tableNum]) {\n        return;\n      }\n      delete this.subscriptions[tableNum];\n      if (this.page2Tables[pageNum]) {\n        delete this.page2Tables[pageNum][tableNum];\n      }*/\n      this.onUnsubscription(tableNum);\n      //this.subscriptions[tableNum].pendingSubscription = false;\n    },\n    isWaitingSubscription: function(tableNum) {\n      if (!this.subscriptions[tableNum]) {\n        //on subscribe received\n        return false;\n      }\n      return this.subscriptions[tableNum].pendingSubscription && !this.subscriptions[tableNum].pendingUnsubscription;\n    },\n    subscriptionSent: function(tableNum) {\n      if (!this.subscriptions[tableNum]) {\n        return;\n      }\n      this.subscriptions[tableNum].sentSubscription = true;\n    },\n\n    onSubscriptionEvent: function(tableNum) {\n    },\n\n\n    onUnsubscription: function(tableNum) {\n      if (!this.subscriptions[tableNum]) {\n        return;\n      }\n      var pageNum = this.subscriptions[tableNum].pageNum;\n      delete this.subscriptions[tableNum];\n\n      if (this.page2Tables[pageNum]) {\n        delete this.page2Tables[pageNum][tableNum];\n      }\n\n    },\n    isWaitingUnsubscription: function(tableNum) {\n      if (!this.subscriptions[tableNum]) {\n        //on unsubscribe received\n        return false;\n      }\n      return this.subscriptions[tableNum].sentSubscription && this.subscriptions[tableNum].pendingUnsubscription;\n    },\n\n\n    isWaitingSubscriptionReconfNotification: function(tableNum,ph) {\n      if (!this.subscriptions[tableNum]) {\n        //on unsubscribe received\n        return false;\n      }\n      return this.subscriptions[tableNum].pendingChange && this.subscriptions[tableNum].pendingChangePhase == ph;\n    },\n    onSubscriptionReconfEvent: function(tableNum,phase) {\n      if (!this.subscriptions[tableNum]) {\n        //on unsubscribe received\n        return;\n      }\n      if (phase == this.subscriptions[tableNum].pendingChangePhase) {\n        this.subscriptions[tableNum].pendingChange = false;\n      }\n    },\n\n\n    /*public*/ handleTable: function(ppId,body) {\n      //since this call is session-synched and since the pushPage passes subscriptions to us only if session is alive\n      //then at this moment we must be connected (otherwise this call is discarded during phase check)\n\n      var pageH = this.pushPages[ppId];\n      if (!pageH || !this.engine.isSessionOpenOrRecovering()) {\n        //should never happen as to arrive here the existence of the pushPageHandler is checked\n\n        //>>excludeStart(\"debugExclude\", pragmas.debugExclude);\n        ASSERT.fail();\n        //>>excludeEnd(\"debugExclude\");\n        sharingLogger.logError(\"Client or session unexpectedly disappeared while handling subscription\",this,ppId);\n        return;\n      }\n\n      var tableNum = Utils.nextSubscriptionId();\n\n      this.page2Tables[ppId][tableNum] = true;\n\n      //delete-request handling, it's not handled on a per-PushPage basis as\n      //even if a pushpage disappears we have to send its remove requests\n      var reqs = this.getControlParams(body,tableNum);\n      this.subscriptions[tableNum] = new SubscriptionStatus(ppId,reqs.add,reqs.remove);\n\n      sharingLogger.logDebug(\"Notify back to the client that the subscription was handled\");\n\n      this.subscribeTable(tableNum,1);\n      return tableNum;\n    },\n\n    /*public*/ subscribeTable: function(tableNum,effort,currentTimeout) {\n      if (!this.subscriptions[tableNum]) {\n        return;\n      }\n      if (effort >= 3) {\n        //if we're retrying we check cookies to see if it's possible that the connection is blocked due to\n        //exhaustion of the pool\n        this.checkConnectionPool(1);\n      }\n\n      this.subscriptions[tableNum].pendingSubscription = true;\n\n      var tutor = new SubscribeTutor(this.options,tableNum,this,effort,currentTimeout);\n      var addBody = this.subscriptions[tableNum].addBody;\n      this.engine.sessionHandler.sendSubscription(tableNum,addBody,this,effort >= 2,tutor);\n\n    },\n\n    removeTable: function(tableNum) {\n      if (!this.subscriptions[tableNum] || this.subscriptions[tableNum].pendingUnsubscription) {\n        //already unsubscribed or already unsubscribing\n        return;\n      }\n\n      this.unsubscribeTable(tableNum,1);\n    },\n\n    /*public*/ unsubscribeTable: function(tableNum,effort,currentTimeout) {\n      if (!this.subscriptions[tableNum]) {\n        return;\n      }\n      if (effort >= 3) {\n        //if we're retrying we check cookies to see if it's possible that the connection is blocked due to\n        //exhaustion of the pool\n        this.checkConnectionPool(1);\n      }\n\n      this.subscriptions[tableNum].pendingUnsubscription = true;\n\n      var tutor = new UnsubscribeTutor(this.options,tableNum,this,effort,currentTimeout);\n      var deleteBody = this.subscriptions[tableNum].deleteBody;\n      deleteBody['LS_reqId'] = Utils.nextRequestId();\n      this.engine.sessionHandler.sendUnsubscription(tableNum,deleteBody,this,effort >= 2,tutor);\n\n    },\n\n    updateSubscriptionParams:function(tableNum,changingParams) {\n      if (!this.subscriptions[tableNum]) {\n        return;\n      }\n\n      var ph = ++this.subscriptions[tableNum].pendingChangePhase;\n\n      this.sendUpdateSubscriptionParams(tableNum,ph,changingParams,1);\n    },\n\n    sendUpdateSubscriptionParams: function(tableNum,ph,changingParams,effort,currentTimeout) {\n      if (!this.subscriptions[tableNum] || this.subscriptions[tableNum].pendingChangePhase != ph ) {\n        return;\n      }\n      if (effort >= 3) {\n        //if we're retrying we check cookies to see if it's possible that the connection is blocked due to\n        //exhaustion of the pool\n        this.checkConnectionPool(1);\n      }\n\n      this.subscriptions[tableNum].pendingChange = true;\n      var rPhase = this.subscriptions[tableNum].pendingChangePhase;\n      var reqParams = Utils.extendObj({\n        \"LS_subId\": tableNum,\n        \"LS_op\": \"reconf\",\n        \"LS_reqId\": Utils.nextRequestId()\n      },changingParams);\n\n      var tutor = new SubscriptionChangeTutor(this.options,tableNum,rPhase,this,changingParams,effort,currentTimeout);\n      this.engine.sessionHandler.sendSubscriptionChange(tableNum,reqParams,tutor);\n\n\n    },\n\n\n\n\n    /*public*/ notifyEngineIsDying: function() {\n      this.forEachPushPage(function(pp) {\n        pp.onEngineDying();\n      });\n    },\n\n    /*public*/ notifyEngineDeath: function(suiciding) {\n      var pps = this.pushPages;\n      this.pushPages = {};\n      for (var i in pps) {\n        pps[i].onEngineDeath(suiciding);\n      }\n    },\n\n    /*public*/ notifyServerError: function(flag,msg) {\n      this.forEachPushPage(function(pp) {\n        pp.onServerError(flag,msg);\n      });\n    },\n\n    dispose: function() {\n      Executor.stopRepetitiveTask(this.cleanTask);\n      EnvironmentStatus.removeBeforeUnloadHandler(this);\n      EnvironmentStatus.removeUnloadHandler(this);\n    },\n\n    unloadEvent: function() {\n      this.notifyEngineDeath(false);\n    },\n\n    preUnloadEvent: function() {\n      this.notifyEngineIsDying();\n    },\n\n    cleanThread: function() {\n      var that = this;\n      this.forEachPushPage(function(pp,id) {\n        //this call on a dead page will result in a onPushPageLost call\n        pp.ping()[\"then\"](function(ok) {\n          //if didn't fail we're ok\n        },function() {\n          that.onPushPageLost(id);\n        });\n      });\n    },\n\n\n    /**\n     * Genera la querystring da utilizzare per la richiesta dei dati di push\n     */\n    /*public*/ getControlParams: function(_body,tableNum) {\n      this.reqPhase++;\n\n      var commonParams = {\n        \"LS_subId\": tableNum\n      };\n\n      Utils.extendObj(_body,commonParams);\n\n      return {\n        add: Utils.extendObj(_body,{\"LS_op\":\"add\", \"LS_reqId\": Utils.nextRequestId()}),\n        remove: Utils.extendObj(commonParams,{\"LS_op\": \"delete\", \"LS_reqId\": Utils.nextRequestId()})\n      };\n\n    },\n\n    onServerKeepalive: function() {\n        this.forEachPushPage(function(pp) {\n            pp.onServerKeepalive();\n        });\n    }\n  };\n\n  function SubscriptionStatus(pageNum,addBody,deleteBody) {\n    this.pendingSubscription = false;\n    this.sentSubscription = false;\n    this.pendingChange = false;\n    this.pendingChangePhase = 0;\n    this.pendingUnsubscription = false;\n    this.deleteBody = deleteBody;\n    this.addBody = addBody;\n    this.pageNum = pageNum;\n  }\n\n\n  PushPageCollectionHandler.prototype[\"onPushPageLost\"] = PushPageCollectionHandler.prototype.onPushPageLost;\n  PushPageCollectionHandler.prototype[\"onNewPushPage\"] = PushPageCollectionHandler.prototype.onNewPushPage;\n  PushPageCollectionHandler.prototype[\"unloadEvent\"] = PushPageCollectionHandler.prototype.unloadEvent;\n  PushPageCollectionHandler.prototype[\"preUnloadEvent\"] = PushPageCollectionHandler.prototype.preUnloadEvent;\n  \n  export default PushPageCollectionHandler;\n  \n","import Inheritance from \"../../src-tool/Inheritance\";\nimport Tutor from \"./Tutor\";\nimport Assertions from \"../utils/Assertions\";\n  \n  var SubscriptionChangeTutor = function(connOptions,tableNum,ph,owner,changingParams,effort,currentTimeout) {\n    this._callSuperConstructor(SubscriptionChangeTutor,[connOptions,currentTimeout]);\n    \n    this.tableNum = tableNum;\n    this.ph = ph;\n    this.owner = owner;\n    this.changingParams = changingParams;\n    this.effort = effort;\n    \n  };\n  \n  SubscriptionChangeTutor.prototype = {\n      verifySuccess: function () {\n        return !this.owner.isWaitingSubscriptionReconfNotification(this.tableNum,this.ph);\n      },\n      \n      doRecovery: function () {\n        this.owner.sendUpdateSubscriptionParams(this.tableNum,this.ph,this.changingParams,this.effort+1,this.timeoutMs);\n      },\n      \n      notifyAborted: function() {\n        // possible if the subscription is closed?\n      }\n  };\n  \n  \n  Inheritance(SubscriptionChangeTutor,Tutor);\n  export default SubscriptionChangeTutor;\n  \n","import Inheritance from \"../../src-tool/Inheritance\";\nimport Tutor from \"./Tutor\";\n\n  var notifySenderName;\n  for(var i in  {notifySender:true}) {\n    notifySenderName=i;\n  }\n\n  var SubscribeTutor = function(connOptions,tableNum,owner,effort,currentTimeout) {\n    this._callSuperConstructor(SubscribeTutor,[connOptions,currentTimeout]);\n    \n    this.tableNum = tableNum;\n    this.owner = owner;\n    this.effort = effort;\n    \n  };\n\n  SubscribeTutor.prototype = {\n      verifySuccess: function () {\n        return !this.owner.isWaitingSubscription(this.tableNum);\n      },\n      \n      doRecovery: function () {\n        this.owner.subscribeTable(this.tableNum,this.effort+1,this.timeoutMs);\n      },\n\n      notifySender: function(failed) {\n        if (!failed) {\n          this.owner.subscriptionSent(this.tableNum);\n        }\n        this._callSuperMethod(SubscribeTutor,notifySenderName,arguments);\n      },\n      \n      notifyAborted: function() {\n        // we don't have anything to do, it means that a\n        //delete was queued before the add was sent\n        //so the subscription should not exists anymore\n      }\n  };\n  \n  \n  Inheritance(SubscribeTutor,Tutor);\n  export default SubscribeTutor;\n  \n","import Inheritance from \"../../src-tool/Inheritance\";\nimport Tutor from \"./Tutor\";\n  \n  var UnsubscribeTutor = function(connOptions,tableNum,owner,effort,currentTimeout) {\n    this._callSuperConstructor(UnsubscribeTutor,[connOptions,currentTimeout]);\n    \n    this.tableNum = tableNum;\n    this.owner = owner;\n    this.effort = effort;\n    \n  };\n\n  UnsubscribeTutor.prototype = {\n      verifySuccess: function () {\n        return !this.owner.isWaitingUnsubscription(this.tableNum);\n      },\n\n      doRecovery: function () {\n        this.owner.unsubscribeTable(this.tableNum,this.effort+1,this.timeoutMs);\n      },\n      \n      notifyAborted: function() {\n        //it means that a\n        //sent was not actually sent\n        this.owner.onUnsubscription(this.tableNum);\n      }\n  };\n  \n  \n  Inheritance(UnsubscribeTutor,Tutor);\n  export default UnsubscribeTutor;\n  \n","import Executor from \"../../src-tool/Executor\";\n\n  var MIN_TIMEOUT = 4000;\n  \n  var Tutor = function(connOptions,currentTimeout) {\n    this.discarded = false;\n    this.connOptions = connOptions;\n    this.timeoutMs = this.getFixedTimeout ? this.getFixedTimeout() : (currentTimeout ? currentTimeout*2 : MIN_TIMEOUT);\n  };\n  \n  Tutor.prototype = {\n\n    /*public*/ notifySender: function(failed) {\n      if (failed) {\n        this.doRecovery();\n      } else {\n        var timeoutToUse = this.timeoutMs+Number(this.connOptions.pollingInterval);\n        Executor.addTimedTask(this.onTimeout,timeoutToUse,this);\n      }\n    },\n    \n    /*private*/ onTimeout: function() {\n      if (!(this.discarded || this.verifySuccess())) {\n        this.doRecovery();\n      } \n    },\n    \n    discard: function() {\n        this.discarded = true;\n    }\n    \n    /*abstract function verifySuccess()*/\n    /*abstract function doRecovery()*/ \n    /*abstract function notifyAborted()*/ //called if the request will be willingly not sent\n    /*abstract OPTIONAL function getFixedTimeout()*/ //if available the method is used to obtain the timeout value\n  };\n  \n  export default Tutor;\n\n","import Global from \"../Global\";\nimport LoggerManager from \"../../src-log/LoggerManager\";\nimport EnvironmentStatus from \"../../src-tool/EnvironmentStatus\";\nimport ASSERT from \"../../src-test/ASSERT\";\nimport Constants from \"../Constants\";\n\n  var protocolLogger = LoggerManager.getLoggerProxy(Constants.PROTOCOL);\n\n  var simulateSilence = false;\n  var currentProg = null;\n  var currentIdForProg = null;\n\n  var PushEvents = function(engId,tablePhaseChecker) {\n    this.tablePhaseChecker = tablePhaseChecker;\n    this.exportMethods(engId);\n\n  };\n\n  PushEvents.simulateSilence = function(silence) {\n    simulateSilence = silence;\n  };\n\n\n  PushEvents.prototype = {\n\n    changeSession: function(session) {\n      protocolLogger.logDebug(\"Changing reference session\",session);\n      this.sessionHandler = session;\n      if (this.sessionHandler.getSessionId() != this.currentIdForProg) {\n          this.currentProg = null;\n      }\n    },\n\n    exportMethods: function(engId) {\n      var that = this;\n\n      Global.exportGlobal(engId,\"LS_e\",function(flag, phase, arg3, controlLink, keepaliveIntervalDefault, requestLimitLength) {\n        that.onPushEvent(flag, phase, arg3, controlLink, keepaliveIntervalDefault, requestLimitLength);\n      });\n      Global.exportGlobal(engId,\"LS_t\",function(_title) {\n        that.onServerTitle(_title);\n      });\n      Global.exportGlobal(engId,\"LS_u\",function(winPhase, args, snap) {\n        that.onUpdate(winPhase, args, snap);\n      });\n      Global.exportGlobal(engId,\"LS_v\",function(winPhase, args) {\n        that.onUpdate(winPhase, args, true);\n      });\n      Global.exportGlobal(engId,\"LS_o\",function(winPhase, args) {\n        that.onLostUpdatesEvent(winPhase, args);\n      });\n      Global.exportGlobal(engId,\"LS_n\",function(winPhase, args) {\n        that.onEndOfSnapshotEvent(winPhase, args);\n      });\n      Global.exportGlobal(engId,\"LS_s\",function(winPhase, args) {\n        // WARNING!!! this contains a recovery for a Server bug that lasted up to 6.1\n        // now the recovery is no longer needed, as this new version, for both Web and Node.js,\n        // requires Server version 6.2 (because of other, more important, reasons);\n        // however, we keep the recovery, for now, to ensure partial backward compatibility\n        if (args.length) {\n          that.onClearSnapshotEvent(winPhase, args);\n        } else {\n          // it is a sync signal instead\n          var phase = winPhase;\n          var secs = args;\n          that.onPushEvent(6, phase, secs);\n        }\n      });\n      Global.exportGlobal(engId,\"LS_l\",function(flag, phase, tableCode, msg, isReqerr /*only for message errors*/) {\n        that.onErrorEvent(flag, phase, tableCode, msg, isReqerr);\n      });\n      Global.exportGlobal(engId,\"LS_w\",function(flag, phase, tableCode, its, flds, kPos, cPos) {\n        that.onControlEvent(flag, phase, tableCode, its, flds, kPos, cPos);\n      });\n      Global.exportGlobal(engId,\"setTimeout\",function(f,t) {\n        setTimeout(f,t);\n      });\n      Global.exportGlobal(engId,\"alert\",function(m) {\n        if (typeof alert != \"undefined\") {\n          alert(m);\n        } else if (typeof console != \"undefined\") {\n          //node.js and possibly other server-side-js-environments will pass from here\n          console.log(m);\n        }\n      });\n      Global.exportGlobal(engId,\"LS_svrname\",function(name) {\n          that.onServerName(name);\n      });\n      Global.exportGlobal(engId,\"LS_MPNREG\",function(deviceId, adapterName) {\n          that.onMPNREG(deviceId, adapterName);\n      });\n      Global.exportGlobal(engId,\"LS_MPNOK\",function(lsSubId, pnSubId) {\n          that.onMPNOK(lsSubId, pnSubId);\n      });\n      Global.exportGlobal(engId,\"LS_MPNDEL\",function(pnSubId) {\n          that.onMPNDEL(pnSubId);\n      });\n    },\n\n    preliminaryCheck: function(ph,tph,isPause,canBeBothPauseOrNot) {\n      var _ok = !simulateSilence && !EnvironmentStatus.isUnloaded() && this.sessionHandler!=null;\n      //log(-1,_ok);\n\n      /*\n       * NB\n       * Checks was disabled for these reasons:\n       * 1) the first two checks are wrong because TLCP answers don't carry phase information\n       * 2) the third check doesn't work as expected when transport is polling (and further it is incomprehensible to me)\n       */\n//      if (_ok && ph) { //sendMessage related messages do not carry session phase information\n//        _ok &= this.sessionHandler.checkSessionPhase(ph);\n//        //log(-2,_ok,ph,this.sessionHandler.push_phase);\n//      }\n//\n//      if (_ok && tph) {\n//        _ok &= this.tablePhaseChecker.checkSessionPhase(tph);\n//      }\n//\n//      if (_ok && !canBeBothPauseOrNot) {\n//        if (isPause) {\n//          _ok &= this.sessionHandler.isWaitingOKFromNet();\n//        } else {\n//          _ok &= this.sessionHandler.isReceivingAnswer();\n//        }\n//        //log(-3,_ok);\n//      }\n//      /*if (!_ok) {\n//        log(0);\n//      }*/\n\n      if (protocolLogger.isDebugLogEnabled()) {\n        protocolLogger.logDebug(\"Command phase check\",_ok);\n      }\n\n      return _ok;\n    },\n\n    /**\n     * Checks if a data notification can be forwarded to session.\n     * In fact, in case of recovery, the initial notifications may be redundant.\n     */\n    processCountableNotification: function() {\n        if (this.sessionHandler.getSessionId() != this.currentIdForProg) {\n            // the associated sessionHandler object can be reused without notice\n            this.currentProg = null;\n        }\n        var sessionProg = this.sessionHandler.getDataNotificationProg();\n        protocolLogger.logDebug(\"Adding notification\",sessionProg);\n        if (this.currentProg != null) {\n            //>>excludeStart(\"debugExclude\", pragmas.debugExclude);\n            if(!ASSERT.verifyOk((this.currentProg <= sessionProg))) {\n              protocolLogger.logError(\"Unexpected progressive\",this.currentProg);\n            }\n            //>>excludeEnd(\"debugExclude\");\n            this.currentProg++;\n            if (this.currentProg <= sessionProg) {\n                // already seen: to be skipped\n                protocolLogger.logDebug(\"Skipping replicated progressive\",this.currentProg);\n                return false;\n            } else {\n                this.sessionHandler.onDataNotification();\n                sessionProg = this.sessionHandler.getDataNotificationProg();\n                //>>excludeStart(\"debugExclude\", pragmas.debugExclude);\n                if(!ASSERT.verifyValue(this.currentProg,sessionProg)) {\n                  protocolLogger.logError(\"Unexpected progressive\",this.currentProg);\n                }\n                //>>excludeEnd(\"debugExclude\");\n                return true;\n            }\n        } else {\n            this.sessionHandler.onDataNotification();\n            return true;\n        }\n    },\n\n    onServerTitle: function(_title) {\n      //USELESS\n    },\n\n    onPushEvent: function(flag, phase, arg3, controlLink, keepaliveIntervalDefault, requestLimitLength) {\n      if (!this.preliminaryCheck(phase,null,flag == 1,flag == 3||flag == 4)) {\n        return;\n      }\n\n      if (flag == 1) {\n        //OK\n        this.sessionHandler.onOKReceived(arg3,controlLink,requestLimitLength,keepaliveIntervalDefault);\n\n      } else if (flag == 2) {\n        //LOOP\n        this.sessionHandler.onLoopReceived(arg3);\n\n      } else if (flag == 3) {\n        //SYNC ERROR\n        this.sessionHandler.onSyncError(\"syncerror\");\n\n      } else if (flag == 4) {\n        //END\n        var cause = 30;\n        if (arg3 != null) {\n          cause = arg3;\n          if (cause == 41) {\n            this.sessionHandler.onError41();\n            return;\n          } else if (cause == 48) {\n            // session max duration reached: behave like a sync error\n            this.sessionHandler.onSyncError(\"expired\");\n            return;\n          }\n          if ((cause > 0 && cause < 30) || cause > 39) {\n            // cause code unexpected in this context, hence considered as an error\n            cause = 39;\n          }\n        }\n        var message = \"The session has been forcibly closed by the Server\";\n        // NB controlLink contains the message of END\n        if (controlLink != null) {\n            message = controlLink;\n        }\n        this.onErrorEvent(cause, phase, null, message);\n\n      } else if (flag == 5) {\n        this.sessionHandler.onServerSentBandwidth(arg3);\n\n      } else if (flag == 6) {\n        this.sessionHandler.onSyncReceived(arg3);\n\n      } else if (flag == 7) {\n        // NB when PROG, the fourth argument is not the control link but an array with the messages \n        // received between the previous and the current PROG\n        var capturedMessages = controlLink;\n        this.onProg(arg3, capturedMessages);\n\n      } else {\n        this.sessionHandler.onEnd(\"Unsupported Server version\");\n      }\n    },\n    \n    onProg: function(prog, capturedMessages) {\n        if (this.sessionHandler.getSessionId() != this.currentIdForProg) {\n            // the associated sessionHandler object can be reused without notice\n            this.currentProg = null;\n        }\n        var sessionProg = this.sessionHandler.getDataNotificationProg();\n        if (this.currentProg == null) {\n            this.currentProg = prog;\n            this.currentIdForProg = this.sessionHandler.getSessionId();\n            if (this.currentProg > sessionProg) {\n                //>>excludeStart(\"debugExclude\", pragmas.debugExclude);\n                ASSERT.fail();\n                //>>excludeEnd(\"debugExclude\");\n                protocolLogger.logError(\"Received event prog higher than expected\",prog,sessionProg,capturedMessages);\n                this.sessionHandler.onPROGCounterMismatch();\n            }\n        } else {\n            // not allowed by the protocol, but we handle the case for testing scenarios;\n            // these extra invocations of prog() can be enabled on the Server\n            // through the <PROG_NOTIFICATION_GAP> private flag\n            if (this.currentProg != prog) {\n                //>>excludeStart(\"debugExclude\", pragmas.debugExclude);\n                ASSERT.fail();\n                //>>excludeEnd(\"debugExclude\");\n                protocolLogger.logError(\"Received event prog different than expected\",prog,this.currentProg,capturedMessages);\n                this.sessionHandler.onPROGCounterMismatch();\n            } else if (prog != sessionProg) {\n                //>>excludeStart(\"debugExclude\", pragmas.debugExclude);\n                ASSERT.fail();\n                //>>excludeEnd(\"debugExclude\");\n                protocolLogger.logError(\"Received event prog different than actual\",prog,sessionProg,capturedMessages);\n                this.sessionHandler.onPROGCounterMismatch();\n            }\n        }\n    },\n\n    onUpdate: function(winPhase, args, snap) {\n      if (args.length < 2) {\n        if (!this.preliminaryCheck(winPhase)) {\n          return;\n        }\n        this.sessionHandler.onKeepalive();\n      } else {\n        if (!this.preliminaryCheck(null,winPhase)) {\n          return;\n        }\n        if (! this.processCountableNotification()) {\n          return;\n        }\n        this.sessionHandler.onUpdateReceived(args,snap || false);\n      }\n    },\n\n    onSnapshot: function(winPhase,args) {\n      this.onUpdate(winPhase,args,true);\n    },\n\n    onEndOfSnapshotEvent: function(winPhase,args) {\n      if (!this.preliminaryCheck(null,winPhase)) {\n        return;\n      }\n      if (! this.processCountableNotification()) {\n        return;\n      }\n\n      this.sessionHandler.onEndOfSnapshotEvent(args);\n    },\n\n    onClearSnapshotEvent: function(winPhase,args) {\n      if (!this.preliminaryCheck(null,winPhase)) {\n        return;\n      }\n      if (! this.processCountableNotification()) {\n        return;\n      }\n\n      this.sessionHandler.onClearSnapshotEvent(args);\n    },\n\n    //RAW; MERGE,DISTINCT or COMMAND with flag UNFILTERED; COMMAND without flag UNFILTERED (ADD and DELETE)\n    onLostUpdatesEvent: function(winPhase, args) {\n      if (!this.preliminaryCheck(null,winPhase)) {\n        return;\n      }\n      if (! this.processCountableNotification()) {\n        return;\n      }\n\n      this.sessionHandler.onLostUpdatesEvent(args);\n    },\n\n    /**\n     * @param _code error code\n     * @param num sequence number\n     * @param messageCode sequence\n     * @param msg error message\n     * @param isReqerr when true, the error comes from a REQERR; when false, the error comes form a MSGFAIL.\n     */\n    onMessageErrorEvent: function(_code, num, messageCode, msg, isReqerr) {\n      if (!this.preliminaryCheck()) {\n        return;\n      }\n      \n      //>>excludeStart(\"debugExclude\", pragmas.debugExclude);\n      if(!ASSERT.verifyValue(messageCode.substring(0, 3),\"MSG\")) {\n        protocolLogger.logError(\"Unexpected message outcome sequence\",messageCode);\n      }\n      //>>excludeEnd(\"debugExclude\");\n      var seq = messageCode.substr(3);\n      \n      // handle REQERR\n      if (isReqerr) {\n          this.sessionHandler.onMessageError(seq,_code,msg,num);\n          return;\n      }\n      \n      // handle MSGFAIL\n      if (! this.processCountableNotification()) {\n        return;\n      }\n      if (_code == 39) {  // 39 series of messages not received in time (and perhaps never arrived)\n        var count = parseInt(msg);\n        num = parseInt(num);\n        for (var i = num - count + 1; i <= num; i++) {\n          this.sessionHandler.onMessageDiscarded(seq, i);\n        }\n\n      } else if (_code == 38) {\n        this.sessionHandler.onMessageDiscarded(seq,num);\n\n      } else if (_code <= 0) {\n        this.sessionHandler.onMessageDeny(seq,_code,msg,num);\n\n      } else {\n        // 34 request deemed invalid by the Metadata Adapter\n        // 35 unexpected error in message processing\n        this.sessionHandler.onMessageError(seq,_code,msg,num);\n      }\n\n    },\n\n    /**\n     * @param tableCode according to the format, it can represent a subscription error (when it is a number),\n     * a CONERR (when null) or a message error (when starting with \"MSG\")\n     * \n     * @param isReqerrFromMsg when true, the error comes from a REQERR; when false, the error comes form a MSGFAIL.\n     * It is meaningful only if tableCode represents a message error\n     */\n    onErrorEvent: function(flag, phase, tableCode, msg, isReqerrFromMsg) {\n      if (tableCode != null && isNaN(tableCode)) {\n        this.onMessageErrorEvent(flag, phase, tableCode, msg, isReqerrFromMsg);\n        return;\n      }\n\n      if (tableCode != null) {\n        // handle REQERR about subscription errors\n        if (!this.preliminaryCheck(null,phase)) {\n          return;\n        }\n        this.sessionHandler.onTableError(tableCode,flag,msg);\n\n      } else {\n        // handle CONERR\n        if (!this.preliminaryCheck(phase,null,null,true)) {\n          return;\n        }\n        this.sessionHandler.forwardError(flag, msg);\n      }\n\n    },\n\n    onControlEvent: function(flag, phase, tableCode, its, flds,kPos,cPos) {\n      if (!this.preliminaryCheck(null,flag == 4 || flag == 5 || flag == 9 ? null : phase)) {\n        return;\n      }\n\n      if (flag == 4) {\n        // handle REQOK about message acknowledgments\n        this.sessionHandler.onMessageAck(tableCode,phase);\n\n      } else if (flag == 5) {\n        // handle MSGDONE\n        if (! this.processCountableNotification()) {\n            return;\n        }\n        this.sessionHandler.onMessageOk(tableCode,phase);\n\n      } else if (flag == 8) {\n        // handle UNSUB\n        if (! this.processCountableNotification()) {\n            return;\n        }\n        this.sessionHandler.onUnsubscription(tableCode);\n\n      } else if (flag == 6) {\n        // handle SUBOK\n        if (! this.processCountableNotification()) {\n            return;\n        }\n        this.sessionHandler.onSubscription(tableCode,its,flds,kPos+1,cPos+1);\n\n      } else if (flag == 9) {\n        // handle CONF (i.e. subscription frequency)\n        // NB \"its\" is the frequency sent by the server \n        if (! this.processCountableNotification()) {\n            return;\n        }\n        this.sessionHandler.onSubscriptionReconf(tableCode,phase,its);\n\n      } else {\n        //?\n        protocolLogger.logDebug(\"Unexpected command received, ignoring\",flag);\n      }\n\n      // flag == 7\n      // in response to a request of add_silent\n      // to signal that the server is synchronized.\n\n    },\n    \n    onServerName: function(name) {\n        this.sessionHandler.onServerName(name);\n    },\n    \n    onMPNREG: function(deviceId, adapterName) {\n        if (! this.processCountableNotification()) {\n            return;\n        }\n        this.sessionHandler.onMpnRegisterOK(deviceId, adapterName);\n    },\n    \n    onMPNOK: function(lsSubId, pnSubId) {\n        if (! this.processCountableNotification()) {\n            return;\n        }\n        this.sessionHandler.onMpnSubscribeOK(lsSubId, pnSubId);\n    },\n    \n    onMPNDEL: function(pnSubId) {\n        if (! this.processCountableNotification()) {\n            return;\n        }\n        this.sessionHandler.onMpnUnsubscribeOK(pnSubId);\n    }\n\n  };\n\n\n  export default PushEvents;\n\n\n\n\n/*END*/\n  //call from the push frame to signal that a connection has been closed\n  // voluntarily. In general it will be a connection that is already obsolete,\n  // but if it were not so, the client should decide whether to try to reopen it\n  // or give up and go immediately to the disconnected state.\n\n  // the Server sends this event in each of the following cases,\n  // which for the moment are not distinguished:\n    // intervention of a new connection that sticks to the same session\n      // (must have been made by hand)\n    // unexpected exception during creation or during activity\n      // (it never happened)\n    // request closure with call destroy\n    // closure requested by the Metadata Adapter via a ConflictingSessionException\n      // (but only if it originated from another page; if it is\n                // a reopening on this same page, the notification\n                // does not arrive here, because it has the old phase)\n    // closure required by identification as OldSession\n      // (but, unless the request was made by hand,\n                // the notification does not arrive here, because it has the old phase)\n    // closure requested by JMX interface\n  // don't send him in these cases\n    // IOException on the connection\n      // (but here could be the retry event, with flag == 3,\n                // caused by the onload, managed by Safari and Chrome)\n    // natural end of content-length\n      // (here in reality it sends it, but the loop event, with flag == 2,\n                // arrives first and sends this out of phase)\n  \n \n","\nimport Executor from \"../../src-tool/Executor\";\nimport LoggerManager from \"../../src-log/LoggerManager\";\nimport Assertions from \"../utils/Assertions\";\nimport Constants from \"../Constants\";\nimport UpdateCopy from \"./UpdateCopy\";\n   \n  var subscriptionsLogger = LoggerManager.getLoggerProxy(Constants.SUBSCRIPTIONS);\n  \n  \n  var SubscriptionsHandler = function(policyBean) {\n      \n    /*\n     * NB \n     * TableIds are internal codes to identify subscriptions.\n     * TableNums are the values of the parameters LS_table (i.e. subIds in TLCP jargon),\n     * are generated by Masters and are communicated asynchronously to Slaves\n     * (as SubscriptionsHandlers).\n     */\n    \n    this.nextId = 0;\n    /* Map from tableIds to Subscriptions */\n    this.tableInfosFromId = {};\n    /* Map from tableNums (i.e. subIds) to tableIds */\n    this.tableIdsFromNum = {};\n    this.generationNumber = 1;\n\n    /* Map from tableIds to Promises */\n    this.promisesFromId = {};\n    /* Map from tableIds to integers (what does it mean?!) */\n    this.promiseQueuesFromId = {};\n    // invariant on each element:\n    // the promise exists iff the promiseQueue exists;\n    // after the startup, the promiseQueue is always > 0;\n    // the promise is created before the corresponding element in tableIdsFromNum\n    \n    this.eh = null;\n    this.policyBean = policyBean;\n    \n    this.controlRequestTimeout = 4000;\n\n    /*\n     * Current phase used to discard promises created in a session \n     * but resolved in a successive session. \n     * It is incremented when a session finishes, \n     * that is when pauseAllTables is called.\n     */\n    this.phase = 0;\n  };\n  \n  SubscriptionsHandler.prototype = {\n      \n    /*public*/ toString: function() {\n      return \"[SubscriptionsHandler]\";\n    }, \n    \n    /*public*/ setControlRequestTimeout: function(val) {\n      this.controlRequestTimeout = val;\n      //PushPage guarantees this value is valid\n    },\n    \n    /*public*/ switchEngineHandler:function(engineHandler) {\n      this.eh = engineHandler;\n    },\n      \n    /*public*/ getAllTables: function() {\n      return this.tableInfosFromId;\n    },\n    \n    /*public*/ addATable: function(tableIn) {\n      var _id = ++this.nextId;\n      \n      subscriptionsLogger.logInfo(\"Subscribing subscription\",tableIn);\n      \n      tableIn.onAdd(_id,++this.generationNumber,this);\n      this.tableInfosFromId[_id] = tableIn;\n\n      this.passTableToEngine(tableIn);\n\n    },\n   \n    /*public*/ removeATable: function(subscriptionOut) {\n\n      if (this.eh && this.eh.isSessionAlive()) {\n        var tNum = subscriptionOut.getTableNumber();\n        if (subscriptionOut.isSubscribing() || subscriptionOut.isPushing()) {\n          if (tNum) {\n            //we possess already a tableNumber for this table\n            this.eh.unsubscribeTable(tNum);\n\n            delete(this.tableIdsFromNum[tNum]);\n          } // else the promise receiving the tablenum will take care of it\n\n        }\n\n      }\n\n      subscriptionsLogger.logInfo(\"Unsubscribing subscription\",subscriptionOut);\n\n      var _id = subscriptionOut.getSubscriptionId();\n      subscriptionOut.onRemove();\n      delete(this.tableInfosFromId[_id]);\n\n      return subscriptionOut;\n      \n    },\n    \n    /*public*/ updateSubscriptionParams: function(subscriptionChanging,changingParams) {\n      if (!this.eh || !this.eh.isSessionAlive() || !subscriptionChanging.isActive()) {\n        //new session will trigger the subscription\n        return;\n      }\n\n\n\n      //>>excludeStart(\"debugExclude\", pragmas.debugExclude);\n      Assertions.verifyOk(subscriptionChanging.isActive(), \"Inactive subscription\")\n      //>>excludeEnd(\"debugExclude\");\n\n        //notify the engine\n        var tableId = subscriptionChanging.getSubscriptionId();\n        if (this.promisesFromId[tableId]) {\n          subscriptionsLogger.logDebug(\"Enqueueing subscription update\",subscriptionChanging);\n          var that = this;\n          this.enqueueToPromise(tableId, function(tableNumber) {\n            subscriptionsLogger.logDebug(\"Resuming subscription update\",subscriptionChanging);\n            that.eh.updateSubscriptionParams(tableNumber,changingParams);\n          })\n        } else {\n            // we must possess already a tableNumber for this table\n            subscriptionsLogger.logDebug(\"Executing subscription update\",subscriptionChanging);\n            var tNum = subscriptionChanging.getTableNumber();\n            this.eh.updateSubscriptionParams(tNum,changingParams);\n        }\n\n    },\n    \n    /*private*/ passTableToEngine: function(tableIn) {\n      if (!this.eh || !this.eh.isSessionAlive()) {\n        //new session will trigger the subscription\n        return;\n      }\n      \n      if (!tableIn.isPaused()) {\n        //removed, pushing, or tableNum received... that's all\n        return;\n      }\n      var tableId = tableIn.getSubscriptionId();\n\n      subscriptionsLogger.logDebug(\"sending Subscription to the engine\");\n\n      var tableNumPromise = this.eh.subscribeTable(tableIn.getRequestParams());\n      if (this.promisesFromId[tableId]) {\n          subscriptionsLogger.logDebug(\"Overriding old promise for table \", tableId);\n      } else {\n          //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n          Assertions.verifyNotOk(this.promisesFromId[tableId], \"Promise unexpected (1)\");\n          Assertions.verifyNotOk(this.promiseQueuesFromId[tableId], \"Promise unexpected (2)\");\n          //>>excludeEnd(\"debugExclude\");\n      }\n      this.promisesFromId[tableId] = tableNumPromise;\n      this.promiseQueuesFromId[tableId] = 0;\n\n      tableIn.onSubmission();\n\n      subscriptionsLogger.logDebug(\"Delaying subscription completion\",tableIn);\n      var that = this;\n      this.enqueueToPromise(tableId, function(tableNumber) {\n\n        subscriptionsLogger.logDebug(\"Resuming subscription completion\",tableIn);\n        if (! that.tableInfosFromId[tableId]) {\n            //was removed\n            if (that.eh) {\n                that.eh.unsubscribeTable(tableNumber);\n            } else {\n                // the engine handler was cleared and this is no longer needed\n            }\n        } else {\n            tableIn.onTableNumber(tableNumber);\n            that.tableIdsFromNum[tableNumber] = tableId;\n        }\n\n      });\n\n    },\n    \n    enqueueToPromise: function(tableId, action) {\n        //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n        Assertions.verifyOk(this.promisesFromId[tableId], \"Promise not found (1)\");\n        if (this.promiseQueuesFromId[tableId] === 0) {\n            // not covered by the assertions as a good case\n        } else {\n            Assertions.verifyOk(this.promiseQueuesFromId[tableId], \"Promise not found (2)\");\n        }\n        //>>excludeEnd(\"debugExclude\");\n        var promise = this.promisesFromId[tableId];\n        this.promiseQueuesFromId[tableId]++;\n        \n        var that = this;\n        var actionPhase = this.phase;\n        promise[\"then\"](function(tableNumber) {\n            if (that.promisesFromId[tableId] != promise) {\n                // overridden (session changed?)\n                subscriptionsLogger.logDebug(\"Ignored old promise triggered for table \", tableId);\n                return;\n            }\n            //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n            Assertions.verifyOk(that.promisesFromId[tableId], \"Promise not found (3)\");\n            Assertions.verifyOk(that.promiseQueuesFromId[tableId], \"Promise not found (4)\");\n            //>>excludeEnd(\"debugExclude\");\n            if (that.promiseQueuesFromId[tableId] > 1) {\n                that.promiseQueuesFromId[tableId]--;\n            } else {\n                delete(that.promisesFromId[tableId]);\n                delete(that.promiseQueuesFromId[tableId]);\n            }\n            \n            // check that session is not changed\n            if (tableNumber != null && actionPhase == that.phase) {\n                action(tableNumber);\n            }\n        },function() {\n            if (that.promisesFromId[tableId] != promise) {\n                // overridden (session changed?)\n                subscriptionsLogger.logDebug(\"Ignored old promise failed for table \", tableId);\n                return;\n            }\n            delete(that.promisesFromId[tableId]);\n            delete(that.promiseQueuesFromId[tableId]);\n        });\n    },\n\n    /*public*/ handleAllWaitingTables: function() {\n      subscriptionsLogger.logDebug(\"Restoring all pending Subscriptions\");\n      for (var _id in this.tableInfosFromId) {\n        this.passTableToEngine(this.tableInfosFromId[_id]);\n      }\n    },\n    \n    /*private*/ pauseTable: function(_table) {\n    //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n      Assertions.verifyNotOk(_table.isOff(), \"Table removed\");\n        //OFF means removed, if it was removed it must not be here now\n    //>>excludeEnd(\"debugExclude\");\n      subscriptionsLogger.logDebug(\"Pausing active Subscription\",_table);\n\n      delete(this.tableIdsFromNum[_table.getTableNumber()]);\n      _table.onPause();\n      if(_table.isSubTable()) {\n        //don't remember about sub tables\n        delete(this.tableInfosFromId[_table.getSubscriptionId()]);\n      }\n      \n      \n    },\n    \n    /*public*/ pauseAllTables: function() {\n      subscriptionsLogger.logDebug(\"Pausing all active Subscriptions\");\n      \n      for (var _id in this.tableInfosFromId) {\n        this.pauseTable(this.tableInfosFromId[_id]);\n      }\n      this.tableIdsFromNum = {};\n      this.phase++;\n    },\n    \n    \n/////EVENTS DISPATCHING\n    \n    callTableByNum: function(tableNum, method) {\n        var _id = this.tableIdsFromNum[tableNum];\n        if (_id) {\n            // we already have a table number, but it is possible that\n            // some previous task is still enqueued in the Promise\n            var tableInfo = this.tableInfosFromId[_id];\n\n            // TODO even though the initial Promise is removed in short time,\n            // this check is always done; it can be relieved by saving some\n            // information in the Subscription object\n            if (this.promisesFromId[_id]) {\n                subscriptionsLogger.logDebug(\"Delaying subscription action\",tableInfo);\n                var that = this;\n                this.enqueueToPromise(_id, function(tableNumber) {\n                    subscriptionsLogger.logDebug(\"Resuming subscription action\",tableInfo);\n                    //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n                    Assertions.verifyValue(tableNumber, tableNum, \"Wrong table number\");\n                    //>>excludeEnd(\"debugExclude\");\n                    if (that.tableIdsFromNum[tableNum] != _id) {\n                        // perhaps it was removed in the meantime\n                    } else {\n                        var tableInfo = that.tableInfosFromId[_id];\n                        if (tableInfo) {\n                            method.apply(tableInfo);\n                        } else {\n                            // perhaps it was removed in the meantime\n                        }\n                    }\n                });\n\n            } else {\n                // subscriptionsLogger.logDebug(\"Executing subscription action\",tableInfo);\n                if (tableInfo) {\n                    method.apply(tableInfo);\n                } else {\n                    // perhaps it was removed in the meantime\n                }\n            }\n\n        } else {\n            // we are still waiting for the table number to be received;\n            // unfortunately, we don't know which Promise is the one involved;\n            // we can only find out all promises that are currently unfulfilled\n            // (note that, since actions are sent asynchronously by the Promise,\n            // we cannot ask that to the Promise itself\n        \t\n            subscriptionsLogger.logDebug(\"Delaying subscription action\",tableNum);\n            var that = this;\n\n            // TODO this has a quadratic effort, so it does not scale with the number\n            // of subscriptions waiting to be issued when the engine is found\n            var n = 0;\n            for (var tableId in this.promisesFromId) {\n                var sub = this.tableInfosFromId[tableId];\n                if (sub) {\n                    if (! sub.getTableNumber()) {\n                        (function(tableId) {\n                            that.enqueueToPromise(tableId, function(tableNumber) {\n                                if (tableNumber == tableNum) {\n                                    subscriptionsLogger.logDebug(\"Resuming subscription action\",tableNum);\n                                    if (that.tableIdsFromNum[tableNum] != tableId) {\n                                        // perhaps it was removed in the meantime\n                                    } else {\n                                        var tableInfo = that.tableInfosFromId[tableId];\n                                        if (tableInfo) {\n                                            method.apply(tableInfo);\n                                        } else {\n                                            // perhaps it was removed in the meantime\n                                        }\n                                    }\n                                }\n                            });\n                        })(tableId);\n                        // an intermediate call is needed here,\n                        // otherwise \"tableId\" would not be considered with its current value\n                        // in the closure, but with its last value after all the cycles\n                        // (because javascript extends its scope to the whole hosting function)\n                        n++;\n                    } else {\n                        //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n                        Assertions.verifyDiffValue(sub.getTableNumber(), tableNum, \"Unexpected table number\");\n                        //>>excludeEnd(\"debugExclude\");\n                    }\n                } else {\n                    // perhaps it was removed in the meantime\n                }\n            }\n            subscriptionsLogger.logDebug(\"Subscription action had to be delayed on multiple instances\",n);\n        }\n    },\n    \n    updatePage: function(args, snap) { \n        // numero della table dell'update corrente\n        var tableNum = args[0];\n        \n        this.callTableByNum(tableNum, function() {\n            // TEMPORANEAMENTE l'indice su args corrisponde con il code del campo + 1\n            // basterebbe fare due shift in questo punto per rinormalizzare tutto\n            this.update(UpdateCopy(args,true),snap,false);\n        });\n    },\n    \n\n    onLostUpdatesEvent: function(tableNum,_item,lostUpdates) {\n        this.callTableByNum(tableNum, function() {\n            this.lostUpdates(_item,lostUpdates);\n        });\n    },\n    \n    onEndOfSnapshotEvent: function(tableNum,_item) {\n        this.callTableByNum(tableNum, function() {\n            this.endOfSnapshot(_item);\n        });\n    },\n    \n    onClearSnapshotEvent: function(tableNum,_item) {\n        this.callTableByNum(tableNum, function() {\n            this.clearSnapshot(_item);\n        });\n    },\n    \n    errorEvent: function(tableNum, flag, msg) {\n        this.callTableByNum(tableNum, function() {\n            this.serverDeny(flag, msg);\n        });\n    },\n    \n    subscriptionEvent: function(tableNum,kPos,cPos,itms,flds) {\n        this.callTableByNum(tableNum, function() {\n            this.onStartPush(kPos,cPos,itms,flds);\n        });\n    },\n    \n    unsubscriptionEvent: function(tableNum) {\n        this.callTableByNum(tableNum, function() {\n            this.onStopPush();\n        });\n    },\n    \n    doSubscriptionReconf: function(tableNum, frequency) {\n        this.callTableByNum(tableNum, function() {\n            this.configure(frequency);\n        });\n    }\n\n    \n  };\n  \n  export default SubscriptionsHandler;\n  \n\n  ","import Executor from \"../../src-tool/Executor\";\nimport List from \"../../src-tool/List\";\nimport Assertions from \"../utils/Assertions\";\n  \n  var MessageProxy = function(engineHandler) {\n    this.lastMessageListener = -1;\n    this.pendingMessageListeners = {};\n    this.pendingMessages = {};\n    this.pendingMessagesOnNetwork = {};\n    this.pendingMLCount = 0;\n    this.engineHandler = engineHandler;\n    this.queuedMessages = new List();\n  };\n  \n  MessageProxy.prototype = {\n      \n    /*public*/ switchEngineHandler: function(engineHandler) {\n      this.engineHandler = engineHandler;\n    },  \n      \n    /*public*/ getMessageListenerProxy: function(message,listener) {\n      this.lastMessageListener++;\n      this.pendingMessageListeners[this.lastMessageListener] = listener;\n      this.pendingMessages[this.lastMessageListener] = message;\n      this.pendingMessagesOnNetwork[this.lastMessageListener] = false;\n      this.pendingMLCount++;\n      return this.lastMessageListener;\n      /*\n      var proxy = {};\n      proxy.pageNum = this.engineHandler.getPageNumber();\n      proxy.prog = this.lastMessageListener;\n      return proxy;\n      */\n    },\n    \n    /*private*/ getListener: function(listenerProg) {\n      return this.pendingMessageListeners[listenerProg];      \n    },\n    \n    /*private*/ getOriginalMessage: function(listenerProg) {\n      return this.pendingMessages[listenerProg];      \n    },\n    \n    /*private*/ wasSentOnNetwork: function(listenerProg) {\n      return this.pendingMessagesOnNetwork[listenerProg];      \n    },\n    \n    /*public*/ cleanMessageListeners: function() {\n      // Chiamato quando si perde l'Engine, oppure quando avviene una disconnessione;\n      // nel secondo caso, lo strato di comunicazione garantisce che non si\n      // riceveranno altre chiamate dall'Engine legate alla sessione finita.\n      // Quindi possiamo ripartire da uno stato vuoto senza rischio di sovrapposizioni.\n\n      // clear the enqueueWhileDisconnected queue if anything is there (if a message \n      // with a listener is there we will fire the on abort (such is listener is\n      // in the pendingMessageListeners collection)\n      this.clearQueuedMessages();\n      \n\n      // dobbiamo chiamare i listeners nell'ordine giusto;\n      // non vogliamo ciclare a vuoto su un array arbitrariamente lungo;\n      // gli elementi interessati dovrebbero essere tutti verso la fine;\n      \n      var _elements = [];\n      for (var i in this.pendingMessageListeners) {\n        _elements.push(i);\n      }\n      \n      _elements.sort(function(a, b) {  \n        return a - b;  \n      });\n      \n      for (var i = 0; i < _elements.length; i++) {\n        this.messageAbort(_elements[i]);\n      }\n      \n      /*\n      var _elements = {};\n      var prog = 0;\n      for (var i = this.lastMessageListener; i >= 0; i--) {\n        if (prog == this.pendingMLCount) {\n          break;\n        }\n        if (this.pendingMessageListeners[i]) {\n          _elements[prog] = i;\n          prog++;\n        }\n      }\n      for (var i = prog - 1; i >= 0; i--) {\n        this.messageAbort(_elements[i]);\n      }*/\n    //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n      Assertions.verifyValue(this.pendingMLCount,0, \"Unexpected pending messages\");\n    //>>excludeEnd(\"debugExclude\");\n      this.lastMessageListener = -1;\n      this.pendingMessageListeners = {};\n      this.pendingMessages = {};\n      this.pendingMessagesOnNetwork = {};\n      this.pendingMLCount = 0;\n    },\n    \n    /*private*/ clean: function(listenerProg) {\n      delete this.pendingMessageListeners[listenerProg];\n      delete this.pendingMessages[listenerProg];\n      delete this.pendingMessagesOnNetwork[listenerProg];\n      this.pendingMLCount--;\n    },\n    \n    /*public*/  messageOnNetwork: function(listenerProg) {\n      var listener = this.getListener(listenerProg);\n      if (listener) {\n        this.pendingMessagesOnNetwork[listenerProg] = true;\n      }\n    },\n    \n//////////MESSAGE QUEUE\n    enqueueMessage: function(msg,sequence,listener,timeout) {\n      this.queuedMessages.add({msg:msg,sequence:sequence,listener:listener,timeout:timeout});\n    },\n    \n    /*private*/ clearQueuedMessages: function() {\n      var that = this;\n      this.queuedMessages.forEach(function(el) {\n        //abort: call it here or it will never be called as this message does not have a listener proxy\n        that.fireEvent(\"onAbort\",el.listener,[el.msg,false]);\n      });\n      this.queuedMessages.clean();\n    },\n    \n    handleAllWaitingMessages: function() {\n      var that = this;\n      this.queuedMessages.forEach(function(el) {\n        //var listenerProxy = this.getMessageListenerProxy(el.msg,el.listener);\n        that.forwardMessage(el.msg,el.sequence,el.listener,el.timeout);\n      });\n      this.queuedMessages.clean();\n    },\n    \n    forwardMessage: function(msg,sequence,listener,timeout) {\n      var listenerProxy = null;\n      if (listener) {\n        // non possiamo passare un listener alla pagina Engine:\n        // lo sostituiamo con un indice in un array locale\n        listenerProxy = this.getMessageListenerProxy(msg,listener);\n      }\n      this.engineHandler.forwardMessage(msg,sequence,listenerProxy,timeout);\n    },\n    \n//////////EVENTS DISPATCHING\n    \n    fireEvent: function(event,listener,params) {\n      if (!listener || !listener[event]) {\n        return;\n      }\n      Executor.addTimedTask(listener[event],0,listener,params);\n    },\n    \n    /*public*/ messageComplete: function(listenerProg) {\n      var listener = this.getListener(listenerProg);\n      \n      this.fireEvent(\"onProcessed\",listener,[this.getOriginalMessage(listenerProg)]);\n      \n      this.clean(listenerProg);\n     \n    },\n    \n    /*public*/ messageError: function(listenerProg,_code,msg) {\n      var listener = this.getListener(listenerProg);\n      if (_code != 32 && _code != 33) {\n          /* errors 32 and 33 must not be notified to the user\n           * because they are due to late responses of the server */\n          this.fireEvent(\"onError\",listener,[this.getOriginalMessage(listenerProg)]);\n      }\n      \n      this.clean(listenerProg);\n    },\n    \n    /*public*/ messageDenied: function(listenerProg,_code,msg) {\n      var listener = this.getListener(listenerProg);\n      \n      this.fireEvent(\"onDeny\",listener,[this.getOriginalMessage(listenerProg),_code,msg]);\n           \n      this.clean(listenerProg);\n    },\n    \n    /*public*/ messageDiscarded: function(listenerProg) {\n      var listener = this.getListener(listenerProg);\n      \n      this.fireEvent(\"onDiscarded\",listener,[this.getOriginalMessage(listenerProg)]);\n      \n      this.clean(listenerProg);\n    },\n    \n    /*private*/ messageAbort: function(listenerProg) {\n      var listener = this.getListener(listenerProg);\n     \n      this.fireEvent(\"onAbort\",listener,[this.getOriginalMessage(listenerProg),this.wasSentOnNetwork(listenerProg)]);\n      \n      this.clean(listenerProg);\n    }    \n    \n  };\n  \n  export default MessageProxy;\n  \n","import HTTPEncoder from \"../encoders/HTTPEncoder\";\nimport Utils from \"../Utils\";\nimport nodeUtils from 'node-utils';\n\n  function retFalse() {\n    return false;\n  }\n\n  function retTrue() {\n    return true;\n  }\n\n  var BASIC_ENCODER = new HTTPEncoder();\n\n  /**\n   * ServerConnection interface to be implemented for a ServerConnection type to be used with ControlConnectionHandler\n   * or to connect with the server\n   * @private\n   */\n  var ServerConnection = function() {\n    for(var i in  {_load:true}) {\n      //used by implementation to call super methods without using the static string everywhere (it's a trick)\n      this._loadName=i;\n    }\n\n    //implementation MUST declare the constr variable with their constructon on each instance.\n    this.constr = ServerConnection;\n\n  };\n\n  ServerConnection.attachPublicStaticMethods = function(_class,obj) {\n    for (var i in obj) {\n      if (obj[i] === true) {\n        _class[i] = retTrue;\n      } else if (obj[i] === false) {\n        _class[i] = retFalse;\n      } else {\n        _class[i] = obj[i];\n      }\n    }\n  };\n\n  ServerConnection.attachPublicStaticMethods(ServerConnection,{\n    /**\n     * @static\n     * whenever this Class can be used in this browser.\n     * It is possible to return true even if the connection is not available at the moment\n     * in such case any call to the load method of any instance of this class must return null; btw\n     * such situation can't go on forever so that after a timeout (handled by the class) this method and\n     * the load method of any instance of this class MUST return false.\n     *\n     * If the load method of an instance of this class returns false this method MUST return false too\n     * @param serverAddress the address this class is going to be used for\n     * @private\n     */\n    isAvailable: false,\n    isCrossSite: false,\n    isCrossProtocol: false,\n    areCookiesGuaranteed: false,\n    attachEngineId: false,\n    isStreamEnabled: false,\n    canUseCustomHeaders: false\n  });\n\n\n  ServerConnection.prototype = {\n\n    /**\n     * if possible closes the connection, otherwise do nothing\n     * @private\n     */\n    _close: function() {\n      return;\n    },\n\n    sessionLoad: function(request,phase,responseCallback,errorCallback,connectionEndCallback,engId) {\n\n      return this._load(request,phase,responseCallback,errorCallback,connectionEndCallback);\n    },\n\n    /**\n     * Method that loads a requests\n     * @param {Object} request\n     * @param {Number} phase the phase of the request, must be returned as the second parameter of the callbacks\n     * @param {Function} responseCallback this callback must be called when the request is complete. The first parameter\n     * must be the result fetched while the second one is the phase and must be the same value passed to the load method.\n     * In case the ServerConnection implementation does not handle server response for any reason it must call the responseCallback\n     * callback with the first parameter set as null (for instance, the FakeNotifyConnection calls the callback after 1 second with no\n     * idea of what has happened to the request; you may want to extend such abstract class if once sent you don't have any\n     * idea on what happens to the request).\n     * @param {Function} errorCallback this callback must be called if the request fails in any way.\n     * It's completely alternative to the response callback (any load call produces only one between a responseCallback call\n     * and a errorCallback call) It has 2 parameters, the first one represents the error (you may want to use an\n     * Exception instance) the other one is the phase and must be the same value passed to the load method\n     * @param {boolean} connectionEndCallback a callback to be called when the connection class is unsure if the connection\n     * ended correctly or was broken; may be useful on Streaming connections implemented with XHR\n     *\n     * @return {boolean} true if the request was (presumably) sent, null if the request can't be sent but\n     * probably can be sent in the future or false if there is no way this instance can send the request;\n     * if this method returns null after a certain number of calls MUST return true or false;\n     * @private\n     */\n    _load: function(request,phase,responseCallback,errorCallback,connectionEndCallback) {\n      return false;\n    },\n\n    getEncoder: function() {\n      return BASIC_ENCODER;\n    }\n  };\n\n//START_WEB_JSDOC_EXCLUDE\n  ServerConnection.getGlobalCookiesForNode = nodeUtils.getGlobalCookiesForNode;\n  ServerConnection.addGlobalCookiesForNode = nodeUtils.addGlobalCookiesForNode;\n//END_WEB_JSDOC_EXCLUDE\n  export default ServerConnection;\n","import Encoder from \"./Encoder\";\nimport Inheritance from \"../../src-tool/Inheritance\";\nimport Utils from \"../Utils\";\n  \n  var unique = 1;\n  \n  var names = {\n      encodeMessageRequest: \"encodeMessageRequest\",\n      encodeControlRequest: \"encodeControlRequest\",\n      encodeDestroyRequest: \"encodeDestroyRequest\",\n      encodeHeartbeatRequest: \"encodeHeartbeatRequest\",\n      encodeLogRequest: \"encodeLogRequest\"\n  };\n  names = Utils.getReverse(names); \n  \n  var HTTPEncoder = function() {\n    \n  };\n  \n  HTTPEncoder.prototype = {\n      /*private*/ encodeMessageRequest: function(params,bridge,sessionId,extraParams) {\n        extraParams = Utils.extendObj(extraParams,{\"LS_session\": sessionId});\n        return this._callSuperMethod(HTTPEncoder,names['encodeMessageRequest'],[params,bridge,sessionId,extraParams]);\n      },\n      \n      /*private*/ encodeControlRequest: function(params,bridge,sessionId,extraParams) {\n        extraParams = Utils.extendObj(extraParams,{\"LS_session\": sessionId});\n        return this._callSuperMethod(HTTPEncoder,names['encodeControlRequest'],[params,bridge,sessionId,extraParams]);\n      },\n      \n      /*private*/ encodeDestroyRequest: function(params,bridge,sessionId,extraParams) {\n        return this._callSuperMethod(HTTPEncoder,names['encodeDestroyRequest'],[params,bridge,sessionId,extraParams]);\n      },\n      \n      /*private*/ encodeHeartbeatRequest: function(params,bridge,sessionId,extraParams) {\n        if (sessionId) {\n          //heartbeat can be sent with or without LS_session\n          extraParams = Utils.extendObj(extraParams,{\"LS_session\": sessionId});\n        }\n        extraParams = Utils.extendObj(extraParams,{\"LS_unique\": unique++});\n        return this._callSuperMethod(HTTPEncoder,names['encodeHeartbeatRequest'],[params,bridge,sessionId,extraParams]);\n      },\n      \n      /*private*/ encodeLogRequest: function(params,bridge,sessionId,extraParams) {\n        if (sessionId) {\n          //send_log can be sent with or without LS_session\n          extraParams = Utils.extendObj(extraParams,{\"LS_session\": sessionId});\n        }\n        extraParams = Utils.extendObj(extraParams,{\"LS_unique\": unique++});\n        return this._callSuperMethod(HTTPEncoder,names['encodeLogRequest'],[params,bridge,sessionId,extraParams]);\n      },\n      \n      expand: function(params,unquotedParam) {\n        var data = \"\";\n        if (params) {\n          for (var name in params) {\n            if (name !== unquotedParam) {\n              data += name+\"=\"+params[name]+\"&\";\n            } else {\n              data += name+\"=\"+encodeURIComponent(params[name])+\"&\";\n            }\n          }\n        }\n        return data;\n      },\n      \n      //unquoted requests not supported, so we encode parameters that are not encoded and we do not attach the LS_unq parameter\n      encodeUnqRequest: function(params,extraParams,unquotedParam) {\n        var data = this.expand(params,unquotedParam);\n        data += this.expand(extraParams,unquotedParam);\n        \n        return data;\n      }\n  };\n  \n  \n  Inheritance(HTTPEncoder,Encoder);\n  export default HTTPEncoder;\n\n","import Request from \"../net/Request\";\nimport ControlRequest from \"../control/ControlRequest\";\nimport Utils from \"../Utils\";\nimport Constants from \"../Constants\";\n  \n  \n  var SEND_MESSAGE = \"msg\";\n  var SEND_LOG = \"send_log\";\n  var CONTROL = \"control\";\n  var HEARTBEAT = \"heartbeat\";\n  \n  var MEX_PARAM = \"LS_message\";\n  var LEN_PARAM = \"LS_unq\";\n  \n  function getCustomizedPath(_type) {\n    if (_type == ControlRequest.MESSAGE) {\n      return SEND_MESSAGE;\n    } else  if (_type == ControlRequest.LOG) { \n      return SEND_LOG;\n    } else  if (_type == ControlRequest.HEARTBEAT) { \n      return HEARTBEAT;\n    } else {\n      return CONTROL;\n    }\n  }\n  \n  \n  var Encoder = function() {\n    \n  };\n  \n  \n  Encoder.prototype = {\n      \n      toString: function() {\n        return \"[Encoder]\";\n      },\n      \n      initRequest: function(queue,cookieRequired,extraHeaders) {\n        //(queue); //sets file and method, not server\n        \n        var req = new Request();\n        var path = getCustomizedPath(queue.getBatchType());\n        var ext = this.getExt();\n        req.setFile(path + ext);\n        req.setMethod(Request._POST);\n        req.setCookieFlag(cookieRequired);\n        req.setExtraHeaders(extraHeaders);\n        \n        return req;\n        \n      },\n      \n      /**\n       * @return null if all requests are discarded in the process \n       */\n      /*private*/ encode: function(queue,sessionId,first) {\n        var data = first ? \"\" : \"\\r\\n\";\n        \n        while (queue.getLength() > 0) {\n        \n          \n          var controlRequest = queue.firstRequest();\n     \n         \n          var bridge = controlRequest.getBridge();\n          var requestType = controlRequest.getType();\n          \n          \n          /*if (requestType == ControlRequest.ADD && bridge.verifySuccess()) {\n            //verifySuccess returns true if the pushPagehandler disappeared or if a deleteTable event was received\n            //so that getPushPageHandlerFromTableNumber returns null\n            queue.shift();\n          } else if (requestType == ControlRequest.REMOVE && bridge.verifySuccess()) {\n            //if the related add was not sent, it's useless to send the delete request\n            //there is no risk that the related add request is somewhere in queue because each tableNumber\n            //is related to a single couple of ADD-REMOVE requests and the delete can't arrive before the add. \n            //BTW even if the add request is on the queue it will be discarded because the deleteTable event\n            //removes the table reference from the pushPageHandlers so that the isSubscribed method returns true so that \n            //the add is not sent anyway\n            bridge.notifyAborted();\n            queue.shift();\n          \n          } else*/ if (bridge && bridge.verifySuccess()) {\n            //if verify success is true means that an answer arrived while the request was in the queue.\n            //In case of a send message if we send it we risk an LS_msg_num=undefined message cause HTTPEncoder may not be able to get a prog number for the handled message\n            bridge.notifyAborted();\n            queue.shift();\n            \n          } else {\n            \n            var params = controlRequest.getRequest();\n            \n            if (requestType == ControlRequest.MESSAGE) {\n              return data+this.encodeMessageRequest(params,bridge,sessionId);\n            \n            } else if (requestType == ControlRequest.DESTROY) {\n              return data+this.encodeDestroyRequest(params,bridge,sessionId);\n              \n            } else if (requestType == ControlRequest.HEARTBEAT) {\n              return data+this.encodeHeartbeatRequest(params,bridge,sessionId);\n              \n            } else if (requestType == ControlRequest.LOG) {\n              return data+this.encodeLogRequest(params,bridge,sessionId);\n              \n            } else { //CHANGE_SUB - CONSTRAINT - FORCE_REBIND - ADD - REMOVE\n              return data+this.encodeControlRequest(params,bridge,sessionId);\n            }\n            \n          }\n        \n        \n        }\n        return null;\n        \n      },\n      \n      expand: function(params,unquotedParam) {\n        var data = \"\";\n        if (params) {\n          for (var name in params) {\n            if (name !== unquotedParam) {\n              data += name+\"=\"+params[name]+\"&\";\n            } \n          }\n        }\n        return data;\n      },\n    \n      \n      /*private*/ encodeRequest: function(params,extraParams,sessionId) {\n        var data = this.expand(params);\n        data += this.expand(extraParams);\n        \n        \n        \n        return data;\n      },\n      \n      encodeUnqRequest: function(params,extraParams,unquotedParam,sessionId) {\n        var data = this.expand(params,unquotedParam);\n        data += this.expand(extraParams,unquotedParam);\n        \n        if (params[unquotedParam]) {\n          data += unquotedParam+\"=\"+params[unquotedParam];\n        } else if (extraParams) {\n          data += unquotedParam+\"=\"+extraParams[unquotedParam];\n        }\n\n        var unq = data.length;\n        \n        return LEN_PARAM+\"=\"+unq+\"&\"+data;\n      },\n      \n      wrapUp: function(requestData) {\n        // if there is no data, return a blank line because the server dislikes empty requests\n        return requestData ? requestData : \"\\n\";\n      },\n      \n      /*protected*/ getExt: function() {\n        return \".txt\" + \"?LS_protocol=\" + Constants.TLCP_VERSION;\n      },\n      \n      /*protected*/ getFixedOverhead: function(fileName) {\n        return 0;\n      },\n      \n      /*protected*/ getInvisibleOverhead: function(data) {\n        return 2; //the \\r\\n that separates requests one from the following \n      },\n      \n      /*protected*/ encodeControlRequest: function(params,bridge,sessionId,extraParams) {\n        return this.encodeRequest(params,extraParams,sessionId);\n      },\n      \n      /*protected*/ encodeDestroyRequest: function(params,bridge,sessionId,extraParams) {\n        // here the session ID to be specified may not be the current one\n        // and it is already included among the base parameters\n        return this.encodeRequest(params,extraParams,sessionId);\n      },\n      \n      /*protected*/ encodeHeartbeatRequest: function(params,bridge,sessionId,extraParams) {\n        return this.encodeRequest(params,extraParams,sessionId);\n      },\n      \n      /*protected*/ encodeLogRequest: function(params,bridge,sessionId,extraParams) {\n        return this.encodeRequest(params,extraParams,sessionId);\n      },\n      \n      /*protected*/ encodeMessageRequest: function(params,bridge,sessionId,extraParams) {\n        //    righe di questo tipo non sono ammesse se la richiesta viene sovraencodata tramite il parametro LS_querystring (il vecchio caso \"form\").\n        //encodeURIComponent(LS_message)\n        return this.encodeUnqRequest(params,extraParams,MEX_PARAM,sessionId);\n      }\n  };\n  \n  \n\n  \n  export default Encoder;\n  \n\n","import Environment from \"../../src-tool/Environment\";\nimport Utils from \"../Utils\";\n  \n  \n  var _RGX1 = \"^https?://(?:[a-z][a-z0-9\\-]+\\.)*\";\n  //var _RGX1 = \"^https?://([a-z\\d\\-]+\\.)*\";\n  var _RGX2 = \"(?:/|$|:)\";\n\n  var Request = function(_path,_file,_data,_method,cookieFlag,extraHeaders) {\n    this.setPath(_path);\n    this.setFile(_file);\n    this.setData(_data);\n    this.setMethod(_method);\n    this.setCookieFlag(cookieFlag);\n    this.setExtraHeaders(extraHeaders);\n  };\n  \n  Request._GET = \"GET\";\n  Request._POST = \"POST\";\n\n\n  Request.prototype = {\n    toString: function(){\n      return [\"[\",this._path,this._file,this._data,this._method,\"]\"].join(\"|\");\n    },\n    \n    setPath: function(_path) {\n      while (_path && _path.substring(_path.length-1) == \"/\") {\n        _path = _path.substring(0,_path.length-1);\n      }\n      this._path = _path;\n    },\n    \n    setFile: function(_file) {\n      while (_file && _file.substring(0,1) == \"/\") {\n        _file = _file.substring(1);\n      }\n      this._file = _file;\n    },\n    \n    setMethod: function(_method) {\n      this._method = _method || Request._POST;\n    },\n    \n    setCookieFlag: function(cookieFlag) {\n      this.cookieFlag = cookieFlag || false;\n    },\n    \n    setExtraHeaders: function(extraHeaders) {\n      this.extraHeaders = extraHeaders || null;\n    },\n    \n    setData: function(_data) {\n      this._data = _data;\n    },\n    \n    extendData: function(moreData) {\n      if (!this._data) {\n        this.setData(moreData);\n      } else if (!this.containsData(moreData)) {\n        this._data += moreData;\n      }\n    },\n    \n    containsData: function(someData) {\n      return this._data && this._data.indexOf(someData) > -1;\n    },\n    \n    ////\n    \n    getPath: function() {\n      return this._path;\n    },\n    \n    getFile: function() {\n      return this._file;\n    },\n    \n    getUrl: function() {\n      if (this._file) {\n        return this._path+\"/\"+this._file;\n      } else {\n        return this._path;\n      }\n    },\n    \n    getCookieFlag: function() {\n      return this.cookieFlag;\n    },\n    \n    getExtraHeaders: function(extraHeaders) {\n      return this.extraHeaders;\n    },\n    \n    getData: function() {\n      return this._data;\n    },\n    \n    getUrlWithParams: function(sep) {\n      if (this._data) {\n        return this.getUrl()+\"?\"+this._data;\n      } else {\n        return this.getUrl();\n      }\n    },\n    \n    getMethod: function() {\n      return this._method;\n    },\n    \n    clone: function() {\n      return new Request(this._path,this._file,this._data,this._method,this.cookieFlag,this.extraHeaders);\n    },\n    \n    isRelativeRequest: function() {\n      return !(this._path.indexOf(\"http://\") == 0 || this._path.indexOf(\"https://\") == 0 || this._path.indexOf(\"file:///\") == 0);\n    },\n    \n    /**\n     * \n     * @param theDomain\n     * @param prot in the form \"scheme:\"\n     */\n    isSameDomain: function(theDomain,prot) {\n      \n      if (!Environment.isBrowser()) {\n        return false;\n      }\n      \n      if (this.isRelativeRequest()) {\n        //relative address\n        return Environment.isWebWorker() ? location.hostname == theDomain :  Utils.getDomain() == theDomain;\n        //on webworkers the document.domain is not accessible, the best aproximation is the location.hostname value\n        \n      } else if (prot) {\n        if (!this.isSameProtocol(prot)) {\n          //may be same domain but on a different protocol, we consider it not same domain\n          return false;\n        }\n        \n        if (prot == \"file:\") {\n          //file requests have empty domain\n          return theDomain == \"\";\n        }\n        \n      }\n      \n      //convert the domain so that it can be used as part of a regexp\n      theDomain = theDomain.replace(\".\",\"\\.\");\n      //then make the regexp\n      var rgx = new RegExp(_RGX1+theDomain+_RGX2,\"i\");\n      \n      //and test it\n      return rgx.test(this._path);\n      \n    },\n    \n   \n    isSameProtocol: function(prot) {\n      \n      if (!Environment.isBrowser()) {\n        return false;\n      }\n      \n      if (prot.indexOf(\":\") != prot.length-1) {\n        //wrong form\n        return false;\n      }\n      \n      return this.isRelativeRequest() ? location.protocol == prot : this._path.indexOf(prot) == 0;\n    },\n    \n    isCrossSite: function() {\n      if (!Environment.isBrowser()) {\n        return true;\n      }\n      \n      var refDomain = Environment.isWebWorker() ? location.hostname :  Utils.getDomain(); \n      \n      return !this.isSameDomain(refDomain,location.protocol);\n    },\n    \n    isCrossProtocol: function() {\n      if (!Environment.isBrowser()) {\n        return true;\n      }\n      return !this.isSameProtocol(location.protocol);\n    }\n    \n  };\n  \n  Request.aboutBlank = new Request(\"about:blank\");\n  \n  \n  export default Request;\n  \n","import StandardHandler from \"../cross-tab/StandardHandler\";\nimport CallDefinition from \"../cross-tab/CallDefinition\";\nimport LoggerManager from \"../../src-log/LoggerManager\";\nimport Constants from \"../Constants\";\nimport Executor from \"../../src-tool/Executor\";\n\n  var simple = CallDefinition.simple;\n  var simpleWithSession = CallDefinition.session;\n  //var simpleWithResponse = CallDefinition.simpleWithResponse;\n  var simpleWithResponseAndTimeout = CallDefinition.simpleWithResponseAndTimeout;\n  var sessionWithResponse = CallDefinition.sessionWithResponse;\n\n  var methods = {\n    onClientConfigurationChange: simple,\n    callConnect: simpleWithSession,\n    callDisconnect: simpleWithSession,\n    pong: simpleWithResponseAndTimeout,\n    subscribeTable: sessionWithResponse,\n    unsubscribeTable: simpleWithSession,\n    updateSubscriptionParams: simpleWithSession,\n    forwardMessage: simpleWithSession,\n    forwardLog: simple,\n    clientDeath: simple,\n    callDisconnectAndReconnect: simpleWithSession\n  };\n  \n  var sharingLogger = LoggerManager.getLoggerProxy(Constants.SHARING);\n\n  var NewEngineHandler = function (client) {\n    this.client = client;\n    this.sessionAlive = false;\n    this.sessionPhase = -1;\n    this.engineId = null;\n    this.engineType = \"local\";\n  };\n\n  NewEngineHandler.methods = methods;\n\n  NewEngineHandler.prototype = {\n\n    setPushPageHandler: function(pushpageHandler) {\n      this.target = pushpageHandler; //for direct communication\n    },\n\n    setEngineId: function(id) {\n      sharingLogger.logInfo(\"New engine created\", this.engineType, id);\n      this.engineId = id;\n    },\n\n    getEngineId: function() {\n      return this.engineId;\n    },\n\n    dispose: function() {\n      this.client = null;\n      //future calls will get an exception that will cause an onPushPageLost event in the PushPage collection if remote\n    },\n\n    setSessionPhase: function(ph) {\n      this.sessionPhase = ph;\n    },\n\n    isSessionAlive: function() {\n      return this.sessionAlive;\n    },\n\n//calls from pushpage handler\n\n    onEngineConfigurationChange: function(objClass,prop,val) {\n      var toSet = objClass == \"ConnectionDetails\" ? this.client._connection : (objClass == \"ConnectionOptions\" ? this.client._policy : this.client._configuration);\n      toSet.simpleSetter(prop, val);\n    },\n\n    onSessionEnd: function(ph) {\n      this.sessionPhase = ph;\n      if (this.sessionAlive) {\n        this.sessionEnd(ph);\n      }\n    },\n\n    sessionEnd: function(ph) {\n      this.sessionAlive = false;\n      this.client.sessionEnd();\n    },\n\n    onSessionStart: function(ph) {\n      this.sessionPhase = ph;\n      this.sessionAlive = true;\n      this.client.sessionStart();\n    },\n\n    /**\n     * @param noHopeToAttachToAnotherEngine if true, the client must not try to attach to another engine\n     */\n    onEngineDeath: function(suiciding, noHopeToAttachToAnotherEngine) {\n        sharingLogger.logInfo(\"Engine\", this.engineId + \" is dead\");\n        if (this.client) {\n            this.sessionEnd(-1);\n            this.client.engineMourningRoom(suiciding, noHopeToAttachToAnotherEngine);          \n        }\n    },\n\n    checkDeath: function() {\n      var that = this;\n      this.pong()[\"then\"](function() {\n        //if didn't fail we're ok\n      },function() {\n        if (that.client) {\n          that.onEngineDeath();\n        }\n      });\n    },\n\n    onEngineDying: function() {\n      //there is the possibility that the engine is dead,\n      //but also a resurrection is possible\n      //so first check right now if the engine is still there\n      this.checkDeath();\n      //then check in 1 second\n      Executor.addTimedTask(this.checkDeath,1000,this);\n    },\n\n    onServerError: function(flag,msg) {\n      this.client.serverError(flag,msg)\n    },\n\n    onStatusChange: function(newStatus) {\n      this.client.cacheEngineStatus(newStatus);\n    },\n\n    onSubscription: function(tableCode,keyPos,commandPos,numOfSubscribedItems,numOfSubscribedFields) {\n      this.client.getTablesHandler().subscriptionEvent(tableCode,keyPos,commandPos,numOfSubscribedItems,numOfSubscribedFields);\n    },\n\n    onSubscriptionError: function(tableCode,code,msg) {\n      this.client.getTablesHandler().errorEvent(tableCode,code,msg);\n    },\n\n    onUnsubscription: function(tableCode) {\n      this.client.getTablesHandler().unsubscriptionEvent(tableCode);\n    },\n\n    onEndOfSnapshot: function(tableCode,item) {\n      this.client.getTablesHandler().onEndOfSnapshotEvent(tableCode,item);\n    },\n\n    onUpdate: function(args,snap) {\n      this.client.getTablesHandler().updatePage(args,snap);\n    },\n\n    onLostUpdates: function(tableCode,item,losts) {\n      this.client.getTablesHandler().onLostUpdatesEvent(tableCode,item,losts);\n    },\n\n    onClearSnapshot: function(tableCode,item) {\n      this.client.getTablesHandler().onClearSnapshotEvent(tableCode,item);\n    },\n\n    onMessageDiscarded: function(prog) {\n      this.client.getMessageProxy().messageDiscarded(prog);\n    },\n\n    onMessageDenied: function(prog,_code,msg) {\n      this.client.getMessageProxy().messageDenied(prog, _code, msg);\n    },\n\n    onMessageError: function(prog,_code,msg) {\n      this.client.getMessageProxy().messageError(prog, _code, msg);\n    },\n\n    onMessageComplete: function(prog) {\n      this.client.getMessageProxy().messageComplete(prog);\n    },\n\n    onMessageOnNetwork: function(prog) {\n      this.client.getMessageProxy().messageOnNetwork(prog);\n    },\n\n    ping: function() {\n      if(this.client === null) {\n        throw \"net\";\n      }\n      return true;\n    },\n\n    onServerKeepalive: function() {\n        this.client.onServerKeepalive();\n    },\n    \n    onSubscriptionReconf: function(tableCode, frequency) {\n        this.client.getTablesHandler().doSubscriptionReconf(tableCode, frequency);\n    }\n\n  };\n\n  for (var i in methods) {\n    NewEngineHandler.prototype[i] = StandardHandler.createCaller(i,methods[i])\n  }\n\n  export default NewEngineHandler;\n\n","import IllegalArgumentException from \"../../src-tool/IllegalArgumentException\";\nimport Bean from \"./Bean\";\nimport Inheritance from \"../../src-tool/Inheritance\";\nimport Environment from \"../../src-tool/Environment\";\nimport Global from \"../Global\";\nimport RequestsHelper from \"../engine/RequestsHelper\";\nimport Utils from \"../Utils\";\n  \n  var varNames = {\n      serverAddress: \"serverAddress\",\n      adapterSet: \"adapterSet\",\n      user: \"user\",\n      password: \"password\",\n      serverInstanceAddress: \"serverInstanceAddress\",\n      serverSocketName: \"serverSocketName\",\n      sessionId: \"sessionId\",\n      clientIp: \"clientIp\"\n  };\n  varNames = Utils.getReverse(varNames); \n  \n  var doNotLogValueList = {password:true};\n\n  \n  var DEFAULT_SERVER = !Environment.isBrowser() || (location.protocol != \"http:\" && location.protocol != \"https:\")  ? null : (location.protocol + \"//\" + location.hostname + (location.port ? \":\"+location.port : \"\") + \"/\");\n  \n\n  \n  /**\n   * Used by LightstreamerClient to provide a basic connection properties data object.\n   * @constructor\n   *\n   * @exports ConnectionDetails\n   * @class Data object that contains the configuration settings needed\n   * to connect to a Lightstreamer Server.\n   * <BR/>The class constructor, its prototype and any other properties should never\n   * be used directly; the library will create ConnectionDetails instances when needed.\n   * <BR>Note that all the settings are applied asynchronously; this means that if a\n   * CPU consuming task is performed right after the call, the effect of the setting \n   * will be delayed.\n   * \n   * @see LightstreamerClient\n   */\n  var ConnectionDetails = function(){\n    \n  \n    \n    //server to connect to\n    //web client has a default == page's host; if loaded from file:/// the default will generate an exception during the connect call\n    /**\n     * @private\n     */\n    this.serverAddress =  DEFAULT_SERVER;\n    \n    //Name of the adapter set to use\n    /**\n     * @private\n     */\n    this.adapterSet = null;\n    \n    //User name to connect with the adapter set\n    /**\n     * @private\n     */\n    this.user = null;\n    \n    //Password to connect with the adapter set\n    /**\n     * @private\n     */\n    this.password = null;\n    \n    /**\n     * @private\n     */\n    this.serverInstanceAddress = null;\n    /**\n     * @private\n     */\n    this.serverSocketName = null;\n    /**\n     * @private\n     */\n    this.sessionId = null;\n\n    /**\n     * @private\n     */\n    this.doNotLogValueList = doNotLogValueList;\n    /**\n     * @private\n     */\n    this.varNames = varNames;\n    \n    this._callSuperConstructor(ConnectionDetails,arguments); \n    \n    /**\n     * @private\n     */\n    this.constr = \"ConnectionDetails\";\n    \n  };\n  \n  ConnectionDetails.prototype = {\n      \n    /**\n     * Setter method that sets the address of Lightstreamer Server.\nSTART_NODE_JSDOC_EXCLUDE\n     * Setting Lightstreamer Server address is not required when the front-end\n     * pages are supplied by Lightstreamer Server itself (although this\n     * scenario is advised only for demo purpose).\n     * On the other hand, the setting should be configured if the front-end pages are\n     * served by an external Web server or loaded directly from the file system or\n     * the library is not running inside a browser. \n     * <BR>When the client application is downloaded from a web server, the configured\n     * server address should have the same protocol as the client page itself. If this\n     * requirement is not respected, the client, depending on the browser in use, \n     * may be unable to open a streaming connection and will try to resort\n     * to polling. \nEND_NODE_JSDOC_EXCLUDE\n     * <BR>Note that the addresses specified must always have the http: or https: scheme.\n     * In case WebSockets are used, the specified scheme is \n     * internally converted to match the related WebSocket protocol\n     * (i.e. http becomes ws while https becomes wss).\n     * \n     * <p class=\"edition-note\"><B>Edition Note:</B> HTTPS is an optional\n\t * feature, available depending on Edition and License Type.\n\t * To know what features are enabled by your license, please see the License tab of the\n\t * Monitoring Dashboard (by default, available at /dashboard).</p>\n     * \nSTART_NODE_JSDOC_EXCLUDE\n     * <p class=\"default-value\"><b>Default value:</b> the address of the server\n     * that supplies the library pages if any, null otherwise.</p>\nEND_NODE_JSDOC_EXCLUDE\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b>This method can be called at any time. If called while connected, \n     * it will be applied when the next session creation request is issued.\n     * <BR>This setting can also be specified in the {@link LightstreamerClient} \n     * constructor.</p>\n     * \n     * <p class=\"notification\"><b>Notification:</b> A change to this setting will be notified through a\n     * call to {@link ClientListener#onPropertyChange} with argument \"serverAddress\" on any \n     * {@link ClientListener}\nSTART_NODE_JSDOC_EXCLUDE\n     * listening to any LightstreamerClient sharing the same \n     * connection with the LightstreamerClient owning the ConnectionDetails upon \n     * which the setter was called\nEND_NODE_JSDOC_EXCLUDE\n     * .</p>\n     * \n     * @throws {IllegalArgumentException} if the given address is not valid.\n     *\n     * @param {String} serverAddress The full address of Lightstreamer Server.\n     * A null value can also be used, to restore the default value.\n     * An IPv4 or IPv6 can also be used in place of a hostname, if compatible with\n     * the environment in use (see the notes in the summary of this documentation).\n     * Some examples of valid values include:\n     * <BR>http://push.mycompany.com\n     * <BR>http://push.mycompany.com:8080\n     * <BR>http://79.125.7.252\n     * <BR>http://[2001:0db8:85a3:0000:0000:8a2e:0370:7334]\n     * <BR>http://[2001:0db8:85a3::8a2e:0370:7334]:8080\n     * \n     */\n    setServerAddress: function(serverAddress) {\n      if (serverAddress === null) {\n        serverAddress = DEFAULT_SERVER;\n      } else {\n        \n        if (serverAddress.substr(serverAddress.length-1) != \"/\") {\n          serverAddress+=\"/\";\n        }\n        var _valid = RequestsHelper.verifyServerAddress(serverAddress);\n        if (_valid !== true) {\n          throw new IllegalArgumentException(_valid);\n        }\n         \n      }\n      \n      this.heavySetter(\"serverAddress\",serverAddress);\n    },  \n    \n    /**\n     * Inquiry method that gets the configured address of Lightstreamer Server.\n     * \n     * @return {String} the configured address of Lightstreamer Server.\n     */\n    getServerAddress: function() {\n      return this.serverAddress;\n    },\n \n    /** \n     * Setter method that sets the name of the Adapter Set mounted on \n     * Lightstreamer Server to be used to handle all requests in the session.\n     * <BR>An Adapter Set defines the Metadata Adapter and one or several\n     * Data Adapters. It is configured on the server side through an\n     * \"adapters.xml\" file; the name is configured through the \"id\" attribute\n     * in the &lt;adapters_conf&gt; element.\n     *\n     * <p class=\"default-value\"><b>Default value:</b> The default Adapter Set, configured as\n     * \"DEFAULT\" on the Server.</p>\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> The Adapter Set name should be set on the\n     * {@link LightstreamerClient#connectionDetails} object before calling the\n     * {@link LightstreamerClient#connect} method. However, the value can be changed\n     * at any time: the supplied value will be used for the next time a new session is \n     * requested to the server.\n     * <BR>This setting can also be specified in the {@link LightstreamerClient} \n     * constructor.</p>\n     * \n     * <p class=\"notification\"><b>Notification:</b> A change to this setting will be notified through a\n     * call to {@link ClientListener#onPropertyChange} with argument \"adapterSet\" on any \n     * {@link ClientListener}\nSTART_NODE_JSDOC_EXCLUDE\n     * listening to any LightstreamerClient sharing the same \n     * connection with the LightstreamerClient owning the ConnectionDetails upon \n     * which the setter was called\nEND_NODE_JSDOC_EXCLUDE\n     * .</p>\n     * \n     * @param {String} adapterSet The name of the Adapter Set to be used. A null value \n     * is equivalent to the \"DEFAULT\" name.\n     */\n    setAdapterSet: function(adapterSet) {\n      this.heavySetter(\"adapterSet\",adapterSet);\n    },\n    \n    /**  \n     * Inquiry method that gets the name of the Adapter Set (which defines\n     * the Metadata Adapter and one or several Data Adapters) mounted on\n     * Lightstreamer Server that supply all the items used in this application.\n     *\n     * @return {String} the name of the Adapter Set; returns null if no name\n     * has been configured, so that the \"DEFAULT\" Adapter Set is used.\n     *\n     * @see ConnectionDetails#setAdapterSet\n     */\n    getAdapterSet: function() {\n      return this.adapterSet;\n    },\n        \n    \n    /**\n     * Setter method that sets the username to be used for the authentication\n     * on Lightstreamer Server when initiating the push session.\n     * The Metadata Adapter is responsible for checking the credentials\n     * (username and password).\n     * \n     * <p class=\"default-value\"><b>Default value:</b> If no username is supplied, no user\n     * information will be sent at session initiation. The Metadata Adapter,\n     * however, may still allow the session.</p>\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> The username should be set on the\n     * {@link LightstreamerClient#connectionDetails} object before calling the\n     * {@link LightstreamerClient#connect} method. However, the value can be changed\n     * at any time: the supplied value will be used for the next time a new session is \n     * requested to the server.</p>\n     * \n     * <p class=\"notification\"><b>Notification:</b> A change to this setting will be notified through a\n     * call to {@link ClientListener#onPropertyChange} with argument \"user\" on any \n     * {@link ClientListener}\nSTART_NODE_JSDOC_EXCLUDE\n     * listening to any LightstreamerClient sharing the same \n     * connection with the LightstreamerClient owning the ConnectionDetails upon \n     * which the setter was called\nEND_NODE_JSDOC_EXCLUDE\n     * .</p>\n     *\n     * @param {String} user The username to be used for the authentication\n     * on Lightstreamer Server. The username can be null.\n     *\n     * @see ConnectionDetails#setPassword\n     */\n    setUser: function(user) {\n      this.heavySetter(\"user\",user);\n    },\n    \n    /**  \n     * Inquiry method that gets the username to be used for the authentication\n     * on Lightstreamer Server when initiating the push session.\n     * \n     * @return {String} the username to be used for the authentication\n     * on Lightstreamer Server; returns null if no user name\n     * has been configured.\n     *\n     * @see ConnectionDetails#setUser\n     */\n    getUser: function() {\n      return this.user;\n    },\n    \n    /**\n     * Setter method that sets the password to be used for the authentication\n     * on Lightstreamer Server when initiating the push session.\n     * The Metadata Adapter is responsible for checking the credentials\n     * (username and password).\n     * \n     * <p class=\"default-value\"><b>Default value:</b> If no password is supplied, no password\n     * information will be sent at session initiation. The Metadata Adapter,\n     * however, may still allow the session.</p>\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> The username should be set on the\n     * {@link LightstreamerClient#connectionDetails} object before calling the\n     * {@link LightstreamerClient#connect} method. However, the value can be changed\n     * at any time: the supplied value will be used for the next time a new session is \n     * requested to the server.\n     * <BR><b>NOTE:</b> The password string will be stored as a JavaScript\n     * variable.\n     * That is necessary in order to allow automatic reconnection/reauthentication\n     * for fail-over. For maximum security, avoid using an actual private\n     * password to authenticate on Lightstreamer Server; rather use\n     * a session-id originated by your web/application server, that can be\n     * checked by your Metadata Adapter.</p>\n     * \n     * <p class=\"notification\"><b>Notification:</b> A change to this setting will be notified through a\n     * call to {@link ClientListener#onPropertyChange} with argument \"password\" on any \n     * {@link ClientListener}\nSTART_NODE_JSDOC_EXCLUDE\n     * listening to any LightstreamerClient sharing the same \n     * connection with the LightstreamerClient owning the ConnectionDetails upon \n     * which the setter was called\nEND_NODE_JSDOC_EXCLUDE\n     * .</p>\n     * \n     * @param {String} password The password to be used for the authentication\n     * on Lightstreamer Server. The password can be null.\n     *\n     * @see ConnectionDetails#setUser\n     */\n    setPassword: function(password) {\n      this.heavySetter(\"password\",password);\n    },\n    \n    /**\n     * Inquiry method that gets the server address to be used to issue all requests\n     * related to the current session. In fact, when a Server cluster is in\n     * place, the Server address specified through \n     * {@link ConnectionDetails#setServerAddress} can identify various Server \n     * instances; in order to ensure that all requests related to a session are \n     * issued to the same Server instance, the Server can answer to the session \n     * opening request by providing an address which uniquely identifies its own \n     * instance.\n     * When this is the case, this address is returned by the method;\n     * otherwise, null is returned.\n     * <BR>Note that the addresses will always have the http: or https: scheme.\n     * In case WebSockets are used, the specified scheme is \n     * internally converted to match the related WebSocket protocol\n     * (i.e. http becomes ws while https becomes wss).\n     *\n     * <p class=\"edition-note\"><B>Edition Note:</B> Server Clustering is\n\t * an optional feature, available depending on Edition and License Type.\n\t * To know what features are enabled by your license, please see the License tab of the\n\t * Monitoring Dashboard (by default, available at /dashboard).</p>\n     *\n     * <p class=\"lifecycle\"><b>Lifecycle:</b> The method gives a meaningful answer only when\n     * a session is currently active.</p>\n     * \n     * <p class=\"notification\"><b>Notification:</b> A change to this setting will be notified through a\n     * call to {@link ClientListener#onPropertyChange} with argument \"serverInstanceAddress\" on any \n     * {@link ClientListener}\nSTART_NODE_JSDOC_EXCLUDE\n     * listening to any LightstreamerClient sharing the same \n     * connection with the LightstreamerClient that received the setting from the\n     * server\nEND_NODE_JSDOC_EXCLUDE\n     * .</p>\n     *\n     * @return {String} address used to issue all requests related to the current\n     * session.\n     */\n    getServerInstanceAddress: function() { \n      return this.serverInstanceAddress;\n    },\n    \n    /**\n     * Inquiry method that gets the instance name of the Server which is\n     * serving the current session. To be more precise, each answering port\n     * configured on a Server instance (through a &lt;http_server&gt; or\n     * &lt;https_server&gt; element in the Server configuration file) can be given\n     * a different name; the name related to the port to which the session\n     * opening request has been issued is returned.\n     * <BR>Note that in case of polling or in case rebind requests are needed,\n     * subsequent requests related to the same session may be issued to a port\n     * different than the one used for the first request; the names configured\n     * for those ports would not be reported. This, however, can only happen\n     * when a Server cluster is in place and particular configurations for the\n     * load balancer are used.\n     *\n     * <p class=\"edition-note\"><B>Edition Note:</B> Server Clustering is\n     * an optional feature, available depending on Edition and License Type.\n\t * To know what features are enabled by your license, please see the License tab of the\n\t * Monitoring Dashboard (by default, available at /dashboard).</p>\n     *\n     * <p class=\"lifecycle\"><b>Lifecycle:</b> The method gives a meaningful answer only when\n     * a session is currently active.</p>\n     * \n     * <p class=\"notification\"><b>Notification:</b> A change to this setting will be notified through a\n     * call to {@link ClientListener#onPropertyChange} with argument \"serverSocketName\" on any \n     * {@link ClientListener}\nSTART_NODE_JSDOC_EXCLUDE\n     * listening to any LightstreamerClient sharing the same \n     * connection with the LightstreamerClient that received the setting from the\n     * server\nEND_NODE_JSDOC_EXCLUDE\n     * .</p>\n     *\n     * @return {String} name configured for the Server instance which is managing the\n     * current session.\n     */\n    getServerSocketName: function() { \n      return this.serverSocketName;\n    },\n\n    /**\n     * Inquiry method that gets the ID associated by the server\n     * to this client session.\n     *\n     * <p class=\"lifecycle\"><b>Lifecycle:</b> The method gives a meaningful answer only when\n     * a session is currently active.</p>\n     *\n     * <p class=\"notification\"><b>Notification:</b> A change to this setting will be notified through a\n     * call to {@link ClientListener#onPropertyChange} with argument \"sessionId\" on any\n     * {@link ClientListener}\nSTART_NODE_JSDOC_EXCLUDE\n     * listening to any LightstreamerClient sharing the same\n     * connection with the LightstreamerClient that received the setting from the\n     * server\nEND_NODE_JSDOC_EXCLUDE\n     * .</p>\n     *\n     * @return {String} ID assigned by the Server to this client session.\n     */\n    getSessionId: function() {\n      return this.sessionId;\n    },\n    \n    /**\n     * Inquiry method that gets the IP address of this client as seen by the Server which is serving\n     * the current session as the client remote address (note that it may not correspond to the client host;\n     * for instance it may refer to an intermediate proxy). If, upon a new session, this address changes,\n     * it may be a hint that the intermediary network nodes handling the connection have changed, hence the network\n     * capabilities may be different. The library uses this information to optimize the connection. <BR>  \n     * Note that in case of polling or in case rebind requests are needed, subsequent requests related to the same \n     * session may, in principle, expose a different IP address to the Server; these changes would not be reported.\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> If a session is not currently active, null is returned;\n     * soon after a session is established, the value may become available; but it is possible\n     * that this information is not provided by the Server and that it will never be available.</p>\n     * \n     * <p class=\"notification\"><b>Notification:</b> A change to this setting will be notified through a call to \n     * {@link ClientListener#onPropertyChange} with argument \"clientIp\" on any \n     * ClientListener listening to the related LightstreamerClient.</p>\n     * \n     * @return {String} A canonical representation of an IP address (it can be either IPv4 or IPv6), or null.\n     */\n    getClientIp: function() {\n        return this.clientIp;\n    }\n    \n  };\n  \n  ConnectionDetails.prototype[\"setServerAddress\"] = ConnectionDetails.prototype.setServerAddress;\n  ConnectionDetails.prototype[\"getServerAddress\"] = ConnectionDetails.prototype.getServerAddress;\n  ConnectionDetails.prototype[\"setAdapterSet\"] = ConnectionDetails.prototype.setAdapterSet;\n  ConnectionDetails.prototype[\"getAdapterSet\"] = ConnectionDetails.prototype.getAdapterSet;\n  ConnectionDetails.prototype[\"setUser\"] = ConnectionDetails.prototype.setUser;\n  ConnectionDetails.prototype[\"getUser\"] = ConnectionDetails.prototype.getUser;\n  ConnectionDetails.prototype[\"setPassword\"] = ConnectionDetails.prototype.setPassword;\n  ConnectionDetails.prototype[\"getServerInstanceAddress\"] = ConnectionDetails.prototype.getServerInstanceAddress;\n  ConnectionDetails.prototype[\"getServerSocketName\"] = ConnectionDetails.prototype.getServerSocketName;\n  ConnectionDetails.prototype[\"getSessionId\"] = ConnectionDetails.prototype.getSessionId;\n  ConnectionDetails.prototype[\"getClientIp\"] = ConnectionDetails.prototype.getClientIp;\n  \n  Inheritance(ConnectionDetails, Bean);\n  export default ConnectionDetails;\n  \n","import IllegalArgumentException from \"../../src-tool/IllegalArgumentException\";\nimport Constants from \"../Constants\";\nimport Bean from \"./Bean\";\nimport Inheritance from \"../../src-tool/Inheritance\";\nimport Global from \"../Global\";\nimport Environment from \"../../src-tool/Environment\";\nimport Utils from \"../Utils\";\nimport RetryDelayCounter from \"../engine/RetryDelayCounter\";\nimport ConnectTimeoutCounter from \"../engine/ConnectTimeoutCounter\";\n\n    /*\n     * WARNING\n     * \n     * Unlike Java client where ConnectionOptions has references to the classes RetryDelayCounter\n     * and ConnectTimeoutCounter,\n     * in Javascript client RetryDelayCounter and ConnectTimeoutCounter are mixed into ConnectionOptions \n     * because ConnectionOptions\n     * must be serializable (see ConnectionOptions super constructor where the method Utils.copyByValue\n     * is used) but RetryDelayCounter and ConnectTimeoutCounter are not serializable (they declares methods).\n     * \n     * Making RetryDelayCounter and ConnectTimeoutCounter mixins, we avoid the serialization problem \n     * but we must assure that\n     *   1) there is no name clash between properties and methods of ConnectionOptions and RetryDelayCounter\n     *      and ConnectTimeoutCounter\n     *   2) the property names of RetryDelayCounter and ConnectTimeoutCounter are listed \n     *      in the global variable varNames (see below) because they are used for the serialization.\n     */\n    \n  var connConstants = {};\n  connConstants[Constants.HTTP_STREAMING] = true;\n  connConstants[Constants.WS_POLLING] = true;\n  connConstants[Constants.HTTP_POLLING] = true;\n  connConstants[Constants.WS_STREAMING] = true;\n  connConstants[Constants.WS_ALL] = true;\n  connConstants[Constants.HTTP_ALL] = true;\n\n  var CONNECT_TIMEOUT_DEFAULT = 4000;\n  var CONNECT_TIMEOUT_LIMIT = 14000;\n  var CONNECT_TIMEOUT_INCREASE = 2000;\n  var AUTO = \"auto\";\n\n\n  var WRONG_FORCED_TRANSPORT = \"The given value is not valid. Use one of: HTTP-STREAMING, HTTP-POLLING, WS-STREAMING, WS-POLLING, WS, HTTP or null\";\n  var IMPOSSIBLE_COOKIES = \"cookieHandlingRequired is only supported on Browsers\";\n  \n  \n  var varNames = {\n      contentLength: \"contentLength\",\n      idleTimeout: \"idleTimeout\",\n      keepaliveInterval: \"keepaliveInterval\",\n      requestedMaxBandwidth: \"requestedMaxBandwidth\",\n      realMaxBandwidth: \"realMaxBandwidth\",\n      pollingInterval: \"pollingInterval\",\n      reconnectTimeout: \"reconnectTimeout\",\n      stalledTimeout: \"stalledTimeout\",\n      retryDelay: \"retryDelay\",\n      firstRetryMaxDelay: \"firstRetryMaxDelay\",\n      slowingEnabled: \"slowingEnabled\",\n      forcedTransport: \"forcedTransport\",\n      serverInstanceAddressIgnored: \"serverInstanceAddressIgnored\",\n      cookieHandlingRequired: \"cookieHandlingRequired\",\n      reverseHeartbeatInterval: \"reverseHeartbeatInterval\",\n      earlyWSOpenEnabled: \"earlyWSOpenEnabled\",\n      sessionRecoveryTimeout: \"sessionRecoveryTimeout\",\n      spinFixTimeout: \"spinFixTimeout\",\n      spinFixEnabled: \"spinFixEnabled\",\n      xDomainStreamingEnabled: \"xDomainStreamingEnabled\",\n      corsXHREnabled: \"corsXHREnabled\",\n      forceBindTimeout: \"forceBindTimeout\", \n      switchCheckTimeout: \"switchCheckTimeout\",\n      httpExtraHeaders : \"httpExtraHeaders\",\n      httpExtraHeadersOnSessionCreationOnly : \"httpExtraHeadersOnSessionCreationOnly\",\n      remoteAdapterStatusObserver: \"remoteAdapterStatusObserver\",\n      \n      /* BEGIN RetryDelayCounter properties */\n      currentRetryDelay: \"currentRetryDelay\",\n      minRetryDelay: \"minRetryDelay\",\n      maxRetryDelay: \"maxRetryDelay\",\n      retryAttempt: \"retryAttempt\",\n      /* END RetryDelayCounter properties */\n      \n      /* BEGIN ConnectTimeoutCounter properties */\n      currentConnectTimeout: \"currentConnectTimeout\",\n      minConnectTimeout: \"minConnectTimeout\",\n      maxConnectTimeout: \"maxConnectTimeout\",\n      connectAttempt: \"connectAttempt\"\n      /* END ConnectTimeoutCounter properties */\n  };\n  varNames = Utils.getReverse(varNames); \n  \n  \n  /**\n   * Used by LightstreamerClient to provide an extra connection properties data object.\n   * @constructor\n   *\n   * @exports ConnectionOptions\n   * @class Data object that contains the policy settings \n   * used to connect to a Lightstreamer Server.\n   * <BR/>The class constructor, its prototype and any other properties should never\n   * be used directly; the library will create ConnectionOptions instances when needed.\n   * <BR>Note that all the settings are applied asynchronously; this means that if a\n   * CPU consuming task is performed right after the call the effect of the setting \n   * will be delayed.\n   * \n   * @see LightstreamerClient\n   */\n  var ConnectionOptions = function() {\n\n    \n    //PUBLIC\n    /**\n     * @private\n     */\n    this.contentLength = 4000000; //4 MB\n    /**\n     * @private\n     */\n    this.idleTimeout = 19000; // idle timeout\n    /**\n     * @private\n     */\n    this.keepaliveInterval = 0;  //The requested keepalive signals interval\n    /**\n     * @private\n     */\n    this.requestedMaxBandwidth = -1; //The max bandwidth requested from the client, saved as 0 means unlimited, also a negative value means unlimited but can only be sent by the server, not set via APIs\n    /**\n     * @private\n     */\n    this.pollingInterval = 0; //The requested polling interval\n    /**\n     * @private\n     */\n    this.reconnectTimeout = 3000;  // Timeout to enter the CONNECTING status (from STALLED)\n    /**\n     * @private\n     */\n    this.stalledTimeout = 2000;  // Timeout to enter the STALLED status (from STREAMING)\n    /**\n     * @private\n     */\n    this.retryDelay = 4000;\n    this.initRetryDelay(this.retryDelay); // initialize RetryDelayCounter mixin\n    this.initConnectTimeout(this.retryDelay); // initialize ConnectTimeoutCounter mixin\n    /**\n     * @private\n     */\n    this.firstRetryMaxDelay = 100; //time to wait when a connection breaks before connecting again\n    /**\n     * @private\n     */\n    this.slowingEnabled = false; // Use or not the slowing algorithm\n    /**\n     * @private\n     */\n    this.forcedTransport = null; //force a specific kind of connection\n    /**\n     * @private\n     */\n    this.serverInstanceAddressIgnored = false; //if true the control link will be ignored\n    /**\n     * @private\n     */\n    this.cookieHandlingRequired = false;\n    /**\n     * @private\n     */\n    this.reverseHeartbeatInterval = 0; //if > 0 is the interval between client sent heartbeats\n    /**\n     * @private\n     */\n    this.earlyWSOpenEnabled = false;\n    /**\n     * @private\n     */\n    this.spinFixTimeout = 5000;\n    /**\n     * @private\n     */\n    this.spinFixEnabled = null; //null -> default; true -> always; false -> never\n    /**\n     * @private\n     */\n    this.httpExtraHeaders = null;\n    /**\n     * @private\n     */\n    this.httpExtraHeadersOnSessionCreationOnly = false;\n    /**\n     * @private\n     */\n    this.sessionRecoveryTimeout = 15000;\n    \n    //PRIVATE \n    /**\n     * @private\n     */\n    this.xDomainStreamingEnabled = true;\n    /**\n     * @private\n     */\n    this.corsXHREnabled = true;\n    /**\n     * @private\n     */\n    this.forceBindTimeout = 2000; //how long to wait before sending another force bind request (when the previous had no effect) \n    /**\n     * @private\n     */\n    this.switchCheckTimeout = 4000; //how long to wait before creating a new session, instead of waiting for a loop command, when a force bind has been sent\n    /**\n     * @private\n     */\n    this.remoteAdapterStatusObserver = {};\n    /**\n     * @private\n     */\n    this.varNames = varNames;\n    \n    this._callSuperConstructor(ConnectionOptions,arguments); \n    /**\n     * @private\n     */\n    this.constr = \"ConnectionOptions\";\n\n    \n  };\n  \n  ConnectionOptions.prototype = {\n      \n    ///////////////PUBLIC\n      \n    /** \n     * Setter method that sets the length in bytes to be used by the Server for the \n     * response body on a stream connection (a minimum length, however, is ensured \n     * by the server). After the content length exhaustion, the connection will be \n     * closed and a new bind connection will be automatically reopened.\n     * <BR>NOTE that this setting only applies to the \"HTTP-STREAMING\" case (i.e. not to WebSockets).\n     *  \n     * <p class=\"default-value\"><b>Default value:</b> A length decided by the library, to ensure\n     * the best performance. It can be of a few MB or much higher, depending on the environment.</p>\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> The content length should be set before calling the\n     * {@link LightstreamerClient#connect} method. However, the value can be changed\n     * at any time: the supplied value will be used for the next streaming connection (either a bind\n     * or a brand new session).</p>\n     * \n     * <p class=\"notification\"><b>Notification:</b> A change to this setting will be notified through a\n     * call to {@link ClientListener#onPropertyChange} with argument \"contentLength\" on any \n     * {@link ClientListener}\nSTART_NODE_JSDOC_EXCLUDE\n     * listening to any LightstreamerClient sharing the same \n     * connection with the LightstreamerClient owning the ConnectionOptions upon \n     * which the setter was called\nEND_NODE_JSDOC_EXCLUDE\n     * .</p>\n     * \n     * @throws {IllegalArgumentException} if a negative, zero, decimal\n     * or a not-number value is passed.\n     * \n     * @param {Number} contentLength The length to be used by the Server for the \n     * response body on a HTTP stream connection.\n     */\n    setContentLength: function(contentLength) {\n      this.heavySetter(\"contentLength\",this.checkPositiveNumber(contentLength));\n    },\n    \n    /**\n     * Inquiry method that gets the length expressed in bytes to be used by the Server\n     * for the response body on a HTTP stream connection.\n     * \n     * @return {Number} the length to be used by the Server\n     * for the response body on a HTTP stream connection\n     */\n    getContentLength: function() {\n      return this.contentLength;\n    },\n    \n    /**\n     * Setter method that sets the maximum time the Server is allowed to wait\n     * for any data to be sent in response to a polling request, if none has\n     * accumulated at request time. Setting this time to a nonzero value and\n     * the polling interval to zero leads to an \"asynchronous polling\"\n     * behaviour, which, on low data rates, is very similar to the streaming\n     * case. Setting this time to zero and the polling interval to a nonzero\n     * value, on the other hand, leads to a classical \"synchronous polling\".\n     * <BR>Note that the Server may, in some cases, delay the answer for more\n     * than the supplied time, to protect itself against a high polling rate or\n     * because of bandwidth restrictions. Also, the Server may impose an upper\n     * limit on the wait time, in order to be able to check for client-side\n     * connection drops.\n     *\n     * <p class=\"default-value\"><b>Default value:</b> 19000 (19 seconds).</p>\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> The idle timeout should be set before calling the\n     * {@link LightstreamerClient#connect} method. However, the value can be changed\n     * at any time: the supplied value will be used for the next polling request.</p>\n     * \n     * <p class=\"notification\"><b>Notification:</b> A change to this setting will be notified through a\n     * call to {@link ClientListener#onPropertyChange} with argument \"idleTimeout\" on any \n     * {@link ClientListener}\nSTART_NODE_JSDOC_EXCLUDE\n     * listening to any LightstreamerClient sharing the same \n     * connection with the LightstreamerClient owning the ConnectionOptions upon \n     * which the setter was called\nEND_NODE_JSDOC_EXCLUDE\n     * .</p>\n     * \n     * @throws {IllegalArgumentException} if a negative or a decimal\n     * or a not-number value is passed.\n     *\n     * @param {Number} idleTimeout The time (in milliseconds) the Server is\n     * allowed to wait for data to send upon polling requests.\n     * \n     * @see ConnectionOptions#setPollingInterval\n     */\n    setIdleTimeout: function(idleTimeout) {\n      this.heavySetter(\"idleTimeout\",this.checkPositiveNumber(idleTimeout,true));\n    },\n    \n    /**  \n     * Inquiry method that gets the maximum time the Server is allowed to wait\n     * for any data to be sent in response to a polling request, if none has\n     * accumulated at request time. The wait time used by the Server, however,\n     * may be different, because of server side restrictions.\n     *\n     * @return {Number} The time (in milliseconds) the Server is allowed to wait for\n     * data to send upon polling requests.\n     *\n     * @see ConnectionOptions#setIdleTimeout\n     */\n    getIdleTimeout: function() {\n      return this.idleTimeout;\n    },\n    \n    /**\n     * Setter method that sets the interval between two keepalive packets\n     * to be sent by Lightstreamer Server on a stream connection when\n     * no actual data is being transmitted. The Server may, however, impose\n     * a lower limit on the keepalive interval, in order to protect itself.\n     * Also, the Server may impose an upper limit on the keepalive interval,\n     * in order to be able to check for client-side connection drops.\n     * If 0 is specified, the interval will be decided by the Server.\n     * \n     * <p class=\"default-value\"><b>Default value:</b> 0 (meaning that the Server\n     * will send keepalive packets based on its own configuration).</p>\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> The keepalive interval should be set before calling the\n     * {@link LightstreamerClient#connect} method. However, the value can be changed\n     * at any time: the supplied value will be used for the next streaming connection (either a bind\n     * or a brand new session).\n     * <BR>Note that, after a connection,\n     * the value may be changed to the one imposed by the Server.</p>\n     * \n     * <p class=\"notification\"><b>Notification:</b> A change to this setting will be notified through a\n     * call to {@link ClientListener#onPropertyChange} with argument \"keepaliveInterval\" on any \n     * {@link ClientListener}\nSTART_NODE_JSDOC_EXCLUDE\n     * listening to any LightstreamerClient sharing the same \n     * connection with the LightstreamerClient owning the ConnectionOptions upon \n     * which the setter was called or that received the setting from the\n     * server\nEND_NODE_JSDOC_EXCLUDE\n     * .</p>\n     * \n     * @throws {IllegalArgumentException} if a negative or a decimal\n     * or a not-number value is passed.\n     *\n     * @param {Number} keepaliveInterval The time, expressed in milliseconds,\n     * between two keepalive packets, or 0.\n     */\n    setKeepaliveInterval: function(keepaliveInterval) {\n      this.heavySetter(\"keepaliveInterval\",this.checkPositiveNumber(keepaliveInterval,true));\n    },\n    \n    /**  \n     * Inquiry method that gets the interval between two keepalive packets\n     * sent by Lightstreamer Server on a stream connection when no actual data\n     * is being transmitted.\n     * <BR>If the value has just been set and a connection to Lightstreamer\n     * Server has not been established yet, the returned value is the time that\n     * is being requested to the Server. Afterwards, the returned value is the time\n     * used by the Server, that may be different, because of Server side constraints.\n     * If the returned value is 0, it means that the interval is to be decided\n     * by the Server upon the next connection.\n     *\n     * @return {Number} The time, expressed in milliseconds, between two keepalive\n     * packets sent by the Server, or 0.\n     * \n     * @see ConnectionOptions#setKeepaliveInterval\n     */\n    getKeepaliveInterval: function() {\n      /*if (! isNaN(this.serverKeepaliveInterval)) {\n        return this.serverKeepaliveInterval;\n      }*/ \n      return this.keepaliveInterval;\n    },\n    \n    /**\n     * Setter method that sets the maximum bandwidth expressed in kilobits/s that can be consumed for the data coming from \n     * Lightstreamer Server. A limit on bandwidth may already be posed by the Metadata Adapter, but the client can \n     * furtherly restrict this limit. The limit applies to the bytes received in each streaming or polling connection.\n     *\n     * <p class=\"edition-note\"><B>Edition Note:</B> Bandwidth Control is\n\t * an optional feature, available depending on Edition and License Type.\n\t * To know what features are enabled by your license, please see the License tab of the\n\t * Monitoring Dashboard (by default, available at /dashboard).</p>\n     *\n     * <p class=\"default-value\"><b>Default value:</b> \"unlimited\".</p>\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> The bandwidth limit can be set and changed at any time. If a connection is currently active, the bandwidth \n     * limit for the connection is changed on the fly. Remember that the Server may apply a different limit.\n     * \n     * <p class=\"notification\"><b>Notification:</b> A change to this setting will be notified through a call to \n     * {@link ClientListener#onPropertyChange} with argument \"requestedMaxBandwidth\" on any \n     * {@link ClientListener}\nSTART_NODE_JSDOC_EXCLUDE\n     * listening to any LightstreamerClient sharing the same \n     * connection with the LightstreamerClient owning the ConnectionOptions upon \n     * which the setter was called or that received the setting from the\n     * server\nEND_NODE_JSDOC_EXCLUDE\n     * .\n     * <BR>\n     * Moreover, upon any change or attempt to change the limit, the Server will notify the client\n     * and such notification will be received through a call to \n     * {@link ClientListener#onPropertyChange} with argument \"realMaxBandwidth\" on any \n     * {@link ClientListener}\nSTART_NODE_JSDOC_EXCLUDE\n     * listening to any LightstreamerClient sharing the same \n     * connection with the LightstreamerClient owning the ConnectionOptions upon \n     * which the setter was called or that received the setting from the\n     * server\nEND_NODE_JSDOC_EXCLUDE\n     * .</p>\n     * \n     * @param {Number} maxBandwidth A decimal number, which represents the maximum bandwidth requested for the streaming\n     * or polling connection expressed in kbps (kilobits/sec). The string \"unlimited\" is also allowed, to mean that\n     * the maximum bandwidth can be entirely decided on the Server side (the check is case insensitive).\n     * \n     * @throws {IllegalArgumentException} if a negative, zero, or a not-number value (excluding special values) is passed.\n     * \n     * @see ConnectionOptions#getRealMaxBandwidth\n     */\n    setRequestedMaxBandwidth: function(maxBandwidth) {\n      var maxBandwidthTmp = new String(maxBandwidth);\n      if (maxBandwidthTmp.toLowerCase() == \"unlimited\") {\n        maxBandwidth = 0;\n      } else {\n        maxBandwidth = this.checkPositiveNumber(maxBandwidth,false,true);\n      }\n      \n      this.heavySetter(\"requestedMaxBandwidth\",maxBandwidth);\n    },\n  \n    /**\n     * Inquiry method that gets the maximum bandwidth that can be consumed for the data coming from \n     * Lightstreamer Server, as requested for this session.\n     * The maximum bandwidth limit really applied by the Server on the session is provided by\n     * {@link ConnectionOptions#getRealMaxBandwidth}\n     * \n     * @return {Number|String} A decimal number, which represents the maximum bandwidth requested for the streaming\n     * or polling connection expressed in kbps (kilobits/sec), or the string \"unlimited\".\n     * \n     * @see ConnectionOptions#setRequestedMaxBandwidth\n     */\n    getRequestedMaxBandwidth: function() {\n      if (this.requestedMaxBandwidth <= 0) {\n        return \"unlimited\";\n      }\n      return this.requestedMaxBandwidth;\n    },\n    \n    /**\n     * Inquiry method that gets the maximum bandwidth that can be consumed for the data coming from \n     * Lightstreamer Server. This is the actual maximum bandwidth, in contrast with the requested\n     * maximum bandwidth, returned by {@link ConnectionOptions#getRequestedMaxBandwidth}. <BR>\n     * The value may differ from the requested one because of restrictions operated on the server side,\n     * or because bandwidth management is not supported (in this case it is always \"unlimited\"),\n     * but also because of number rounding.\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b>If a connection to Lightstreamer Server is not currently active, null is returned;\n     * soon after the connection is established, the value becomes available, as notified\n     * by a call to {@link ClientListener#onPropertyChange} with argument \"realMaxBandwidth\".</p>\n     * \n     * @return {Number|String} A decimal number, which represents the maximum bandwidth applied by the Server for the\n     * streaming or polling connection expressed in kbps (kilobits/sec), or the string \"unlimited\", or null.\n     * \n     * @see ConnectionOptions#setRequestedMaxBandwidth\n     */\n    getRealMaxBandwidth: function() {\n        return this.realMaxBandwidth;\n    },\n    \n    /**\n     * Setter method that sets the polling interval used for polling\n     * connections. The client switches from the default streaming mode\n     * to polling mode when the client network infrastructure does not allow\n     * streaming. Also, polling mode can be forced\n     * by calling {@link ConnectionOptions#setForcedTransport} with \n     * \"WS-POLLING\" or \"HTTP-POLLING\" as parameter.\n     * <BR>The polling interval affects the rate at which polling requests\n     * are issued. It is the time between the start of a polling request and\n     * the start of the next request. However, if the polling interval expires\n     * before the first polling request has returned, then the second polling\n     * request is delayed. This may happen, for instance, when the Server\n     * delays the answer because of the idle timeout setting.\n     * In any case, the polling interval allows for setting an upper limit\n     * on the polling frequency.\n     * <BR>The Server does not impose a lower limit on the client polling\n     * interval.\n     * However, in some cases, it may protect itself against a high polling\n     * rate by delaying its answer. Network limitations and configured\n     * bandwidth limits may also lower the polling rate, despite of the\n     * client polling interval.\n     * <BR>The Server may, however, impose an upper limit on the polling\n     * interval, in order to be able to promptly detect terminated polling\n     * request sequences and discard related session information.\n     * \n     * \n     * <p class=\"default-value\"><b>Default value:</b> 0 (pure \"asynchronous polling\" is configured).\n     * </p>\n     *\n     * <p class=\"lifecycle\"><b>Lifecycle:</b>The polling interval should be set before calling the\n     * {@link LightstreamerClient#connect} method. However, the value can be changed\n     * at any time: the supplied value will be used for the next polling request. \n     * <BR>Note that, after each polling request, the value may be\n     * changed to the one imposed by the Server.</p>\n     * \n     * <p class=\"notification\"><b>Notification:</b> A change to this setting will be notified through a\n     * call to {@link ClientListener#onPropertyChange} with argument \"pollingInterval\" on any \n     * {@link ClientListener}\nSTART_NODE_JSDOC_EXCLUDE\n     * listening to any LightstreamerClient sharing the same \n     * connection with the LightstreamerClient owning the ConnectionOptions upon \n     * which the setter was called or that received the setting from the\n     * server.\nEND_NODE_JSDOC_EXCLUDE\n     * </p>\n     * \n     * @throws {IllegalArgumentException} if a negative or a decimal\n     * or a not-number value is passed.\n     *\n     * @param {Number} pollingInterval The time (in milliseconds) between\n     * subsequent polling requests. Zero is a legal value too, meaning that\n     * the client will issue a new polling request as soon as\n     * a previous one has returned.\n     * \n     * @see ConnectionOptions#setIdleTimeout\n     */\n    setPollingInterval: function(pollingInterval) {\n      this.heavySetter(\"pollingInterval\",this.checkPositiveNumber(pollingInterval,true));\n    },\n    \n    /**  \n     * Inquiry method that gets the polling interval used for polling\n     * connections.\n     * <BR>If the value has just been set and a polling request to Lightstreamer\n     * Server has not been performed yet, the returned value is the polling interval that is being requested\n     * to the Server. Afterwards, the returned value is the the time between\n     * subsequent polling requests that is really allowed by the Server, that may be\n     * different, because of Server side constraints.\n     *\n     * @return {Number} The time (in milliseconds) between subsequent polling requests.\n     * \n     * @see ConnectionOptions#setPollingInterval\n     */\n    getPollingInterval: function() {\n      /*if (!isNaN(this.serverPollingInterval)) {\n        return this.serverPollingInterval;\n      }*/\n      return this.pollingInterval;\n    },\n    \n    /**\n     * Setter method that sets the time the client, after entering \"STALLED\" status,\n     * is allowed to keep waiting for a keepalive packet or any data on a stream connection,\n     * before disconnecting and trying to reconnect to the Server.\n     * The new connection may be either the opening of a new session or an attempt to recovery\n     * the current session, depending on the kind of interruption.\n     *\n     * <p class=\"default-value\"><b>Default value:</b> 3000 (3 seconds).</p>\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This value can be set and changed at any time.</p>\n     * \n     * <p class=\"notification\"><b>Notification:</b> A change to this setting will be notified through a\n     * call to {@link ClientListener#onPropertyChange} with argument \"reconnectTimeout\" on any \n     * {@link ClientListener}\nSTART_NODE_JSDOC_EXCLUDE\n     * listening to any LightstreamerClient sharing the same \n     * connection with the LightstreamerClient owning the ConnectionOptions upon \n     * which the setter was called\nEND_NODE_JSDOC_EXCLUDE\n     * .</p>\n     * \n     * @throws {IllegalArgumentException} if a negative, zero, or a not-number \n     * value is passed.\n     *\n     * @param {Number} reconnectTimeout The idle time (in milliseconds)\n     * allowed in \"STALLED\" status before trying to reconnect to the\n     * Server.\n     *\n     * @see ConnectionOptions#setStalledTimeout\n     */\n    setReconnectTimeout: function(reconnectTimeout) {\n      this.heavySetter(\"reconnectTimeout\",this.checkPositiveNumber(reconnectTimeout));\n    },\n    \n    /**  \n     * Inquiry method that gets the time the client, after entering \"STALLED\" status,\n     * is allowed to keep waiting for a keepalive packet or any data on a stream connection,\n     * before disconnecting and trying to reconnect to the Server.\n     *\n     * @return {Number} The idle time (in milliseconds) admitted in \"STALLED\"\n     * status before trying to reconnect to the Server.\n     *\n     * @see ConnectionOptions#setReconnectTimeout\n     */\n    getReconnectTimeout: function() {\n      return this.reconnectTimeout;\n    },\n    \n    /**\n     * Setter method that sets the extra time the client is allowed\n     * to wait when an expected keepalive packet has not been received on\n     * a stream connection (and no actual data has arrived), before entering\n     * the \"STALLED\" status.\n     *\n     * <p class=\"default-value\"><b>Default value:</b> 2000 (2 seconds).</p>\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This value can be set and changed at any time.</p>\n     * \n     * <p class=\"notification\"><b>Notification:</b> A change to this setting will be notified through a\n     * call to {@link ClientListener#onPropertyChange} with argument \"stalledTimeout\" on any \n     * {@link ClientListener}\nSTART_NODE_JSDOC_EXCLUDE\n     * listening to any LightstreamerClient sharing the same \n     * connection with the LightstreamerClient owning the ConnectionOptions upon \n     * which the setter was called\nEND_NODE_JSDOC_EXCLUDE\n     * .</p>\n     * \n     * @throws {IllegalArgumentException} if a negative, zero, or a not-number \n     * value is passed.\n     *\n     * @param {Number} stalledTimeout The idle time (in milliseconds)\n     * allowed before entering the \"STALLED\" status.\n     *\n     * @see ConnectionOptions#setReconnectTimeout\n     */\n    setStalledTimeout: function(stalledTimeout) {\n      this.heavySetter(\"stalledTimeout\",this.checkPositiveNumber(stalledTimeout));\n    },\n  \n    /**  \n     * Inquiry method that gets the extra time the client can wait\n     * when an expected keepalive packet has not been received on a stream\n     * connection (and no actual data has arrived), before entering the\n     * \"STALLED\" status.\n     *\n     * @return {Number} The idle time (in milliseconds) admitted before entering the\n     * \"STALLED\" status.\n     *\n     * @see ConnectionOptions#setStalledTimeout\n     */\n    getStalledTimeout: function() {\n      return this.stalledTimeout;\n    },\n    \n    /**\n     * Does nothing.\n     * <p>\n     * <b>The method is deprecated and it has no effect.\n     * To act on connection timeouts use {@link ConnectionOptions#setRetryDelay}.</b>\n     */\n    setConnectTimeout: function(connectTimeout) {\n        // ignore: see setRetryDelay\n    },\n\n\n    /**\n     * Returns the same value as {@link ConnectionOptions#getRetryDelay}.\n     * <p>\n     * <b>The method is deprecated: use {@link ConnectionOptions#getRetryDelay} instead.</b>\n     */\n    getConnectTimeout: function() {\n        return String(this.getRetryDelay());\n    },\n\n\n    /**\n     * Does nothing.\n     * <p>\n     * <b>The method is deprecated and it has no effect.\n     * To act on connection timeouts, only {@link ConnectionOptions#setRetryDelay} is available.</b>\n     */\n    setCurrentConnectTimeout: function(currentConnectTimeout) {\n        // ignore: see setRetryDelay\n    },\n\n\n    /**\n     * Inquiry method that gets the maximum time to wait for a response to a request.\n     * \n     * <p>\n     * This value corresponds to the retry delay, but, in case of multiple failed attempts\n     * on unresponsive connections, it can be changed dynamically by the library to higher values.\n     * When this happens, the current value cannot be altered, but by issuing\n     * {@link LightstreamerClient#disconnect} and {@link LightstreamerClient#connect}\n     * it will restart from the retry delay.\n     *\n     * @return {Number} The time (in milliseconds) allowed to wait before trying a new connection.\n     * \n     * @see ConnectionOptions#setRetryDelay\n     */\n    getCurrentConnectTimeout: function() {\n        return this.currentConnectTimeout;\n    },\n\n    \n    /**\n     * Setter method that sets \n     * <ol>\n     * <li>the minimum time to wait before trying a new connection\n     * to the Server in case the previous one failed for any reason; and</li>\n     * <li>the maximum time to wait for a response to a request \n     * before dropping the connection and trying with a different approach.</li>\n     * </ol>\n     * \n     * <p>\n     * Enforcing a delay between reconnections prevents strict loops of connection attempts when these attempts\n     * always fail immediately because of some persisting issue.\n     * This applies both to reconnections aimed at opening a new session and to reconnections\n     * aimed at attempting a recovery of the current session.<BR>\n     * Note that the delay is calculated from the moment the effort to create a connection\n     * is made, not from the moment the failure is detected.\n     * As a consequence, when a working connection is interrupted, this timeout is usually\n     * already consumed and the new attempt can be immediate (except that\n     * {@link ConnectionOptions#setFirstRetryMaxDelay} will apply in this case).\n     * As another consequence, when a connection attempt gets no answer and times out,\n     * the new attempt will be immediate.\n     * \n     * <p>\n     * As a timeout on unresponsive connections, it is applied in these cases:\n     * <ul>\n     * <li><i>Streaming</i>: Applied on any attempt to setup the streaming connection. If after the \n     * timeout no data has arrived on the stream connection, the client may automatically switch transport \n     * or may resort to a polling connection.</li>\n     * <li>Polling and pre-flight requests</i>: Applied on every connection. If after the timeout \n     * no data has arrived on the polling connection, the entire connection process restarts from scratch.</li>\n     * </ul>\n     * \n     * <p>\n     * <b>This setting imposes only a minimum delay. In order to avoid network congestion, the library may use a longer delay if the issue preventing the\n     * establishment of a session persists.</b>\n     *    \n     * <p class=\"default-value\"><b>Default value:</b> 4000 (4 seconds).</p>\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This value can be set and changed at any time.</p>\n     * \n     * <p class=\"notification\"><b>Notification:</b> A change to this setting will be notified through a\n     * call to {@link ClientListener#onPropertyChange} with argument \"retryDelay\" on any \n     * {@link ClientListener}\nSTART_NODE_JSDOC_EXCLUDE\n     * listening to any LightstreamerClient sharing the same \n     * connection with the LightstreamerClient owning the ConnectionOptions upon \n     * which the setter was called\nEND_NODE_JSDOC_EXCLUDE\n     * .</p>\n     * \n     * @throws {IllegalArgumentException} if a negative, zero, or a not-number \n     * value is passed.\n     * \n     * @param {Number} retryDelay The time (in milliseconds)\n     * to wait before trying a new connection.\n     *\n     * @see ConnectionOptions#setFirstRetryMaxDelay\n     * @see ConnectionOptions#getCurrentConnectTimeout\n     */\n    setRetryDelay: function(retryDelay) {\n        var n = this.checkPositiveNumber(retryDelay);\n        this.heavySetter(\"retryDelay\", n);\n        this.resetRetryDelay(n);\n        this.resetConnectTimeout(n);\n    },\n    \n    /**  \n     * Inquiry method that gets the minimum time to wait before trying a new connection\n     * to the Server in case the previous one failed for any reason, which is also the maximum time to wait for a response to a request \n     * before dropping the connection and trying with a different approach.\n     * Note that the delay is calculated from the moment the effort to create a connection\n     * is made, not from the moment the failure is detected or the connection timeout expires.\n     *\n     * @return {Number} The time (in milliseconds) to wait before trying a new connection.\n     *\n     * @see ConnectionOptions#setRetryDelay\n     */\n    getRetryDelay: function() {\n        return this.retryDelay;\n    },\n    \n    \n    /**\n     * Setter method that sets the maximum time to wait before trying a new connection to the Server\n     * in case the previous one is unexpectedly closed while correctly working.\n     * The new connection may be either the opening of a new session or an attempt to recovery\n     * the current session, depending on the kind of interruption.\n     * <BR/>The actual delay is a randomized value between 0 and this value. \n     * This randomization might help avoid a load spike on the cluster due to simultaneous reconnections, should one of \n     * the active servers be stopped. Note that this delay is only applied before the first reconnection: should such \n     * reconnection fail, only the setting of {@link ConnectionOptions#setRetryDelay} will be applied.\n     *    \n     * <p class=\"default-value\"><b>Default value:</b> 100 (0.1 seconds).</p>\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This value can be set and changed at any time.</p>\n     * \n     * <p class=\"notification\"><b>Notification:</b> A change to this setting will be notified through a\n     * call to {@link ClientListener#onPropertyChange} with argument \"firstRetryMaxDelay\" on any \n     * {@link ClientListener}\nSTART_NODE_JSDOC_EXCLUDE\n     * listening to any LightstreamerClient sharing the same \n     * connection with the LightstreamerClient owning the ConnectionOptions upon \n     * which the setter was called\nEND_NODE_JSDOC_EXCLUDE\n     * .</p>\n     * \n     * @throws {IllegalArgumentException} if a negative, zero, or a not-number \n     * value is passed.\n     * \n     * @param {Number} firstRetryMaxDelay The max time (in milliseconds)\n     * to wait before trying a new connection. \n     */\n    setFirstRetryMaxDelay: function(firstRetryMaxDelay) {\n      this.heavySetter(\"firstRetryMaxDelay\",this.checkPositiveNumber(firstRetryMaxDelay));\n    },\n    \n    /**  \n     * Inquiry method that gets the maximum time to wait before trying a new connection to the Server\n     * in case the previous one is unexpectedly closed while correctly working.\n     *\n     * @return {Number} The max time (in milliseconds)\n     * to wait before trying a new connection.\n     * \n     * @see ConnectionOptions#setFirstRetryMaxDelay\n     */\n    getFirstRetryMaxDelay: function() {\n      return this.firstRetryMaxDelay;\n    },\n    \n    /**\n     * Setter method that turns on or off the slowing algorithm. This heuristic\n     * algorithm tries to detect when the client CPU is not able to keep the pace\n     * of the events sent by the Server on a streaming connection. In that case,\n     * an automatic transition to polling is performed.\n     * <BR/>In polling, the client handles all the data before issuing the\n     * next poll, hence a slow client would just delay the polls, while the Server\n     * accumulates and merges the events and ensures that no obsolete data is sent.\n     * <BR/>Only in very slow clients, the next polling request may be so much\n     * delayed that the Server disposes the session first, because of its protection\n     * timeouts. In this case, a request for a fresh session will be reissued\n     * by the client and this may happen in cycle.\n     *\n     * <p class=\"default-value\"><b>Default value:</b> false.</p>\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b>This setting should be performed before calling the\n     * {@link LightstreamerClient#connect} method. However, the value can be changed\n     * at any time: the supplied value will be used for the next streaming connection (either a bind\n     * or a brand new session).</p>\n     * \n     * <p class=\"notification\"><b>Notification:</b> A change to this setting will be notified through a\n     * call to {@link ClientListener#onPropertyChange} with argument \"slowingEnabled\" on any \n     * {@link ClientListener}\nSTART_NODE_JSDOC_EXCLUDE\n     * listening to any LightstreamerClient sharing the same \n     * connection with the LightstreamerClient owning the ConnectionOptions upon \n     * which the setter was called\nEND_NODE_JSDOC_EXCLUDE\n     * .</p>\n     * \n     * @throws {IllegalArgumentException} if a not boolean value is given.\n     *\n     * @param {boolean} slowingEnabled true or false, to enable or disable\n     * the heuristic algorithm that lowers the item update frequency. \n     */\n    setSlowingEnabled: function(slowingEnabled) {\n      this.heavySetter(\"slowingEnabled\",this.checkBool(slowingEnabled));\n    },\n    \n    /**  \n     * Inquiry method that checks if the slowing algorithm is enabled or not.\n     *\n     * @return {boolean} Whether the slowing algorithm is enabled or not.\n     *\n     * @see ConnectionOptions#setSlowingEnabled\n     */\n    isSlowingEnabled: function() {\n      return this.slowingEnabled;\n    },\n    \n    /**\n     * Setter method that can be used to disable/enable the \n     * Stream-Sense algorithm and to force the client to use a fixed transport or a\n     * fixed combination of a transport and a connection type. When a combination is specified the\n     * Stream-Sense algorithm is completely disabled.\n     * <BR>The method can be used to switch between streaming and polling connection \n     * types and between HTTP and WebSocket transports.\n     * <BR>In some cases, the requested status may not be reached, because of \n     * connection or environment problems. In that case the client will continuously\n     * attempt to reach the configured status.\n     * <BR>Note that if the Stream-Sense algorithm is disabled, the client may still\n     * enter the \"CONNECTED:STREAM-SENSING\" status; however, in that case,\n     * if it eventually finds out that streaming is not possible, no recovery will\n     * be tried.\n     * \n     * <p class=\"default-value\"><b>Default value:</b> null (full Stream-Sense enabled).</p>\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b>This method can be called at any time. If called while \n     * the client is connecting or connected it will instruct to switch connection \n     * type to match the given configuration.</p>\n     * \n     * <p class=\"notification\"><b>Notification:</b> A change to this setting will be notified through a\n     * call to {@link ClientListener#onPropertyChange} with argument \"forcedTransport\" on any \n     * {@link ClientListener}\nSTART_NODE_JSDOC_EXCLUDE\n     * listening to any LightstreamerClient sharing the same \n     * connection with the LightstreamerClient owning the ConnectionOptions upon \n     * which the setter was called\nEND_NODE_JSDOC_EXCLUDE\n     * .</p>\n     * \n     * @throws {IllegalArgumentException} if the given value is not in the list\n     * of the admitted ones.\n     * \n     * @param {String} forcedTransport can be one of the following:\n     * <BR>\n     * <ul>\n     *    <li>null: the Stream-Sense algorithm is enabled and\n     *    the client will automatically connect using the most appropriate\n     *    transport and connection type among those made possible by the\n     *    browser/environment.</li>\n     *    <li>\"WS\": the Stream-Sense algorithm is enabled as in the null case but\n     *    the client will only use WebSocket based connections. If a connection\n     *    over WebSocket is not possible because of the browser/environment\n     *    the client will not connect at all.</li>\n     *    <li>\"HTTP\": the Stream-Sense algorithm is enabled as in the null case but\n     *    the client will only use HTTP based connections. If a connection\n     *    over HTTP is not possible because of the browser/environment\n     *    the client will not connect at all.</li>\n     *    <li>\"WS-STREAMING\": the Stream-Sense algorithm is disabled and\n     *    the client will only connect on Streaming over WebSocket. If \n     *    Streaming over WebSocket is not possible because of the browser/environment\n     *    the client will not connect at all.</li>\n     *    <li>\"HTTP-STREAMING\": the Stream-Sense algorithm is disabled and\n     *    the client will only connect on Streaming over HTTP. If \n     *    Streaming over HTTP is not possible because of the browser/environment\n     *    the client will not connect at all.</li> \n     *    <li>\"WS-POLLING\": the Stream-Sense algorithm is disabled and\n     *    the client will only connect on Polling over WebSocket. If \n     *    Polling over WebSocket is not possible because of the browser/environment\n     *    the client will not connect at all.</li>\n     *    <li>\"HTTP-POLLING\": the Stream-Sense algorithm is disabled and\n     *    the client will only connect on Polling over HTTP. If \n     *    Polling over HTTP is not possible because of the browser/environment\n     *    the client will not connect at all.</li>\n     *  </ul>\n     */\n    setForcedTransport: function(forcedTransport) {\n      if (forcedTransport !== null && !connConstants[forcedTransport]) {\n        throw new IllegalArgumentException(WRONG_FORCED_TRANSPORT);\n      }\n      \n      this.heavySetter(\"forcedTransport\",forcedTransport);\n    },\n    \n    /**  \n     * Inquiry method that gets the value of the forced transport (if any).\n     *\n     * @return {String} The forced transport or null\n     *\n     * @see ConnectionOptions#setForcedTransport\n     */\n    getForcedTransport: function() {\n      return this.forcedTransport;\n    },\n\n\n    /**\n     * Setter method that can be used to disable/enable the automatic handling of \n     * server instance address that may be returned by the Lightstreamer server \n     * during session creation.\n     * <BR>In fact, when a Server cluster is in place, the Server address specified \n     * through {@link ConnectionDetails#setServerAddress} can identify various Server \n     * instances; in order to ensure that all requests related to a session are \n     * issued to the same Server instance, the Server can answer to the session \n     * opening request by providing an address which uniquely identifies its own \n     * instance.\n     * <BR>Setting this value to true permits to ignore that address and to always connect\n     * through the address supplied in setServerAddress. This may be needed in a test\n     * environment, if the Server address specified is actually a local address\n     * to a specific Server instance in the cluster.\n     *\n     * <p class=\"edition-note\"><B>Edition Note:</B> Server Clustering is\n\t * an optional feature, available depending on Edition and License Type.\n\t * To know what features are enabled by your license, please see the License tab of the\n\t * Monitoring Dashboard (by default, available at /dashboard).</p>\n     *\n     * <p class=\"default-value\"><b>Default value:</b> false.</p>\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b>This method can be called at any time. If called while connected, \n     * it will be applied when the next session creation request is issued.</p>\n     * \n     * <p class=\"notification\"><b>Notification:</b> A change to this setting will be notified through a\n     * call to {@link ClientListener#onPropertyChange} with argument \"serverInstanceAddressIgnored\" on any \n     * {@link ClientListener}\nSTART_NODE_JSDOC_EXCLUDE\n     * listening to any LightstreamerClient sharing the same \n     * connection with the LightstreamerClient owning the ConnectionOptions upon \n     * which the setter was called\nEND_NODE_JSDOC_EXCLUDE\n     * .</p>\n     *\n     * @throws {IllegalArgumentException} if a not boolean value is given.\n     *\n     * @param {boolean} serverInstanceAddressIgnored true or false, to ignore\n     * or not the server instance address sent by the server.\n     * \n     * @see ConnectionDetails#setServerAddress\n     */\n    setServerInstanceAddressIgnored: function(serverInstanceAddressIgnored) {\n      this.heavySetter(\"serverInstanceAddressIgnored\",this.checkBool(serverInstanceAddressIgnored));\n    },\n    \n    /**  \n     * Inquiry method that checks if the client is going to ignore the server\n     * instance address that will possibly be sent by the server.\n     *\n     * @return {boolean} Whether or not to ignore the server instance address sent by the \n     * server.\n     * \n     * @see ConnectionOptions#setServerInstanceAddressIgnored\n     */\n    isServerInstanceAddressIgnored: function() {\n      return this.serverInstanceAddressIgnored;\n    },\n    \n    /**\n     * Setter method that enables/disables the cookies-are-required policy on the \n     * client side.\n     * Enabling this policy will guarantee that cookies pertaining to the \n     * Lightstreamer Server will be sent with each request.\nSTART_NODE_JSDOC_EXCLUDE\n     * <BR>This holds for both cookies returned by the Server (possibly affinity cookies\n     * inserted by a Load Balancer standing in between) and for cookies set by\n     * other sites (for instance on the front-end page) and with a domain\n     * specification which includes Lightstreamer Server host.\n     * Likewise, cookies set by Lightstreamer Server and with a domain\n     * specification which includes other sites will be forwarded to them.\nEND_NODE_JSDOC_EXCLUDE\nSTART_WEB_JSDOC_EXCLUDE\n     * <BR>This holds only for cookies returned by the Server (possibly affinity cookies\n     * inserted by a Load Balancer standing in between). If other cookies received\n     * by the application also pertain to Lightstreamer Server host, they must be\n     * manually set through the static {@link LightstreamerClient.addCookies} method.\n     * Likewise, cookies set by Lightstreamer Server and also pertaining to other hosts\n     * accessed by the application must be manually extracted through the static\n     * {@link LightstreamerClient.getCookies} method and handled properly.\nEND_WEB_JSDOC_EXCLUDE\n     * <BR>On the other hand enabling this setting may prevent the client from\n     * opening a streaming connection or even to connect at all depending on the\n     * browser/environment.\n     * \n     * <p class=\"default-value\"><b>Default value:</b> false.</p>\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b>This setting should be performed before calling the\n     * {@link LightstreamerClient#connect} method. However, the value can be changed\n     * at any time: the supplied value will be used for the next HTTP request or WebSocket establishment.</p>\n     * \n     * <p class=\"notification\"><b>Notification:</b> A change to this setting will be notified through a\n     * call to {@link ClientListener#onPropertyChange} with argument \"cookieHandlingRequired\" on any \n     * {@link ClientListener} listening to any LightstreamerClient sharing the same \n     * connection with the LightstreamerClient owning the ConnectionOptions upon \n     * which the setter was called.</p>\n     *\n     * @throws {IllegalArgumentException} if a not boolean value is given.\n     * \n     * @param {boolean} cookieHandlingRequired true/false to enable/disable the \n     * cookies-are-required policy.\n     */\n    setCookieHandlingRequired: function(cookieHandlingRequired) {\n      this.heavySetter(\"cookieHandlingRequired\",this.checkBool(cookieHandlingRequired));\n    },\n    \n    /**  \n     * Inquiry method that checks if the client is going to connect only if it\n     * can guarantee that cookies pertaining to the server will be sent.\n     *\n     * @return {boolean} true/false if the cookies-are-required policy is enabled or not.\n     * \n     * @see ConnectionOptions#setCookieHandlingRequired\n     */\n    isCookieHandlingRequired: function() {\n      return this.cookieHandlingRequired;\n    },\n    \n    /**\n     * Setter method that enables/disables the \"early-open\" of the WebSocket \n     * connection.<BR/>\n     * When enabled a WebSocket is open to the address specified through\n     * {@link ConnectionDetails#setServerAddress} before a potential server instance \n     * address is received during session creation. In this case if a server instance \n     * address is received, the previously open WebSocket is closed and a new one is open \n     * to the received server instance address.<br/> \n     * If disabled, the session creation is completed to verify if such\n     * a server instance address is configured in the server before opening the\n     * WebSocket.<BR/>\n     * For these reasons this setting should be set to false if the server \n     * configuration specifies a &lt;control_link_address&gt; and/or a\n     * &lt;control_link_machine_name&gt; element in its configuration;\n     * viceversa it should be set to true if such elements are not set on\n     * the target server(s) configuration.\n     * \n     * <p class=\"edition-note\"><B>Edition Note:</B> Server Clustering is\n\t * an optional feature, available depending on Edition and License Type.\n\t * To know what features are enabled by your license, please see the License tab of the\n\t * Monitoring Dashboard (by default, available at /dashboard).</p>\n     *\n     * <p class=\"default-value\"><b>Default value:</b> false.</p>\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b>This method can be called at any time. If called while \n     * the client already owns a session it will be applied the next time a session \n     * is requested to a server.</p>\n     * \n     * <p class=\"notification\"><b>Notification:</b> A change to this setting will be notified through a\n     * call to {@link ClientListener#onPropertyChange} with argument \"earlyWSOpenEnabled\" on any \n     * {@link ClientListener}\nSTART_NODE_JSDOC_EXCLUDE\n     * listening to any LightstreamerClient sharing the same \n     * connection with the LightstreamerClient owning the ConnectionOptions upon \n     * which the setter was called\nEND_NODE_JSDOC_EXCLUDE\n     * .</p>\n     *\n     * @throws {IllegalArgumentException} if a not boolean value is given.\n     * \n     * @param {boolean} earlyWSOpenEnabled true/false to enable/disable the \n     * early-open of the WebSocket connection.\n     * \n     * @see ConnectionOptions#setServerInstanceAddressIgnored\n     */\n    setEarlyWSOpenEnabled: function(earlyWSOpenEnabled) {\n      this.heavySetter(\"earlyWSOpenEnabled\",this.checkBool(earlyWSOpenEnabled));\n    },\n    \n    /**  \n     * Inquiry method that checks if the client is going to early-open the\n     * WebSocket connection to the address specified in \n     * {@link ConnectionDetails#setServerAddress}.\n     *\n     * @return {boolean} true/false if the early-open of the WebSocket connection is \n     * enabled or not.\n     * \n     * @see ConnectionOptions#setEarlyWSOpenEnabled\n     */\n    isEarlyWSOpenEnabled: function() {\n      return this.earlyWSOpenEnabled;\n    },\n    \n    /**\n     * Setter method that enables/disables the reverse-heartbeat mechanism\n     * by setting the heartbeat interval. If the given value \n     * (expressed in milliseconds) equals 0 then the reverse-heartbeat mechanism will\n     * be disabled; otherwise if the given value is greater than 0 the mechanism  \n     * will be enabled with the specified interval.\n     * <BR>When the mechanism is active, the client will ensure that there is at most\n     * the specified interval between a control request and the following one,\n     * by sending empty control requests (the \"reverse heartbeats\") if necessary.\n     * <BR>This can serve various purposes:<ul>\n     * <li>Preventing the communication infrastructure from closing an inactive socket\n     * that is ready for reuse for more HTTP control requests, to avoid\n     * connection reestablishment overhead. However it is not \n     * guaranteed that the connection will be kept open, as the underlying TCP \n     * implementation may open a new socket each time a HTTP request needs to be sent.<BR>\n     * Note that this will be done only when a session is in place.</li>\n     * <li>Allowing the Server to detect when a streaming connection or Websocket\n     * is interrupted but not closed. In these cases, the client eventually closes\n     * the connection, but the Server cannot see that (the connection remains \"half-open\")\n     * and just keeps trying to write.\n     * This is done by notifying the timeout to the Server upon each streaming request.\n     * For long polling, the {@link ConnectionOptions#setIdleTimeout} setting has a similar function.</li>\n     * <li>Allowing the Server to detect cases in which the client has closed a connection\n     * in HTTP streaming, but the socket is kept open by some intermediate node,\n     * which keeps consuming the response.\n     * This is also done by notifying the timeout to the Server upon each streaming request,\n     * whereas, for long polling, the {@link ConnectionOptions#setIdleTimeout} setting has a similar function.</li>\n     * </ul>\n     * \n     * <p class=\"default-value\"><b>Default value:</b> 0 (meaning that the mechanism is disabled).</p>\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This setting should be performed before calling the\n     * {@link LightstreamerClient#connect} method. However, the value can be changed\n     * at any time: the setting will be obeyed immediately, unless a higher heartbeat\n     * frequency was notified to the Server for the current connection. The setting\n     * will always be obeyed upon the next connection (either a bind or a brand new session).</p>\n     * \n     * <p class=\"notification\"><b>Notification:</b> A change to this setting will be notified through a\n     * call to {@link ClientListener#onPropertyChange} with argument \"reverseHeartbeatInterval\" on any \n     * {@link ClientListener}\nSTART_NODE_JSDOC_EXCLUDE\n     * listening to any LightstreamerClient sharing the same \n     * connection with the LightstreamerClient owning the ConnectionOptions upon \n     * which the setter was called\nEND_NODE_JSDOC_EXCLUDE\n     * .</p>\n     *\n     * @throws {IllegalArgumentException} if a negative, decimal\n     * or a not-number value is passed.\n     * \n     * @param {Number} reverseHeartbeatInterval the interval, expressed in milliseconds,\n     * between subsequent reverse-heartbeats, or 0.\n     */\n    setReverseHeartbeatInterval: function(reverseHeartbeatInterval) {\n      this.heavySetter(\"reverseHeartbeatInterval\",this.checkPositiveNumber(reverseHeartbeatInterval,true));\n    },\n    \n    /**\n     * Inquiry method that gets the reverse-heartbeat interval expressed in \n     * milliseconds.\n     * A 0 value is possible, meaning that the mechanism is disabled.\n     * \n     * @return {Number} the reverse-heartbeat interval, or 0.\n     * \n     * @see ConnectionOptions#setReverseHeartbeatInterval\n     */\n    getReverseHeartbeatInterval: function() {\n      return this.reverseHeartbeatInterval;\n    },\n    \n    /**\n     * Setter method that enables/disables the setting of extra HTTP headers to all the \n     * request performed to the Lightstreamer server by the client.\n     * Note that when the value is set WebSockets are disabled\nSTART_NODE_JSDOC_EXCLUDE\n     * (as the current browser client API does not support the setting of custom HTTP headers)\nEND_NODE_JSDOC_EXCLUDE\n     * unless {@link ConnectionOptions#setHttpExtraHeadersOnSessionCreationOnly}\n     * is set to true. <BR> Also note that\n     * if the browser/environment does not have the possibility to send extra headers while \n     * some are specified through this method it will fail to connect.\n     * Also note that the Content-Type header is reserved by the client library itself,\n     * while other headers might be refused by the browser/environment and others might cause the\n     * connection to the server to fail.\nSTART_WEB_JSDOC_EXCLUDE\n     * <BR>For instance, you cannot use this method to specify custom cookies to be sent to\n     * Lightstreamer Server. Use the static {@link LightstreamerClient.addCookies} instead\n     * (and {@link LightstreamerClient.getCookies} for inquiries). <BR>\nEND_WEB_JSDOC_EXCLUDE\nSTART_NODE_JSDOC_EXCLUDE\n     * <BR>For instance, you cannot use this method to specify custom cookies to be sent to\n     * Lightstreamer Server. They can only be set and inquired through the browser's\n     * document.cookie object. <BR>\nEND_NODE_JSDOC_EXCLUDE\n     * The use of custom headers might also cause the\n     * browser/environment to send an OPTIONS request to the server before opening the actual connection.\nSTART_NODE_JSDOC_EXCLUDE\n     * Finally, note that, in case of cross-origin requests, extra headers have to be authorized\n     * on the server configuration file, in the cross_domain_policy element.\nEND_NODE_JSDOC_EXCLUDE\n     * \n     * <p class=\"default-value\"><b>Default value:</b> null (meaning no extra headers are sent).</p>\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b>This setting should be performed before calling the\n     * {@link LightstreamerClient#connect} method. However, the value can be changed\n     * at any time: the supplied value will be used for the next HTTP request or WebSocket establishment.</p>\n     * \n     * <p class=\"notification\"><b>Notification:</b> A change to this setting will be notified through a\n     * call to {@link ClientListener#onPropertyChange} with argument \"httpExtraHeaders\" on any \n     * {@link ClientListener}\nSTART_NODE_JSDOC_EXCLUDE\n     * listening to any LightstreamerClient sharing the same \n     * connection with the LightstreamerClient owning the ConnectionOptions upon \n     * which the setter was called\nEND_NODE_JSDOC_EXCLUDE\n     * .</p>\n     * \n     * @param {Object} headersObj a JSON object containing header-name header-value pairs. \n     * Null can be specified to avoid extra headers to be sent.\n     */\n    setHttpExtraHeaders: function(headersObj) {\n      //we store it and dispatch it as string so that it can be passed across windows using copyByBValue\n      if (!headersObj) {\n        this.heavySetter(\"httpExtraHeaders\",null);\n        return;\n      }\n      var headersStr = \"\";\n      for (var i in headersObj) {\n        headersStr += i +\"\\n\"+ headersObj[i]+\"\\n\";\n      }\n      \n      this.heavySetter(\"httpExtraHeaders\",headersStr);\n      \n    },\n    \n    /**\n     * Inquiry method that gets the JSON object containing the extra headers\n     * to be sent to the server.\n     * \n     * @return {Object} the JSON object containing the extra headers\n     * to be sent\n     * \n     * @see ConnectionOptions#setHttpExtraHeaders\n     */\n    getHttpExtraHeaders: function() {\n      //put together the object\n      if (!this.httpExtraHeaders) {\n        return this.httpExtraHeaders;\n      }\n      var headerObj = {};\n      var headersArray = this.httpExtraHeaders.split('\\n');\n      \n      for (var i=0; i<headersArray.length-1; i+=2 ) {\n        headerObj[headersArray[i]] = headersArray[i+1];\n      }\n      \n      return headerObj;\n    },\n    \n    /**\n     * Setter method that enables/disables a restriction on the forwarding of the extra http headers \n     * specified through {@link ConnectionOptions#setHttpExtraHeaders}.\n     * If true, said headers will only be sent during the session creation process (and thus\n     * will still be available to the Metadata Adapter notifyUser method) but will not\n     * be sent on following requests. On the contrary, when set to true, the specified extra\n     * headers will be sent to the server on every request: as a consequence, if any \n     * extra header is actually specified, WebSockets will be disabled (as the current browser\n     * client API does not support the setting of custom HTTP headers).\n     * \n     * <p class=\"default-value\"><b>Default value:</b> false.</p>\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b>This setting should be performed before calling the\n     * {@link LightstreamerClient#connect} method. However, the value can be changed\n     * at any time: the supplied value will be used for the next HTTP request or WebSocket establishment.</p>\n     * \n     * <p class=\"notification\"><b>Notification:</b> A change to this setting will be notified through a\n     * call to {@link ClientListener#onPropertyChange} with argument \"httpExtraHeadersOnSessionCreationOnly\" on any \n     * {@link ClientListener}\nSTART_NODE_JSDOC_EXCLUDE\n     * listening to any LightstreamerClient sharing the same \n     * connection with the LightstreamerClient owning the ConnectionOptions upon \n     * which the setter was called\nEND_NODE_JSDOC_EXCLUDE\n     * .</p>\n     *\n     * @throws {IllegalArgumentException} if a not boolean value is given.\n     * \n     * @param {boolean} httpExtraHeadersOnSessionCreationOnly true/false to enable/disable the \n     * restriction on extra headers forwarding.\n     */\n    setHttpExtraHeadersOnSessionCreationOnly: function(httpExtraHeadersOnSessionCreationOnly) {\n      this.heavySetter(\"httpExtraHeadersOnSessionCreationOnly\",this.checkBool(httpExtraHeadersOnSessionCreationOnly));\n    },\n    \n    /**  \n     * Inquiry method that checks if the restriction on the forwarding of the \n     * configured extra http headers applies or not.\n     *\n     * @return {boolean} true/false if the restriction applies or not.\n     * \n     * @see ConnectionOptions#setHttpExtraHeadersOnSessionCreationOnly\n     */\n    isHttpExtraHeadersOnSessionCreationOnly: function() {\n      return this.httpExtraHeadersOnSessionCreationOnly;\n    },\n    \n    /**\n     * Setter method that sets the maximum time allowed for attempts to recover\n     * the current session upon an interruption, after which a new session will be created.\n     * If the given value (expressed in milliseconds) equals 0, then any attempt\n     * to recover the current session will be prevented in the first place.\n     * <BR>In fact, in an attempt to recover the current session, the client will\n     * periodically try to access the Server at the address related with the current\n     * session. In some cases, this timeout, by enforcing a fresh connection attempt,\n     * may prevent an infinite sequence of unsuccessful attempts to access the Server.\n     * <BR>Note that, when the Server is reached, the recovery may fail due to a\n     * Server side timeout on the retention of the session and the updates sent.\n     * In that case, a new session will be created anyway.\n     * A setting smaller than the Server timeouts may prevent such useless failures,\n     * but, if too small, it may also prevent successful recovery in some cases.</p>\n     * \n     * <p class=\"default-value\"><b>Default value:</b> 15000 (15 seconds).</p>\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This value can be set and changed at any time.</p>\n     * \n     * <p class=\"notification\"><b>Notification:</b> A change to this setting will be notified through a\n     * call to {@link ClientListener#onPropertyChange} with argument \"sessionRecoveryTimeout\" on any \n     * {@link ClientListener}\nSTART_NODE_JSDOC_EXCLUDE\n     * listening to any LightstreamerClient sharing the same \n     * connection with the LightstreamerClient owning the ConnectionOptions upon \n     * which the setter was called\nEND_NODE_JSDOC_EXCLUDE\n     * .</p>\n     *\n     * @throws {IllegalArgumentException} if a negative, decimal\n     * or a not-number value is passed.\n     * \n     * @param {Number} sessionRecoveryTimeout the maximum time allowed\n     * for recovery attempts, expressed in milliseconds, including 0.\n     */\n    setSessionRecoveryTimeout: function(sessionRecoveryTimeout) {\n      this.heavySetter(\"sessionRecoveryTimeout\",this.checkPositiveNumber(sessionRecoveryTimeout,true));\n    },\n    \n    /**\n     * Inquiry method that gets the maximum time allowed for attempts to recover\n     * the current session upon an interruption, after which a new session will be created.\n     * A 0 value also means that any attempt to recover the current session is prevented\n     * in the first place.\n     * \n     * @return {Number} the maximum time allowed for recovery attempts, possibly 0.\n     * \n     * @see ConnectionOptions#setSessionRecoveryTimeout\n     */\n    getSessionRecoveryTimeout: function() {\n      return this.sessionRecoveryTimeout;\n    },\n    \n    ///////////////PRIVATE\n    \n    /**\n     * @private\n     */\n    hasHttpExtraHeaders: function(sessionCreation) {\n      //put together the object\n      if (!this.httpExtraHeaders) {\n        return false;\n      } else if (sessionCreation) {\n        return true;\n      }\n      return !this.httpExtraHeadersOnSessionCreationOnly;\n    },\n    \n    /**\n     * @private\n     */\n    extractHttpExtraHeaders: function(sessionCreation) {\n      if (!sessionCreation && this.httpExtraHeadersOnSessionCreationOnly) {\n        return null;\n      } else {\n        return this.getHttpExtraHeaders();\n      }\n    },\n    \n    /**\n     * TODO documentation\n     * @private\n     */\n    setXDomainStreamingEnabled: function(xDomainStreamingEnabled) {\n      this.heavySetter(\"xDomainStreamingEnabled\",this.checkBool(xDomainStreamingEnabled));\n    },\n    \n    /**\n     * TODO documentation\n     * @private\n     */\n    isXDomainStreamingEnabled: function() {\n      return this.xDomainStreamingEnabled;\n    },\n    \n    /**\n     * TODO documentation\n     * @private\n     */\n    setCorsXHREnabled: function(corsXHREnabled) {\n      this.heavySetter(\"corsXHREnabled\",this.checkBool(corsXHREnabled));\n    },\n    \n    /**\n     * TODO documentation\n     * @private\n     */\n    isCorsXHREnabled: function() {\n      return this.corsXHREnabled;\n    },\n    \n    /**\n     * TODO documentation\n     * @private\n     */\n    setForceBindTimeout: function(_timeout) {\n      this.heavySetter(\"forceBindTimeout\",this.checkPositiveNumber(_timeout));\n    },\n    \n    /**\n     * TODO documentation\n     * @private\n     */\n    getForceBindTimeout: function() {\n      return this.forceBindTimeout;\n    },\n    \n    /**\n     * TODO documentation\n     * @private\n     */\n    setSwitchCheckTimeout: function(_timeout) {\n      this.heavySetter(\"switchCheckTimeout\",this.checkPositiveNumber(_timeout));\n    },\n    \n    /**\n     * TODO documentation\n     * @private\n     */\n    getSwitchCheckTimeout: function() {\n      return this.switchCheckTimeout;\n    },\n    \n    /**\n     * TODO documentation\n     * @private\n     */\n    setSpinFixTimeout: function(_timeout) {\n      this.heavySetter(\"spinFixTimeout\",this.checkPositiveNumber(_timeout));\n    },\n    \n    /**\n     * TODO documentation\n     * @private\n     */\n    getSpinFixTimeout: function() {\n      return this.spinFixTimeout;\n    },\n    \n    /**\n     * TODO documentation\n     * @private\n     */\n    setSpinFixEnabled: function(_enabled) {\n      this.heavySetter(\"spinFixTimeout\",this._enabled === null ? null : this.checkBool(_enabled));\n    },\n    \n    /**\n     * TODO documentation\n     * @private\n     */\n    getSpinFixEnabled: function() {\n      return this.spinFixEnabled;\n    },\n    \n    /**\n     * (used by LightstreamerClient)\n     * @private\n     */\n    installRemoteAdapterStatusObserver: function(metadataErrorCode, dataAdapterName, statusItemName, reconnectMaxDelay) {\n        this.remoteAdapterStatusObserver = {\n                metadataErrorCode: metadataErrorCode, \n                dataAdapterName: dataAdapterName, \n                statusItemName: statusItemName, \n                reconnectMaxDelay: reconnectMaxDelay\n        };\n    }\n    \n  };\n\n\n  ConnectionOptions.prototype[\"setContentLength\"] = ConnectionOptions.prototype.setContentLength;\n  ConnectionOptions.prototype[\"getContentLength\"] = ConnectionOptions.prototype.getContentLength;\n  ConnectionOptions.prototype[\"setIdleTimeout\"] = ConnectionOptions.prototype.setIdleTimeout;\n  ConnectionOptions.prototype[\"getIdleTimeout\"] = ConnectionOptions.prototype.getIdleTimeout;\n  ConnectionOptions.prototype[\"setKeepaliveInterval\"] = ConnectionOptions.prototype.setKeepaliveInterval;\n  ConnectionOptions.prototype[\"getKeepaliveInterval\"] = ConnectionOptions.prototype.getKeepaliveInterval;\n  ConnectionOptions.prototype[\"setRequestedMaxBandwidth\"] = ConnectionOptions.prototype.setRequestedMaxBandwidth;\n  ConnectionOptions.prototype[\"getRequestedMaxBandwidth\"] = ConnectionOptions.prototype.getRequestedMaxBandwidth;\n  ConnectionOptions.prototype[\"getRealMaxBandwidth\"] = ConnectionOptions.prototype.getRealMaxBandwidth;\n  ConnectionOptions.prototype[\"setPollingInterval\"] = ConnectionOptions.prototype.setPollingInterval;\n  ConnectionOptions.prototype[\"getPollingInterval\"] = ConnectionOptions.prototype.getPollingInterval;\n  ConnectionOptions.prototype[\"setReconnectTimeout\"] = ConnectionOptions.prototype.setReconnectTimeout;\n  ConnectionOptions.prototype[\"getReconnectTimeout\"] = ConnectionOptions.prototype.getReconnectTimeout;\n  ConnectionOptions.prototype[\"setStalledTimeout\"] = ConnectionOptions.prototype.setStalledTimeout;\n  ConnectionOptions.prototype[\"getStalledTimeout\"] = ConnectionOptions.prototype.getStalledTimeout;\n  ConnectionOptions.prototype[\"setConnectTimeout\"] = ConnectionOptions.prototype.setConnectTimeout;\n  ConnectionOptions.prototype[\"getConnectTimeout\"] = ConnectionOptions.prototype.getConnectTimeout;\n  ConnectionOptions.prototype[\"setCurrentConnectTimeout\"] = ConnectionOptions.prototype.setCurrentConnectTimeout;\n  ConnectionOptions.prototype[\"getCurrentConnectTimeout\"] = ConnectionOptions.prototype.getCurrentConnectTimeout;\n  ConnectionOptions.prototype[\"setRetryDelay\"] = ConnectionOptions.prototype.setRetryDelay;\n  ConnectionOptions.prototype[\"getRetryDelay\"] = ConnectionOptions.prototype.getRetryDelay;\n  ConnectionOptions.prototype[\"setFirstRetryMaxDelay\"] = ConnectionOptions.prototype.setFirstRetryMaxDelay;\n  ConnectionOptions.prototype[\"getFirstRetryMaxDelay\"] = ConnectionOptions.prototype.getFirstRetryMaxDelay;\n  ConnectionOptions.prototype[\"setSlowingEnabled\"] = ConnectionOptions.prototype.setSlowingEnabled;\n  ConnectionOptions.prototype[\"isSlowingEnabled\"] = ConnectionOptions.prototype.isSlowingEnabled;\n  ConnectionOptions.prototype[\"setForcedTransport\"] = ConnectionOptions.prototype.setForcedTransport;\n  ConnectionOptions.prototype[\"getForcedTransport\"] = ConnectionOptions.prototype.getForcedTransport;\n  ConnectionOptions.prototype[\"setServerInstanceAddressIgnored\"] = ConnectionOptions.prototype.setServerInstanceAddressIgnored;\n  ConnectionOptions.prototype[\"isServerInstanceAddressIgnored\"] = ConnectionOptions.prototype.isServerInstanceAddressIgnored;\n  ConnectionOptions.prototype[\"setCookieHandlingRequired\"] = ConnectionOptions.prototype.setCookieHandlingRequired;\n  ConnectionOptions.prototype[\"isCookieHandlingRequired\"] = ConnectionOptions.prototype.isCookieHandlingRequired;\n  ConnectionOptions.prototype[\"setEarlyWSOpenEnabled\"] = ConnectionOptions.prototype.setEarlyWSOpenEnabled;\n  ConnectionOptions.prototype[\"isEarlyWSOpenEnabled\"] = ConnectionOptions.prototype.isEarlyWSOpenEnabled;\n  ConnectionOptions.prototype[\"setReverseHeartbeatInterval\"] = ConnectionOptions.prototype.setReverseHeartbeatInterval;\n  ConnectionOptions.prototype[\"getReverseHeartbeatInterval\"] = ConnectionOptions.prototype.getReverseHeartbeatInterval;\n  ConnectionOptions.prototype[\"setHttpExtraHeaders\"] = ConnectionOptions.prototype.setHttpExtraHeaders;\n  ConnectionOptions.prototype[\"getHttpExtraHeaders\"] = ConnectionOptions.prototype.getHttpExtraHeaders;\n  ConnectionOptions.prototype[\"setHttpExtraHeadersOnSessionCreationOnly\"] = ConnectionOptions.prototype.setHttpExtraHeadersOnSessionCreationOnly;\n  ConnectionOptions.prototype[\"isHttpExtraHeadersOnSessionCreationOnly\"] = ConnectionOptions.prototype.isHttpExtraHeadersOnSessionCreationOnly;\n  ConnectionOptions.prototype[\"setSessionRecoveryTimeout\"] = ConnectionOptions.prototype.setSessionRecoveryTimeout;\n  ConnectionOptions.prototype[\"getSessionRecoveryTimeout\"] = ConnectionOptions.prototype.getSessionRecoveryTimeout;\n  \n  //\n  ConnectionOptions.prototype[\"setXDomainStreamingEnabled\"] = ConnectionOptions.prototype.setXDomainStreamingEnabled;\n  ConnectionOptions.prototype[\"isXDomainStreamingEnabled\"] = ConnectionOptions.prototype.isXDomainStreamingEnabled;\n  ConnectionOptions.prototype[\"setCorsXHREnabled\"] = ConnectionOptions.prototype.setCorsXHREnabled;\n  ConnectionOptions.prototype[\"isCorsXHREnabled\"] = ConnectionOptions.prototype.isCorsXHREnabled;\n  ConnectionOptions.prototype[\"setForceBindTimeout\"] = ConnectionOptions.prototype.setForceBindTimeout;\n  ConnectionOptions.prototype[\"getForceBindTimeout\"] = ConnectionOptions.prototype.getForceBindTimeout;\n  ConnectionOptions.prototype[\"setSwitchCheckTimeout\"] = ConnectionOptions.prototype.setSwitchCheckTimeout;\n  ConnectionOptions.prototype[\"getSwitchCheckTimeout\"] = ConnectionOptions.prototype.getSwitchCheckTimeout;\n  ConnectionOptions.prototype[\"setSpinFixTimeout\"] = ConnectionOptions.prototype.setSpinFixTimeout;\n  ConnectionOptions.prototype[\"getSpinFixTimeout\"] = ConnectionOptions.prototype.getSpinFixTimeout;\n  ConnectionOptions.prototype[\"setSpinFixEnabled\"] = ConnectionOptions.prototype.setSpinFixEnabled;\n  ConnectionOptions.prototype[\"getSpinFixEnabled\"] = ConnectionOptions.prototype.getSpinFixEnabled;\n\n  ConnectionOptions.prototype[\"setRetryTimeout\"] = ConnectionOptions.prototype.setRetryDelay; //keep for backward compatibility with 6.1\n  ConnectionOptions.prototype[\"getRetryTimeout\"] = ConnectionOptions.prototype.getRetryDelay; //keep for backward compatibility with 6.1\n  ConnectionOptions.prototype[\"setIdleMillis\"] = ConnectionOptions.prototype.setIdleTimeout; //keep for backward compatibility with 6.2 (and 7.0.1)\n  ConnectionOptions.prototype[\"getIdleMillis\"] = ConnectionOptions.prototype.getIdleTimeout; //keep for backward compatibility with 6.2 (and 7.0.1)\n  ConnectionOptions.prototype[\"setKeepaliveMillis\"] = ConnectionOptions.prototype.setKeepaliveInterval; //keep for backward compatibility with 6.2 (and 7.0.1)\n  ConnectionOptions.prototype[\"getKeepaliveMillis\"] = ConnectionOptions.prototype.getKeepaliveInterval; //keep for backward compatibility with 6.2 (and 7.0.1)\n  ConnectionOptions.prototype[\"setPollingMillis\"] = ConnectionOptions.prototype.setPollingInterval; //keep for backward compatibility with 6.2 (and 7.0.1)\n  ConnectionOptions.prototype[\"getPollingMillis\"] = ConnectionOptions.prototype.getPollingInterval; //keep for backward compatibility with 6.2 (and 7.0.1)\n  ConnectionOptions.prototype[\"setReverseHeartbeatMillis\"] = ConnectionOptions.prototype.setReverseHeartbeatInterval; //keep for backward compatibility with 6.2 (and 7.0.1)\n  ConnectionOptions.prototype[\"getReverseHeartbeatMillis\"] = ConnectionOptions.prototype.getReverseHeartbeatInterval; //keep for backward compatibility with 6.2 (and 7.0.1)\n\n  Inheritance(ConnectionOptions, Bean);\n  Inheritance(ConnectionOptions, RetryDelayCounter, true); // mixin  \n  Inheritance(ConnectionOptions, ConnectTimeoutCounter, true); // mixin  \n  export default ConnectionOptions;\n\n\n","import LoggerManager from \"../../src-log/LoggerManager\";\nimport Constants from \"../Constants\";\n    \n    var log = LoggerManager.getLoggerProxy(Constants.SESSION);\n    \n    /**\n     * WARNING\n     * The algorithm is the same as RetryDelayCounter. In case of change, consider whether the change must\n     * be ported there.\n     * <p>\n     * \n     * Computes <code>currentConnectTimeout</code> in the following way:\n     * <ul>\n     * <li>the first 10 times when increase() is called, currentConnectTimeout equals connectTimeout</li>\n     * <li>the next times, currentConnectTimeout is doubled until it reaches the value of 60s</li>\n     * </ul>\n     * \n     * @since December 2018\n     */\n    var ConnectTimeoutCounter = function(delay) {\n        this.initConnectTimeout(delay);\n    };\n    \n    ConnectTimeoutCounter.prototype = {\n            \n            /**\n             * Resets connectTimeout and currentConnectTimeout.\n             */\n            resetConnectTimeout: function(delay) {\n                this.initConnectTimeout(delay);\n                if (log.isDebugLogEnabled()) {\n                    log.debug(\"Reset currentConnectTimeout: \" + this.currentConnectTimeout);\n                }\n            },\n            \n            /**\n             * Increase currentConnectTimeout.\n             */\n            increaseConnectTimeout: function() {\n                if (this.connectAttempt >= 9 && this.currentConnectTimeout < this.maxConnectTimeout) {\n                    this.currentConnectTimeout *= 2;\n                    if (this.currentConnectTimeout > this.maxConnectTimeout) {\n                        this.currentConnectTimeout = this.maxConnectTimeout;\n                    }\n                    if (log.isDebugLogEnabled()) {\n                        log.debug(\"Increase currentConnectTimeout: \" + this.currentConnectTimeout);\n                    }\n                }\n                this.connectAttempt++;\n            },\n            \n            /**\n             * Increase the timeout to the maximum value.\n             */\n            increaseConnectTimeoutToMax: function() {\n                this.currentConnectTimeout = this.maxConnectTimeout;\n                if (log.isDebugLogEnabled()) {\n                    log.debug(\"Increase currentConnectTimeout to max: \" + this.currentConnectTimeout);\n                }\n            },\n            \n            /**\n             * Initializes connectTimeout and currentConnectTimeout.\n             */\n            initConnectTimeout: function(connectTimeout) {\n                this.currentConnectTimeout = connectTimeout;\n                this.minConnectTimeout = connectTimeout;\n                this.maxConnectTimeout = Math.max(60000, connectTimeout);\n                this.connectAttempt = 0;\n            }\n    };\n\n    export default ConnectTimeoutCounter;\n\n","import LoggerManager from \"../../src-log/LoggerManager\";\nimport Constants from \"../Constants\";\n    \n    var log = LoggerManager.getLoggerProxy(Constants.SESSION);\n    \n    /**\n     * WARNING\n     * The algorithm is the same as ConnectTimeoutCounter. In case of change, consider whether the change must\n     * be ported there.\n     * <p>\n     * \n     * Computes <code>currentRetryDelay</code> in the following way:\n     * <ul>\n     * <li>the first 10 times when increase() is called, currentRetryDelay equals retryDelay</li>\n     * <li>the next times, currentRetryDelay is doubled until it reaches the value of 60s</li>\n     * </ul>\n     * \n     * @since December 2018\n     */\n    var RetryDelayCounter = function(delay) {\n        this.initRetryDelay(delay);\n    };\n    \n    RetryDelayCounter.prototype = {\n            \n            /**\n             * Resets retryDelay and currentRetryDelay.\n             */\n            resetRetryDelay: function(delay) {\n                this.initRetryDelay(delay);\n                if (log.isDebugLogEnabled()) {\n                    log.debug(\"Reset currentRetryDelay: \" + this.currentRetryDelay);\n                }\n            },\n            \n            /**\n             * Increase currentRetryDelay.\n             */\n            increaseRetryDelay: function() {\n                if (this.retryAttempt >= 9 && this.currentRetryDelay < this.maxRetryDelay) {\n                    this.currentRetryDelay *= 2;\n                    if (this.currentRetryDelay > this.maxRetryDelay) {\n                        this.currentRetryDelay = this.maxRetryDelay;\n                    }\n                    if (log.isDebugLogEnabled()) {\n                        log.debug(\"Increase currentRetryDelay: \" + this.currentRetryDelay);\n                    }\n                }\n                this.retryAttempt++;\n            },\n            \n            /**\n             * Initializes retryDelay and currentRetryDelay.\n             */\n            initRetryDelay: function(retryDelay) {\n                this.currentRetryDelay = retryDelay;\n                this.minRetryDelay = retryDelay;\n                this.maxRetryDelay = Math.max(60000, retryDelay);\n                this.retryAttempt = 0;\n            }\n    };\n\n    export default RetryDelayCounter;\n\n","import Bean from \"./Bean\";\nimport Inheritance from \"../../src-tool/Inheritance\";\nimport Utils from \"../Utils\";\n  \n  var noNotificationList = {};\n\n  var varNames = {\n      connectionRequested: \"connectionRequested\",\n      clientsCount: \"clientsCount\"\n  };\n  varNames = Utils.getReverse(varNames); \n\n  var Configuration = function(toClone){\n\n    this.connectionRequested = false;\n    this.clientsCount = 0;\n\n    \n    this.noNotificationList = noNotificationList; \n    this.varNames = varNames;\n    \n    this._callSuperConstructor(Configuration,arguments); \n    this.constr = \"Configuration\";\n    \n  };\n\n  Configuration.prototype = {\n    getConnectionRequested: function() {\n      return this.connectionRequested;\n    },\n    getClientsCount: function() {\n      return this.clientsCount;\n    }\n  };\n  \n  Inheritance(Configuration, Bean);\n  export default Configuration;\n  \n","import LoggerManager from \"../../src-log/LoggerManager\";\nimport Utils from \"../Utils\";\nimport Inheritance from \"../../src-tool/Inheritance\";\nimport Setter from \"../../src-tool/Setter\";\nimport Constants from \"../Constants\";\n \n  var actionsLogger = LoggerManager.getLoggerProxy(Constants.ACTIONS);\n  var sharingLogger = LoggerManager.getLoggerProxy(Constants.SHARING);\n  \n  \n  var Bean = function(orig){\n    /**\n     * this is an abstract class, actual classes must declare a valid name\n     */ \n    this.constr = \"Bean\";\n\n    this.parent = null;\n    this.broadcastSimples = false;\n\n    /*abstract*/ //this.noNotificationList = [];\n    /*abstract*/ //this.doNotLogValueList = [];\n    /*abstarct*/ //this.varNames = {};\n    \n    if (orig) {\n      this.copySettings(orig);\n    }\n    \n  };\n  \n  Bean.prototype = {\n      \n    getPropName: function(prop) {\n      return this.varNames[prop];\n    },\n  \n    /*public*/ simpleSetter: function(prop,_value) {\n      var propName = this.getPropName(prop);\n      \n      var orig = this[propName];\n      this[propName] = Utils.copyByValue(_value);\n      \n      //actionsLogger.logDebug(\"New value for setting received from internal settings\",this.parent,prop,this.getValueForLog(propName));\n      \n      if (this.parent && this.broadcastSimples) {\n        this.broadcastSetting(prop);   \n        \n      } //else we should be a LightstreamerClient: only the engine sets broadcastSimples to true,\n      //otherwise we'll have loop of broadcasts. LightstreamerClient only broadcasts setting made\n      //through \"proper\" setters; simpleSetter MUST NOT be used by non-library calls\n      \n      if (orig != this[propName]) { //obviously notify changes only if the value is actually changed\n        this.notifyChange(prop);\n      }\n    },\n    \n    /*private*/ getValueForLog: function(propName) {\n      return this.doNotLogValueList && this.doNotLogValueList[propName] ? \"[...]\" : this[propName];\n    },\n    \n    /*protected*/ heavySetter: function(prop,_value) {\n      var propName = this.getPropName(prop);\n            \n      if(_value != this[propName]) {//obviously notify changes only if the value is actually changed\n        //save the new value\n        this[propName] = _value;\n        \n        //actionsLogger.logInfo(\"New value for setting received from API\",prop,this.getValueForLog(propName));\n        \n        //spread the word\n        this.broadcastSetting(prop);\n        //once we have spread the word we issue the change event \n        this.notifyChange(prop);\n      }\n    },\n    \n    /*public*/ setBroadcaster: function(_parent,broadcastSimples) {\n      this.parent = _parent;\n      this.broadcastSimples = broadcastSimples;\n    },\n    \n    /**\n     * @param\n     */\n    /*private*/ broadcastSetting: function(prop) { \n      var propName = this.getPropName(prop);\n      //sharingLogger.logDebug(\"Broadcasting setting to shared LightstreamerClient instances\",prop,this.getValueForLog(propName));\n      \n      if (this.parent && this.parent.broadcastSetting) {\n        if (!this.parent.broadcastSetting(this.constr,prop,Utils.copyByValue(this[propName]))) {\n          // if the broadcast fails only the local instance will have the update value\n          return false;\n        }\n      }\n      \n      \n      return true;\n    },\n    \n    notifyChange: function(prop) {\n      var propName = this.getPropName(prop);\n      if (this.parent && this.parent.notifyOptionChange) {\n        \n        if (this.noNotificationList && this.noNotificationList[propName]) {\n          return;\n        }\n        \n        //actionsLogger.logDebug(\"Setting changed, firing notification\",prop,this.getValueForLog(propName));\n            \n        this.parent.notifyOptionChange(prop,this);\n      }\n    },\n    \n    /*public*/ copySettings: function(original) {\n      var sl = this.varNames;\n      for (var i in sl) {\n        //this[sl[i]] = Utils.copyByValue(original[sl[i]]); \n        this.simpleSetter(i, original[sl[i]]);\n      }\n    },\n\n    forEachProperty: function(call) {\n      for (var i in this.varNames) {\n        call(i, this[this.varNames[i]]);\n      }\n    }\n\n  };\n  \n  Inheritance(Bean,Setter,false,true);\n  export default Bean;\n\n","\n\n  function CallDefinition(wantsResponse,addSessionPhase,responseTimeout) {\n    this.wantsResponse = wantsResponse;\n    this.addSessionPhase = addSessionPhase;\n    this.responseTimeout = responseTimeout || false;\n  };\n\n  var WANTS_RESPONSE = true;\n  var NO_RESPONSE = false;\n  var SESSION_BOUND = true;\n  var NOT_BOUND = false;\n\n  CallDefinition.simple = new CallDefinition(NO_RESPONSE,NOT_BOUND);\n  CallDefinition.simpleWithResponse = new CallDefinition(WANTS_RESPONSE,NOT_BOUND);\n  CallDefinition.simpleWithResponseAndTimeout = new CallDefinition(WANTS_RESPONSE,NOT_BOUND,2000);\n  CallDefinition.session = new CallDefinition(NO_RESPONSE,SESSION_BOUND);\n  CallDefinition.sessionWithResponse = new CallDefinition(WANTS_RESPONSE,SESSION_BOUND);\n  CallDefinition.sessionWithResponseAndTimeout = new CallDefinition(WANTS_RESPONSE,SESSION_BOUND,4000);\n\n  export default CallDefinition;\n","import Constants from \"../Constants\";\n\n  export default function(args,reuse) {\n   \n    var copiedArgs = reuse ? args : [];\n    copiedArgs.changedFields = [];\n    if(!reuse) {\n      copiedArgs[0] = parseInt(args[0]);\n      copiedArgs[1] = parseInt(args[1]);\n    }\n    \n    for (var i = 2, l=args.length; i < l; i++) {\n      if (!args[i]) {\n        if (!reuse) {\n          if (args[i] === \"\") {\n            copiedArgs[i] = \"\";\n          } else {\n            copiedArgs[i] = null;\n          }\n        }\n        \n        copiedArgs.changedFields.push(i-1);\n      } else if (args[i].length == -1) {\n        copiedArgs[i] = Constants.UNCHANGED;\n      } else {\n        if (!reuse) {\n          copiedArgs[i] = args[i].toString();\n        }\n        copiedArgs.changedFields.push(i-1);\n      }\n    }\n    \n    return copiedArgs;\n    \n    \n  };\n  \n  \n\n\n","import ServerConnection from \"./ServerConnection\";\nimport Inheritance from \"../../src-tool/Inheritance\";\nimport EnvironmentStatus from \"../../src-tool/EnvironmentStatus\";\nimport Executor from \"../../src-tool/Executor\";\nimport Environment from \"../../src-tool/Environment\";\nimport LoggerManager from \"../../src-log/LoggerManager\";\nimport Utils from \"../Utils\";\nimport ASSERT from \"../../src-test/ASSERT\";\nimport WSEncoder from \"../encoders/WSEncoder\";\nimport Constants from \"../Constants\";\nimport nodeUtils from 'node-utils';\n\n  var sessionLogger = LoggerManager.getLoggerProxy(Constants.SESSION);\n  var streamLogger = LoggerManager.getLoggerProxy(Constants.STREAM);\n\n  var NodeWS = null;\n  if (Environment.isNodeJS()) {\n    NodeWS = nodeUtils.NodeWS;\n  }\n\n\n\n  var JS_PROTOCOL = Constants.TLCP_VERSION + \".lightstreamer.com\";\n\n  var objectIdCounter = 1;\n\n  function WebSocketConnection(wsSession) {\n     this._callSuperConstructor(WebSocketConnection);\n\n     this.objectId = objectIdCounter++;\n     if (streamLogger.isDebugLogEnabled()) {\n         streamLogger.logDebug(\"New WS connection oid=\", this.objectId);\n     }\n     this.isOpen=false;\n     this.exePhase=null;\n     this.openPhase=null;\n     this.openRequest=null;\n     this.webSocketInstance = null;\n     this.openEvent = false;\n     this.openFailure = false;\n     this.serverInUse = null;\n     this.openEventFired = false;\n     /*\n      * When not null, the requests may omit the parameter LS_session because it is implicitly equal to this value.\n      * This value is always equal to the LS_session parameter of the last sent bind_session request.\n      */\n     this.defaultSessionId = null;\n\n     this.wsSession = wsSession;\n\n     this.constr = WebSocketConnection;\n     \n     this.wsEncoder = new WSEncoder(this);\n  }\n  if (WebSocketConnection.name == null) {\n      WebSocketConnection.name = \"WebSocketConnection\";\n  }\n\n  var disabled = false;\n  var disabledFor = {};\n\n  WebSocketConnection.disableClass = function(forAddress) {\n    if (forAddress) {\n      disabledFor[forAddress] = true;\n    } else {\n      disabled = true;\n    }\n  };\n  WebSocketConnection.restoreClass = function(forAddress) {\n    if (forAddress) {\n      delete(disabledFor[forAddress]);\n    } else {\n      disabled = false;\n      disabledFor = {};\n    }\n  };\n  WebSocketConnection.isDisabledClass = function() {\n    for (var i in disabledFor) {\n      return true;\n    }\n    return disabled;\n  };\n\n  //this must become a factory that is able to give me the same websocket on different instances of WebSocketConnection (create/bind and control\n  function getWebSocket(_url) {\n\n    if (_url.indexOf(\"http://\") == 0) {\n      _url = _url.replace(\"http://\",\"ws://\");\n    } else {\n      _url = _url.replace(\"https://\",\"wss://\");\n    }\n\n    if (NodeWS) {\n      var cookie = \"\";\n      var cookies = ServerConnection.getGlobalCookiesForNode(_url);\n      /* Set header Cookie */\n      cookies.forEach(function(cookie_i, i, array) {\n          // BEGIN ported from cookie_send in xmlhttprequest-cookie\n          if (cookie !== \"\")\n              cookie += \"; \";\n          cookie += cookie_i['name'] + \"=\" + cookie_i['value'];\n          // END ported from cookie_send in xmlhttprequest-cookie\n      });\n\n      var options = {};\n      if (cookie.length > 0) {\n          options.headers = { 'Cookie' : cookie };\n      }\n      return new NodeWS(_url,JS_PROTOCOL,options);\n    } else if (typeof WebSocket != \"undefined\") {\n      return new WebSocket(_url,JS_PROTOCOL);\n    } else if (typeof MozWebSocket != \"undefined\") {\n      return new MozWebSocket(_url,JS_PROTOCOL);\n    }\n\n    //due to the isAvailable method this should never happen\n    WebSocketConnection.disableClass();\n    return null;\n  }\n\n  ServerConnection.attachPublicStaticMethods(WebSocketConnection,{\n    isAvailable: function(address) {\n      if (disabled) {\n        return false;\n      } else if (address && disabledFor[address]) {\n        return false;\n      }\n\n      var WSClass = null;\n      if (typeof WebSocket != \"undefined\") {\n        WSClass = WebSocket;\n      } else if (typeof MozWebSocket != \"undefined\") {\n        WSClass = MozWebSocket;\n      }\n\n      if (WSClass) {\n        if (WSClass.prototype.CLOSED == 2) {\n          //Safari is still using version \"-00\" of the draft\n          return false;\n        }\n      }\n\n      return (NodeWS || WSClass);\n    },\n    isCrossSite: true,\n    isCrossProtocol: function() {\n      return !Environment.isBrowser() || location.protocol != \"https:\";\n    },\n    areCookiesGuaranteed: function() {\n        return true;\n    },\n    attachEngineId: false,\n    isStreamEnabled: true,\n    canUseCustomHeaders: false\n  });\n\n  WebSocketConnection.prototype = {\n\n    toString: function() {\n      return [\"[\",\"WebSocketConnection\",this.isOpen,this.openPhase,this.exePhase,this.isReadyToSend(),\"]\"].join(\"|\");\n    },\n\n    _close: function() {\n      if (!this.webSocketInstance) {\n        return; //wait please :)\n      }\n\n      streamLogger.logDebug(\"Closing WebSocket connection\");\n\n      //\"disable callbacks\"\n      this.openPhase = null;\n\n      if (this.webSocketInstance) {\n        try {\n          this.webSocketInstance.close(1000);\n        } catch (__e) {\n          //INVALID_ACCESS_ERR\n            //An invalid code was specified.\n          //SYNTAX_ERR\n            //The reason string is too long or contains unpaired surrogates.\n          streamLogger.logDebug(\"Error closing WebSocket connection\",__e);\n        }\n      }\n\n      this.off();\n\n      return;\n    },\n\n    openSocket: function(request,phase,responseCallback,errorCallback,connectionEndCallback) {\n      if (this.isOpen) {\n        streamLogger.logError(\"Unexpected openSocket call\");\n      } else if(disabled) {\n        return false;\n      }\n\n      this.openFailure = false;\n\n      this.serverInUse = request.getPath();\n      this.openPhase = phase;\n\n      try {\n        this.webSocketInstance = getWebSocket(this.serverInUse);\n      } catch(_e) {\n        streamLogger.logDebug(\"Error opening WebSocket connection\",_e);\n        return false;\n        //SECURITY_ERR\n        //The port to which the connection is being attempted is being blocked.\n      }\n\n      if (sessionLogger.isDebugLogEnabled()) {        \n          sessionLogger.debug(\"Status timeout in \" + this.wsSession.getCurrentConnectTimeout() + \" [currentConnectTimeoutWS]\");\n      }\n      Executor.addTimedTask(this.openWSTimeout,this.wsSession.getCurrentConnectTimeout(),this,[this.openPhase]);\n\n\n      var that = this;\n      this.webSocketInstance.onmessage = function(evt) {\n        that.onPartialResponse(evt,phase,responseCallback);\n      };\n      this.webSocketInstance.onerror = function() {\n        that.onErrorResponse(phase,errorCallback);\n      };\n      this.webSocketInstance.onclose = function(closeEv) {\n        that.onCloseResponse(closeEv, phase, connectionEndCallback,errorCallback);\n      };\n      this.webSocketInstance.onopen = function() {\n        if (Environment.isNodeJS()) {\n            /*\n             * Add cookie definitions in the WebSocket handshake response to the cookie jar (maintained by the HTTP transport manager).\n             *\n             * Problem: HTTP and WebSocket transports are independent components not sharing the cookies.\n             *\n             * Solution: Use the cookie manager of the HTTP transport to holds also the cookies returned by\n             * the WebSocket handshake response.\n             */\n            var headers = that.webSocketInstance.headers;\n            if (headers['set-cookie']) {\n                /*\n                 * NOTE\n                 * Notwithstanding  RFC 6265 section 3 forbids set-cookie header folding,\n                 * faye-websocket folds multiple set-cookie headers into a single header separating the values by commas.\n                 *\n                 * The procedure parseSetCookieHeader recovers the cookie definitions from the collapsed header.\n                 */\n                var cookies = Utils.parseSetCookieHeader(headers['set-cookie']);\n                ServerConnection.addGlobalCookiesForNode(request.getUrl(), cookies);\n            }\n        }\n        that.onOpenEvent(phase);\n      };\n\n      return true;\n\n    },\n\n    openWSTimeout: function(ph) {\n      if (ph == this.openPhase && this.webSocketInstance && !this.openEventFired) {\n        try {\n          sessionLogger.logDebug(\"Timeout event [currentConnectTimeoutWS]\");\n          this.wsSession.policyBean.increaseConnectTimeout();\n\n          this.webSocketInstance.close(1000);\n        } catch(_e) {\n          streamLogger.logDebug(\"error on closing a timed out WS\");\n        }\n      }\n    },\n\n    _load: function(request,phase) {\n      if (this.isOpen) {\n        streamLogger.logError(\"Unexpected WebSocket _load call\");\n        return null;\n        //instances of WebSocketConnection are never _load twice\n        //so this should not happen\n      } else if(disabled) {\n        return false;\n      }\n\n      this.openRequest=request;\n\n      this.exePhase = phase;\n\n      streamLogger.logDebug(\"Preparing to bind on WebSocket connection\",request.getUrl());\n\n      if (this.isReadyToSend()) {\n        //on open event already fired\n        this.sendFirstRequest(phase);\n\n      } //else during the onOpen event we will send the cached request. If the onOpen is never fired we will have a timeout and a reconnect (that is the theoretical worst case as usually we have an open error event before the timeout goes off.\n\n      return true;\n\n    },\n\n    isConnectedToServer: function(serverAddress) {\n    //>>excludeStart(\"debugExclude\", pragmas.debugExclude);\n      if (!ASSERT.verifyOk(this.serverInUse)) {\n        streamLogger.logError(\"Open path is disappeared\");\n        return false;\n      }\n    //>>excludeEnd(\"debugExclude\");\n      return this.serverInUse.indexOf(serverAddress)==0;\n    },\n\n    isReadyToSend: function() {\n      return this.webSocketInstance != null && this.webSocketInstance.readyState == 1;  //OPEN = 1\n    },\n\n    _send: function(req,ph) {\n      if (!this.isReadyToSend()) {\n        return null;\n      }\n\n      if (ph) {\n        //if a phase is specified, this is a bind request. In such case we have to update our internal phase\n        //and to extend the request as sessionLoad does\n        this.updatePhase(ph);\n      }\n\n      if (streamLogger.isDebugLogEnabled()) {\n          streamLogger.logDebug(\"WebSocket transport sending oid=\", this.objectId, req.getFile(), req.getData());\n      }\n\n      try {\n        this.webSocketInstance.send(req.getFile() + \"\\r\\n\" + req.getData());\n      } catch(_e) {\n        streamLogger.logError(\"Error sending data over WebSocket\",_e);\n        //INVALID_STATE_ERR\n          //The connection is not currently OPEN.\n        //SYNTAX_ERR\n          //The data is a string that has unpaired surrogates.\n        return false;\n      }\n\n      return true;\n    },\n\n    sendFirstRequest: function(phase) {\n\n      var res = this._send(this.openRequest,phase);\n    //>>excludeStart(\"debugExclude\", pragmas.debugExclude);\n      if (!ASSERT.verifyOk(res !== null)) {\n        streamLogger.logError(\"Unexpected send outcome while websocket is ready-to-send\",phase);\n      }\n    //>>excludeEnd(\"debugExclude\");\n      if (res) {\n        this.isOpen = true;\n        this.wsSession.firstSentNotification(this.openPhase);\n      }\n\n    },\n\n    /*public*/ updatePhase: function(ph) {\n      this.exePhase = ph;\n    },\n\n///////////////////////////EVENTS\n\n    /*\n    readyState\n         CONNECTING 0 The connection is not yet open.\n         OPEN  1 The connection is open and ready to communicate.\n         CLOSING 2 The connection is in the process of closing.\n         CLOSED  3 The connection is closed or couldn't be opened.\n\n    bufferedAmount\n        unsigned long The number of bytes of data that have been queued using calls to send() but not yet transmitted to the network. This value does not reset to zero when the connection is closed; if you keep calling send(), this will continue to climb. Read only.\n\n    */\n\n    /*private*/ onPartialResponse: function(evt,phase,responseCallback) {\n      if (this.openPhase != phase || EnvironmentStatus.isUnloaded()) {\n        return;\n      }\n\n      if (streamLogger.isDebugLogEnabled()) {\n          streamLogger.logDebug(\"WebSocket transport receiving oid=\", this.objectId, evt.data);\n      }\n\n      //I had to move this flag here as it happened that a websocket received the onopen event and then anything else.\n      //After a while the connection was broken and since this flag was already true the client did not disable the WS connection\n      //and went on retrying the same connection. The loop of failures was broken when a WS did not break for long enough for the\n      //stream-sense timeout to be executed\n      //See email from Marc Bracher on 20121010\n\n      this.openEvent = true;\n      Executor.executeTask(responseCallback, [evt.data,this.exePhase]);\n    },\n\n    /*private*/ onErrorResponse: function(phase,errorCallback) {\n      if (this.openPhase != phase || EnvironmentStatus.isUnloaded()) {\n        return;\n      }\n\n      streamLogger.logError(\"Error on WebSocket connection oid=\", this.objectId);\n\n\n      this.openFailure |= !this.openEvent;\n      Executor.executeTask(errorCallback, [\"wsc.unknown\",this.openPhase,true,this.openFailure,false]);\n    },\n\n    /*private*/ onOpenEvent: function(phase,req) {\n      if (this.openPhase != phase || EnvironmentStatus.isUnloaded()) {\n        return;\n      }\n\n      this.openEventFired = true;\n      //this.openEvent = true;\n      streamLogger.logDebug(\"WebSocket connection ready\");\n\n      if (this.openRequest) {\n        //sessionLoad already called\n        this.sendFirstRequest();\n      }\n\n    },\n\n    /*private*/ onCloseResponse: function(closeEv,phase,connectionEndCallback,errorCallback) {\n      if (this.openPhase != phase || EnvironmentStatus.isUnloaded()) {\n        return;\n      }\n\n      var closeCode = closeEv ? closeEv.code : -1;\n\n      streamLogger.logDebug(\"WebSocket connection close event received\",closeCode,this.openEvent);\n\n      if (closeCode == 1000 || closeCode == 1001) {\n        //this is a good end, so it's supposed to happen for a good reason\n        //the sad fact is that FX calls this when navigating away from a page so...\n        //..let's delay the end check a little bit.\n        Executor.modifyAllTaskParams(connectionEndCallback,[this.openPhase,true]);\n        Executor.addPackedTimedTask(connectionEndCallback,300);\n        this.off();\n\n      } else if (closeCode == 1011) {\n        //the server got an unexpected error;\n        //we should retry, but in a reasonable time, in order to avoid loops;\n        //the reconnection timeout could be a good compromise\n        this.openFailure |= !this.openEvent;\n        var ph = this.openPhase;\n        this.off();\n        Executor.executeTask(errorCallback, [\"wsc.server\",ph,true,this.openFailure,true]);\n\n      } else {\n        this.openFailure |= !this.openEvent;\n        var ph = this.openPhase;\n        this.off();\n        Executor.executeTask(errorCallback, [\"wsc.\"+closeCode,ph,true,this.openFailure,false]);\n      }\n\n\n\n      /*\n\n      closeEv.code:\n\n      0-999   Reserved and not used.\n\n      1000 indicates a normal closure, meaning whatever purpose the connection was established for has been fulfilled.\n      1001 indicates that an endpoint is \"going away\", such as a server going down, or a browser having navigated away from a page.\n      1002 indicates that an endpoint is terminating the connection due to a protocol error.\n      1003 indicates that an endpoint is terminating the connection because it has received a type of data it cannot accept (e.g. an endpoint that understands only text data MAY send this if it receives a binary message).\n      1004 Reserved.  The specific meaning might be defined in the future.\n      1005 is a reserved value and MUST NOT be set as a status code in a Close control frame by an endpoint.  It is designated for use in applications expecting a status code to indicate that no status code was actually present.\n      1006 is a reserved value and MUST NOT be set as a status code in a Close control frame by an endpoint.  It is designated for use in applications expecting a status code to indicate that the connection was closed abnormally, e.g. without sending or receiving a Close control frame.\n      1007 indicates that an endpoint is terminating the connection because it has received data within a message that was not  consistent with the type of the message (e.g., non-UTF-8 [RFC3629] data within a text message).\n      1008 indicates that an endpoint is terminating the connection because it has received a message that violates its policy. is a generic status code that can be returned when there is no other more suitable status code (e.g. 1003 or 1009), or if there is a need to hide specific details about the policy.\n      1009 indicates that an endpoint is terminating the connection because it has received a message which is too big for it to process.\n      1010 indicates that an endpoint (client) is terminating the connection because it has expected the server to negotiate one or more extension, but the server didn't return them in the response message of the WebSocket handshake.  The list of extensions which are needed SHOULD appear in the /reason/ part of the Close frame.   Note that this status code is not used by the server, because it can fail the WebSocket handshake instead.\n      1011 indicates that a server is terminating the connection because it encountered an unexpected condition that prevented it from fulfilling the request.\n      1015 is a reserved value and MUST NOT be set as a status code in a Close control frame by an endpoint.  It is designated for use in applications expecting a status code to indicate that the connection was closed due to a failure to perform a TLS handshake (e.g., the server certificate can't be verified).\n\n      1000-2999   Status codes in the range 1000-2999 are reserved for definition by  this protocol, its future revisions, and extensions specified in a  permanent and readily available public specification.\n      3000-3999   Status codes in the range 3000-3999 are reserved for use by libraries, frameworks and application.  These status codes are registered directly with IANA.  The interpretation of these codes is undefined by this protocol.\n      4000-4999   Status codes in the range 4000-4999 are reserved for private use and thus can't be registered.  Such codes can be used by prior agreements between WebSocket applications. The interpretation of these codes is undefined by this protocol.\n\n      NOTE (20111214) on MDN 1004 is described as CLOSE_TOO_LARGE The endpoint is terminating the connection because a data frame was received that is too large.\n\n      closeEv.reason\n      closeEv.wasClean\n\n      */\n\n    },\n\n\n/////////////////////////////////////EVENTS END\n\n    /*private*/ off: function() {\n      this.isOpen = false;\n      this.openEventFired = false;\n      this.openPhase = null;\n      this.openRequest=null;\n      this.openEvent = false;\n      this.webSocketInstance = null;\n      this.serverInUse = null;\n    },\n\n    /*public*/ getEncoder: function() {\n      return this.wsEncoder;\n    },\n    \n    /**\n     * Sets the default session id of a WebSocket connection.\n     * The default id is the id returned in the response of a bind_session.\n     * It lasts until the end of streaming/polling.\n     */\n    /*public*/ setDefaultSessionId: function(defaultSessionId) {\n        if (streamLogger.isDebugLogEnabled()) {\n            streamLogger.logDebug(\"New sessionId\", defaultSessionId + \" on WS connection oid=\" + this.objectId);\n        }\n        this.defaultSessionId = defaultSessionId;\n    },\n    \n    /*public*/ getDefaultSessionId: function() {\n        return this.defaultSessionId;\n    }\n  };\n\n\n  Inheritance(WebSocketConnection, ServerConnection);\n  export default WebSocketConnection;\n\n","import ServerConnection from \"./ServerConnection\";\nimport Inheritance from \"../../src-tool/Inheritance\";\nimport Executor from \"../../src-tool/Executor\";\nimport BrowserDetection from \"../../src-tool/BrowserDetection\";\nimport EnvironmentStatus from \"../../src-tool/EnvironmentStatus\";\nimport StreamAsStringHandler from \"./StreamAsStringHandler\";\nimport Environment from \"../../src-tool/Environment\";\nimport LoggerManager from \"../../src-log/LoggerManager\";\nimport Utils from \"../Utils\";\nimport Constants from \"../Constants\";\nimport nodeUtils from 'node-utils';\n\n  var streamLogger = LoggerManager.getLoggerProxy(Constants.STREAM);\n\n  var HAVE_HTTP_STATUS = Environment.isBrowser() ? 2 : 3;\n\n  //status 0 happens in case of a 307 redirect that gets in a CORS context\n  //it is also received if the server is down.\n  //In the former case we want to retry immediately, in the other case we want\n  //a delay.\n  //Thus we alternate the error caused by  status 0 between an unable-to-open\n  //(i.e.: we were unable to send the request) and a standard error (network reached,\n  //but we are unable to connect)\n  var CONSIDER_STATUS_0_UNABLE_TO_OPEN = true;\n\n  var NodeXHR;\n  if (Environment.isNodeJS()) {\n    NodeXHR = nodeUtils.NodeXHR;\n  }\n  \n  var objectIdCounter = 1;\n\n  function XSXHRConnection() {\n     this._callSuperConstructor(XSXHRConnection);\n     \n     this.objectId = objectIdCounter++;\n     if (streamLogger.isDebugLogEnabled()) {\n         streamLogger.logDebug(\"New CORS-XHR connection oid=\", this.objectId);\n     }\n     this.isOpen=false;\n\n     this.sendPhase=null;\n     this.cachedSenderStatus = null;\n     this.xhrInstance = null;\n\n     this.parser = null;\n\n     this.status0Disabled = false;\n\n     this.constr = XSXHRConnection;\n  };\n  if (XSXHRConnection.name == null) {\n      XSXHRConnection.name = \"XSXHRConnection\";\n  }\n\n  var doesWork = null;\n\n  ServerConnection.attachPublicStaticMethods(XSXHRConnection,{\n    isAvailable: function() {\n      if (doesWork !== null) {\n        return doesWork;\n      }\n\n      if (BrowserDetection.isProbablyIE(9,true)) {\n        doesWork = false;\n      } else if (typeof(XMLHttpRequest) != \"undefined\") {\n        var t = new XMLHttpRequest();\n        if (typeof(t.withCredentials) != \"undefined\") {\n          doesWork = true;\n        } else if (Environment.isOther()) {\n          doesWork = true;\n        }\n      } else if (!Environment.isBrowser() && NodeXHR) {\n        doesWork = true;\n      }\n\n      if (doesWork === null) {\n        doesWork = false;\n      }\n\n      return doesWork;\n    },\n    isStreamEnabled: function() {\n    //ATM, Environment.isOther() --> !t.withCredentials --> no streaming. We don't force though (isOther is currently react-active)\n      return !BrowserDetection.isProbablyOldOpera() && !BrowserDetection.isProbablyPlaystation();\n    },\n    isCrossSite: true,\n    isCrossProtocol: true,\n    areCookiesGuaranteed: function() {\n      if (Environment.isNodeJS()) {\n        // uses a dedicated class\n        return true;\n      } else if (Constants.PAGE_PROTOCOL != \"file:\") {\n        return true;\n      } else if (! Environment.isBrowserDocument()) {\n        // webworker results to be file: but a webworker can't be actually loaded from file: and\n        // thus the withCredentials flag would always work\n        return true;\n      } else {\n        // what about others? We do not know\n        return false;\n      }\n    },\n    attachEngineId: false,\n    canUseCustomHeaders: true\n  });\n\n  function getCallback(cb) {\n    return function() {\n      Executor.executeTask(cb);\n    };\n  }\n\n  XSXHRConnection.prototype = {\n\n    /*public*/ toString: function() {\n      return [\"[\",\"XSXHRConnection\",this.isOpen,this.sendPhase,this.cachedSenderStatus,\"]\"].join(\"|\");\n    },\n\n    /*public*/ _close: function() {\n      if (!this.isOpen) {\n        return; //wait please :)\n      }\n\n      if (streamLogger.isDebugLogEnabled()) {          \n          streamLogger.logDebug(\"CORS-XHR connection closed oid=\", this.objectId);\n      }\n\n      //\"disable callbacks\"\n      this.sendPhase = null;\n\n      if (this.xhrInstance) {\n        try {\n          this.xhrInstance.abort();\n        } catch (e) {\n          streamLogger.logDebug(\"Error non closing connection opened using CORS-XHR\");\n        }\n      }\n\n      this.off();\n      return;\n    },\n\n    /*public*/ _load: function(request,phase,responseCallback,errorCallback,connectionEndCallback) {\n      if (this.isOpen) {\n        return null; //wait please :)\n      }\n\n      if (NodeXHR) {\n        this.xhrInstance = new NodeXHR();\n      } else {\n        this.xhrInstance = new XMLHttpRequest();\n      }\n      this.parser = new StreamAsStringHandler();\n\n      var loadCB = Executor.packTask(this.onPartialResponse,this,[phase,responseCallback,connectionEndCallback,errorCallback]);\n      this.xhrInstance.onreadystatechange = getCallback(loadCB);\n\n      /*var that = this;\n      this.xhrInstance.onreadystatechange = function() {\n        that.onPartialResponse(phase,responseCallback,connectionEndCallback);\n      };*/\n\n      this.sendPhase = phase;\n      this.cachedSenderStatus = null;\n\n      if (streamLogger.isDebugLogEnabled()) {\n          streamLogger.logDebug(\"CORS-XHR transport sending oid=\", this.objectId, request.getFile(), request.getData());\n      }\n\n      try {\n\n        this.xhrInstance.open(request.getMethod(), request.getUrl(), true);\n\n        this.xhrInstance.withCredentials = request.getCookieFlag();\n\n        var headers = request.getExtraHeaders();\n        if(headers) {\n          for (var i in headers) {\n            //this will prob make the browser send an OPTIONS request to the server\n            this.xhrInstance.setRequestHeader(i,headers[i]);\n          }\n        }\n\n        this.xhrInstance.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");\n        this.xhrInstance.send(request.getData());\n\n        this.isOpen = true;\n\n      } catch(_e) {\n        streamLogger.logError(\"Error opening CORS-XHR connection oid=\", this.objectId,_e);\n        return false;\n      }\n\n      return true;\n\n    },\n\n    /*private*/ onPartialResponse: function(phase,responseCallback,connectionEndCallback,errorCallback) {\n      if (this.sendPhase != phase || EnvironmentStatus.isUnloaded()) {\n        return;\n      }\n\n      var newData = null;\n\n      if (this.isHttpStatusOk() && responseCallback) {\n        if (this.xhrInstance.readyState == 3) {\n          newData = this.parser.streamProgress(this.xhrInstance.responseText);\n\n        } else if (this.xhrInstance.readyState == 4) {\n          newData = this.parser.streamComplete(this.xhrInstance.responseText);\n\n        }\n\n        if (streamLogger.isDebugLogEnabled()) {\n            if (newData) {                \n                streamLogger.logDebug(\"CORS-XHR transport receiving oid=\", this.objectId, newData);\n            }\n        }\n\n        if(newData!=null) {\n          Executor.executeTask(responseCallback, [newData,this.sendPhase]);\n        }\n\n      }\n\n      if (this.xhrInstance.readyState == 4) {\n        if (!this.isHttpStatusOk()) {\n          if (this.status0Disabled) {\n            if (errorCallback) {\n              if (streamLogger.isDebugLogEnabled) {\n                  streamLogger.logDebug(\"CORS-XHR connection error oid=\", this.objectId);\n              }\n              Executor.executeTask(errorCallback, [\"status0\",this.sendPhase,false,CONSIDER_STATUS_0_UNABLE_TO_OPEN,false]);\n            }\n            CONSIDER_STATUS_0_UNABLE_TO_OPEN = !CONSIDER_STATUS_0_UNABLE_TO_OPEN;\n            this.status0Disabled = false;\n          } else {\n            if (responseCallback) {\n              Executor.executeTask(responseCallback, [null,this.sendPhase]);\n            }\n          }\n\n\n        }\n\n        if (streamLogger.isDebugLogEnabled) {\n            streamLogger.logDebug(\"CORS-XHR request completed oid=\", this.objectId);\n        }\n\n        if (( this.xhrInstance.readyState == 4 || newData == \"\") && connectionEndCallback) {\n          //this is a good end of a connection or a broken connection;\n          //let us check\n          Executor.addTimedTask(this.notifyEnd, 100, this, [this.sendPhase,connectionEndCallback]);\n        }\n\n        this.off();\n      }\n\n    },\n\n    /*private*/ notifyEnd: function(ph,connectionEndCallback) {\n      Executor.executeTask(connectionEndCallback, [ph]);\n    },\n\n    /*private*/ off: function() {\n      this.isOpen = false;\n      this.sendPhase = null;\n      if (this.xhrInstance) {\n        //xhr.abort = null;\n        delete(this.xhrInstance.onreadystatechange);\n        delete(this.xhrInstance);\n      }\n    },\n\n    /*private*/ isHttpStatusOk: function() {\n      try {\n        if (this.cachedSenderStatus === null) {\n          if (this.xhrInstance.readyState < HAVE_HTTP_STATUS) {\n            return false;\n          }\n\n\n\n\n          //we have to cache the value as on Chrome (seen on version 10) the status may change from 200 to 0 if the socket is closed...\n          this.cachedSenderStatus = this.xhrInstance.status >= 200 && this.xhrInstance.status <= 299;\n\n          if (this.xhrInstance.status == 0) {\n            this.status0Disabled = true;\n          }\n        }\n        return this.cachedSenderStatus;\n\n      } catch (_e) {\n\n        streamLogger.logDebug(\"Error reading CORS-XHR status oid=\", this.objectId,_e);\n        return false;\n      }\n    }\n  };\n\n\n  Inheritance(XSXHRConnection, ServerConnection);\n  export default XSXHRConnection;\n","import LoggerManager from \"../../src-log/LoggerManager\";\nimport ControlRequest from \"./ControlRequest\";\nimport ASSERT from \"../../src-test/ASSERT\";\nimport Constants from \"../Constants\";\n  \n  var requestsLogger = LoggerManager.getLoggerProxy(Constants.REQUESTS);\n  \n  function ControlRequestBatch(_batchType) {\n    this.queue = [];\n    this.keys = {};\n    \n    this.batchType = _batchType;\n    this.messageNextKey = 0;\n  }\n  \n  var CONSTRAINT_KEY = \"C\";\n  var FORCE_REBIND_KEY = \"F\";\n  var CHANGE_SUB_KEY = \"X\";\n  var REVERSE_HB_KEY = \"H\";\n  var MPN_KEY = \"M\";\n  \n  //ported from FLEX client\n  ControlRequestBatch.prototype = {\n    \n    /*public*/ toString: function() {\n      return [\"[\",\"ControlRequestBatch\",this.batchType,this.queue.length,\"]\"].join(\"|\");\n    },\n      \n    /*private*/ addRequestInternal: function(tKey,request) {\n      this.keys[tKey] = request;\n      this.queue.push(tKey);\n      \n      (function(that) {\n          /* check that there is no duplicated message request */\n          if (that.batchType == ControlRequest.MESSAGE) {\n              var seq = request[\"LS_sequence\"];\n              var prog = request[\"LS_msg_prog\"];\n              if (seq != null && prog != null) {\n                  for (var i = 0, len = that.queue.length - 1 /* exclude last request */; i < len; i++) {\n                      var currentReq = that.queue[i];\n                      var currentSeq = currentReq[\"LS_sequence\"];\n                      var currentProg = currentReq[\"LS_msg_prog\"];\n                      if (seq == currentSeq && prog == currentProg) {\n                          if (requestsLogger.isDebugLogEnabled()) {\n                              requestsLogger.logErrorExc(new Error(\"backtrace\"),\n                                      \"Duplicated message\",\n                                      \"seq=\", seq, \"prog=\", prog, \"ptr=\", request === currentReq);\n                          }\n                          requestsLogger.logError(\"Duplicated message\", \"seq=\", seq, \"prog=\", prog);\n                      }\n                  }\n              }\n          }\n      }(this));\n    },\n    \n    /*private*/ addUniqueRequestInternal: function(tKey,request) {\n        /*\n         * If a request with the same key is already present, substitute the request whit the new one.\n         * Otherwise add the request.\n         */\n        if (this.keys[tKey]) {\n            this.keys[tKey] = request;            \n        } else {\n            this.addRequestInternal(tKey, request);\n        }\n      },\n    \n    addRequestToBatch:function(request,preventOverride) {\n      \n      var requestType = request.getType();\n      \n      \n      if (requestType == ControlRequest.MESSAGE || requestType == ControlRequest.LOG || requestType == ControlRequest.HEARTBEAT) {\n        if (this.batchType != requestType) {\n        //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n          ASSERT.fail();\n        //>>excludeEnd(\"debugExclude\");\n          requestsLogger.logError(\"Unexpected request type was given to this batch\",this);\n          //should I send an exception?\n          return false;\n        }\n      //>>excludeEnd(\"debugExclude\");\n        if (requestType == ControlRequest.HEARTBEAT) {\n            /* there is at most one heartbeat request in the batch */\n            this.addUniqueRequestInternal(REVERSE_HB_KEY, request);\n        } else {\n            //I should only add to queue, the sendMessages and log messages are always sent to the server\n            this.addRequestInternal(this.messageNextKey++,request);\n        }\n        \n        return true;\n      }\n      \n      if ( ! (this.batchType == ControlRequest.ADD || this.batchType == ControlRequest.MPN)) {//for ADD REMOVE DESTROY CONSTRAIN or MPN\n      //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n        ASSERT.fail();\n      //>>excludeEnd(\"debugExclude\");\n        requestsLogger.logError(\"Unexpected request type was given to this batch; expecting ADD REMOVE DESTROY CONSTRAIN or MPN\",this);\n        //should I send an exception?\n        return false;\n      }\n      \n      var tKey;\n      switch(requestType) {\n        case ControlRequest.CONSTRAINT: tKey = CONSTRAINT_KEY;\n          break;\n        case ControlRequest.FORCE_REBIND: tKey = FORCE_REBIND_KEY;\n          break;\n        case ControlRequest.CHANGE_SUB: tKey = CHANGE_SUB_KEY+request.getKey();\n          break;\n        case ControlRequest.MPN: tKey = MPN_KEY+request.getKey();\n          break;\n        default: tKey = request.getKey();\n          break;\n      }\n      \n      var queuedRequest = this.keys[tKey];\n      requestsLogger.logDebug(\"Storing request\",this,tKey,request);\n      \n      if (queuedRequest) {\n        \n        //there is already a request for this key, handle it\n        \n        if (requestType == ControlRequest.CONSTRAINT \n                || requestType == ControlRequest.FORCE_REBIND\n                || requestType == ControlRequest.MPN) {\n          //each constraint/force_rebind/mpn_register request override the previous one, just substitute the request in the queue.\n          if (!preventOverride) {\n            requestsLogger.logDebug(\"Substituting CONSTRAINT/FORCE_REBIND/MPN request\");\n            this.substituteRequest(tKey,request);\n          }\n          return;\n          \n        } else if (requestType == ControlRequest.REMOVE) {\n          \n          if (queuedRequest.retryingOrHost) {\n            requestsLogger.logDebug(\"Replacing 'second' ADD request with a REMOVE request for the same subscription\");\n            //if the ADD request that's in the queue was already sent and this is a new \n            //effort for the same ADD we send anyway the REMOVE\n            //request as the other ADD request could be just very slow and not lost\n            if (!preventOverride) {\n              this.substituteRequest(tKey,request);\n            }\n            //another possibility is to remove such add, since if an update for a removed table\n            //arrives a new delete request is sent\n            \n          } else if (queuedRequest.getType() == ControlRequest.REMOVE)  {\n            requestsLogger.logDebug(\"REMOVE request already stored, skipping\");\n            //both new and queued request are REMOVE requests for the same table, \n            //this shouldn't happen btw if it happens we don't have anything to do, \n            //we just leave the request that's already on the queue\n            \n          } else {\n            requestsLogger.logDebug(\"ADD request for the involved subscription was not yet sent; there is no need to send the related REMOVE request or the original ADD one, removing both\");\n            //if the old request was an ADD (sent for the first time) and the new one is a REMOVE, \n            //we don't need to send anything to the server, just delete the ADD\n            //request and return\n            \n          //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n            if (!ASSERT.verifyNotOk(preventOverride)) {\n              requestsLogger.logError(\"ADD after REMOVE?\",this);\n            }\n          //>>excludeEnd(\"debugExclude\");\n            if (!preventOverride) {\n              this.removeRequestByKey(tKey);\n            }\n            \n          }\n          return;\n        \n        } else if (requestType == ControlRequest.DESTROY) {\n          //we've already queued the DESTORY request for this session. \n          //Since Destroy are indexed by session id there can be a very unlucky case where \n          //two sessions from two different servers have the same id. So check for this case, you'll never know...\n          \n          while (queuedRequest && request.retryingOrHost != queuedRequest.retryingOrHost) {\n            requestsLogger.logDebug(\"Same session id on different servers, store two different DESTROY requests\");\n            tKey += \"_\";\n            queuedRequest = this.keys[tKey];\n          }\n          \n          if (queuedRequest) {\n            requestsLogger.logDebug(\"Verified duplicated DESTROY request, skipping\");\n            return;\n          }\n         \n        } else { //if (requestType == ControlRequest.ADD || requestType == ControlRequest.CHANGE_SUB)\n          //can never happen that an ADD request substitutes a REMOVE request for 2 reasons:\n          //  *if those requests are part of the same session than to remove and re-add a table\n          //   change its key.\n          //  *if those requests are not part of the same session than during session change\n          //   all pending request are removed.\n          //so, all cases should pass from the if (requestType == ControlRequest.REMOVE) case\n          if (!preventOverride) {\n              requestsLogger.logDebug(\"Duplicated ADD or CHANGE_SUB request, substitute the old one with the new one\");\n            //by the way, if something terribly wrong happened, we have to do something...\n            //let's try substituting\n            //(for the RECONF case is perfectly ok to pass from here)\n            this.substituteRequest(tKey,request);\n          }\n          return; \n        }\n      } \n      \n      requestsLogger.logDebug(\"Storing confirmed\");\n      this.addRequestInternal(tKey,request);\n\n    },\n    \n    getLength: function() {\n      return this.queue.length;\n    },\n    \n    /*private*/ substituteRequest : function(tKey,newRequest) {\n      this.keys[tKey] = newRequest;\n    },\n    \n    /*private*/ removeRequestByIndex: function(_index) {\n      if (this.queue.length <= _index) {\n        requestsLogger.logError(\"Trying to remove by index non-existent request\");\n        return null;\n      }\n      var tKey = this.queue[_index];\n      this.queue.splice(_index, 1);\n      \n      var req = this.keys[tKey];\n      delete this.keys[tKey];\n      \n      return req;\n      \n    },\n    \n    /*private*/ removeRequestByKey: function(tKey) {\n      if (!this.keys[tKey]) {\n        requestsLogger.logError(\"Trying to remove by key non-existent request\");\n        return null;\n      }\n      \n      for (var i = 0; i < this.queue.length; i++) {\n        if (this.queue[i] == tKey) {\n          return this.removeRequestByIndex(i);\n        }\n      }\n      \n    },\n    \n    \n    /*public*/ shift: function() {\n      return this.removeRequestByIndex(0);\n    },\n    \n    /*public*/ pop: function() {\n      return this.removeRequestByIndex(this.queue.length-1);\n    },\n    \n    /*public*/ last: function() {\n      return this.getRequestObject(this.queue.length-1);\n    },\n    \n    /*public*/ firstRequest: function() {\n      return this.getRequestObject(0);\n    },\n    \n    /*public*/ getRequestObject: function(num) {\n      if (this.queue.length <= 0) {\n        return null;\n      }\n      var tKey = this.queue[num];\n      return this.keys[tKey];\n    },\n    \n    /*public*/ getBatchType: function() {\n      return this.batchType;\n    }\n    \n  };\n  \n  export default ControlRequestBatch;\n  \n","import StandardHandler from \"../cross-tab/StandardHandler\";\nimport CallDefinition from \"../cross-tab/CallDefinition\";\nimport Executor from \"../../src-tool/Executor\";\n\n  var simple = CallDefinition.simple;\n  //var simpleWithResponse = CallDefinition.simpleWithResponse;\n  var simpleWithResponseAndTimeout = CallDefinition.simpleWithResponseAndTimeout;\n\n  var methods = {\n    onEngineConfigurationChange: simple,\n    onEngineDeath: simple,\n    onStatusChange: simple,\n    onSessionStart: simple,\n    onSessionEnd: simple,\n    onEngineDying: simple,\n    onServerError: simple,\n    onServerKeepalive: simple,\n    ping: simpleWithResponseAndTimeout,\n    onSubscription: simple,\n    onUnsubscription: simple,\n    onEndOfSnapshot: simple,\n    onUpdate: simple,\n    onLostUpdates: simple,\n    onClearSnapshot: simple,\n    onSubscriptionError: simple,\n    onMessageDiscarded: simple,\n    onMessageDenied: simple,\n    onMessageError: simple,\n    onMessageComplete: simple,\n    onMessageOnNetwork: simple,\n    onSubscriptionReconf: simple\n  };\n\n\n  function NewPushPageHandler(engine,id) {\n    this.engine = engine;\n    this.id = id;\n  }\n\n  NewPushPageHandler.methods = methods;\n\n  NewPushPageHandler.prototype = {\n\n    setEngineHandler: function(engineHandler) {\n      this.target = engineHandler;\n    },\n\n//calls from engine handler\n\n    onClientConfigurationChange: function(objClass,prop,val) {\n      var toSet = objClass == \"ConnectionDetails\" ? this.engine._connection : (objClass == \"ConnectionOptions\" ? this.engine._policy : this.engine._configuration);\n      toSet.simpleSetter(prop, val);\n    },\n\n    callConnect: function(sessionPhase) {\n      if (sessionPhase != this.engine.getSessionPhase()) {\n        return;\n      }\n      this.engine.doConnect();\n    },\n\n    callDisconnect: function(sessionPhase) {\n      if (sessionPhase != this.engine.getSessionPhase()) {\n        return;\n      }\n      this.engine.doDisconnect();\n    },\n    \n    callDisconnectAndReconnect: function(sessionPhase) {\n        if (sessionPhase != this.engine.getSessionPhase()) {\n            return;\n        }\n        this.engine.doDisconnectAndReconnect();\n    },\n\n    pong: function() {\n      if(this.engine === null) {\n        throw \"net\";\n      }\n      return true;\n    },\n\n    clientDeath: function() {\n      Executor.addTimedTask(this.engine.checkClientHealth,0,this.engine);\n      Executor.addTimedTask(this.engine.checkClientHealth,1000,this.engine);\n    },\n\n    subscribeTable: function(sessionPhase,body) {\n      if (sessionPhase != this.engine.getSessionPhase()) {\n        return null;\n      }\n\n      return this.engine.subscribe(this.id,body);\n    },\n\n    unsubscribeTable: function(sessionPhase,tableNum) {\n      if (sessionPhase != this.engine.getSessionPhase()) {\n        return null;\n      }\n\n      return this.engine.unsubscribe(tableNum);\n    },\n\n    updateSubscriptionParams: function(sessionPhase,tableNum,changingParams) {\n      if (sessionPhase != this.engine.getSessionPhase()) {\n        return null;\n      }\n\n      return this.engine.updateSubscriptionParams(tableNum,changingParams);\n    },\n\n    forwardMessage: function(sessionPhase,msg,sequence,listenerProxy,timeout) {\n      if (sessionPhase != this.engine.getSessionPhase()) {\n        return null;\n      }\n      var listener = listenerProxy == null ? null : {\n        prog: listenerProxy,\n        pageNum: this.id\n      };\n      this.engine.sendAMessage(msg,sequence,listener,timeout);\n    },\n\n    forwardLog: function(msg) {\n      this.engine.sendLog(msg);\n    },\n\n    dispose: function() {\n      this.engine = null;\n      //future calls will get an exception that will cause an onPushPageLost event in the PushPage collection if remote\n    }\n  };\n\n  for (var i in methods) {\n    NewPushPageHandler.prototype[i] = StandardHandler.createCaller(i,methods[i])\n  }\n\n\n\n  export default NewPushPageHandler;\n\n","import IllegalStateException from \"../../src-tool/IllegalStateException\";\n  export default function(client) {\n    return {\n      \"enableSharing\": function() {\n        throw new IllegalStateException(\"ConnectionSharing is not included in the Lightstreamer library\");\n      },\n      \"isMaster\": function() {\n        return client.isMaster();\n      }\n    };\n  };\n","/*\n  Copyright (c) Lightstreamer Srl\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nexport default /*@__PURE__*/(function() {\n  /**\n   * Constructs an IllegalStateException with the specified detail message.\n   * @constructor\n   *\n   * @param {String} message short description of the error.\n   *\n   * @exports IllegalStateException\n   * @class Thrown to indicate that a method has been invoked at an illegal or \n   * inappropriate time or that the internal state of an object is incompatible \n   * with the call.\n   * <BR>Use toString to extract details on the error occurred.\n   */\n  var IllegalStateException = function(message) {\n\n    /**\n     * Name of the error, contains the \"IllegalStateException\" String.\n     * \n     * @type String\n     */\n    this.name = \"IllegalStateException\";\n\n    /**\n     * Human-readable description of the error.\n     * \n     * @type String\n     */\n    this.message = message;\n\n  };\n\n  IllegalStateException.prototype = {\n\n      toString: function() {\n        return [\"[\",this.name,this.message,\"]\"].join(\"|\");\n      }\n      \n  };\n  \n  return IllegalStateException;\n})();\n  \n","/*\n  Copyright (c) Lightstreamer Srl\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\nimport IllegalStateException from \"./IllegalStateException\";\n\nexport default /*@__PURE__*/(function() {\n  var isBrowserDocumentVar = (typeof window !== \"undefined\"  && typeof navigator !== \"undefined\" && typeof document !== \"undefined\");\n  var isWebWorkerVar = typeof importScripts !== \"undefined\"; //potentially WebWorkers may appear on node.js\n  var isNodeJSVar = typeof process == \"object\" && (/node(\\.exe)?$/.test(process.execPath) || (process.node && process.v8) || (process.versions && process.versions.node && process.versions.v8 ));\n  \n  if (isBrowserDocumentVar && !document.getElementById) {\n    throw new IllegalStateException(\"Not supported browser\");\n  }\n  /**\n   * @exports Environment\n   */\n  var Environment = {\n      \n      /**\n       * Checks if the code is running inside an HTML document.\n       * <BR/>Note that browsers not supporting DOM Level 2 (i.e.: document.getElementById) \n       * are not recognized by this method\n       * \n       * @returns {Boolean} true if the code is running inside a Browser document, false otherwise.\n       * \n       * @static\n       */\n      isBrowserDocument: function() {\n        return isBrowserDocumentVar;\n      },\n      \n      /**\n       * Checks if the code is running inside a Browser. The code might be either running inside a\n       * HTML page or inside a WebWorker.\n       * <BR/>Note that browsers not supporting DOM Level 2 (i.e.: document.getElementById) \n       * are not recognized by this method\n       * \n       * @returns {Boolean} true if the code is running inside a Browser, false otherwise.\n       * \n       * @static\n       */\n      isBrowser: function() {\n        return !isNodeJSVar && (isBrowserDocumentVar || isWebWorkerVar);\n      },\n      \n      /**\n       * Checks if the code is running inside Node.js.\n       * \n       * @returns {Boolean} true if the code is running inside Node.js, false otherwise.\n       * \n       * @static\n       */\n      isNodeJS: function() {\n        return !isBrowserDocumentVar && isNodeJSVar;\n      },\n      \n      /**\n       * Checks if the code is running inside a WebWorker.\n       * \n       * @returns {Boolean} true if the code is running inside a WebWorker, false otherwise.\n       * \n       * @static\n       */\n      isWebWorker: function() {\n        return !isBrowserDocumentVar && !isNodeJSVar && isWebWorkerVar;\n      },\n\n      /**\n       * Checks if the code is not running on a known environment\n       * @returns {boolean} true if the code not running on a known environment, false otherwise.\n       */\n      isOther: function() {\n        return !isBrowserDocumentVar && !isNodeJSVar && !isWebWorkerVar;\n      },\n\n      /**\n       * Helper method that will throw an IllegalStateException if the return value of isBrowserDocument is false.\n       * This method is supposedly called as first thing in a module definition.\n       * \n       * @throws {IllegalStateException} if this function is not called inside a HTML page. The message of the error\n       * is the following: \"Trying to load a browser-only module on non-browser environment\".\n       * \n       * @static\n       * \n       * @example\n       * define([\"Environment\"],function(Environment) {\n       *   Environment.browserDocumentOrDie();\n       *   \n       *   //module definition here\n       * });\n       */\n      browserDocumentOrDie: function() {\n        if(!this.isBrowserDocument()) {\n          throw new IllegalStateException(\"Trying to load a browser-only module on non-browser environment\");\n        }\n      }\n  \n  };\n  \n  Environment[\"isBrowserDocument\"] = Environment.isBrowserDocument;\n  Environment[\"isBrowser\"] = Environment.isBrowser;\n  Environment[\"isNodeJS\"] = Environment.isNodeJS;\n  Environment[\"isWebWorker\"] = Environment.isWebWorker;\n  Environment[\"browserDocumentOrDie\"] = Environment.browserDocumentOrDie;\n    \n  return Environment;\n})();\n    \n","/*\n  Copyright (c) Lightstreamer Srl\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\nimport Environment from \"./Environment\";\n\nexport default /*@__PURE__*/(function() {\n  var TRIM_REGEXP = new RegExp(\"^\\\\s*([\\\\s\\\\S]*?)\\\\s*$\");\n  var COMMA = new RegExp(\",\",\"g\");\n  var DOT = new RegExp(\"\\\\.\",\"g\");\n  \n  /**\n   * This module is a motley collection of simple \"shortcut\" methods\n   * @exports Helpers\n   */\n  var Helpers = {\n      \n      /**\n       * Shortcut for new Date().getTime();\n       * \n       * @returns the current timestamp\n       */\n      getTimeStamp: function() {\n        return new Date().getTime();\n      },\n      \n      /**\n       * Shortcut for Math.round( Math.random() * max );\n       * @param {Number} [max=1000] The max value to be returned\n       * @returns the current timestamp\n       */\n      randomG: function(max) {\n        max = max || 1000;\n        return Math.round( Math.random() * max );\n      },\n      \n      /**\n       * Trims a string\n       * @param {String} str the string to be trimmed\n       * @returns {String} the trimmed string\n       */\n      trim: function(str) {\n        return str.replace(TRIM_REGEXP,\"$1\");\n      },\n      \n      /**\n       * Gets a string and interpret it as a Number. The given string may contain dots or commas to separate decimals\n       * @param {String} val the string to be converted\n       * @param {Boolean} [commaAsDecimalSeparator=false] true to interpret the commas as decimal separators, false to interpret dots as decimal separators\n       * @returns {Number} the interpreted number\n       * @example\n       * Helpers.getNumber(\"3.432.771,201\",true) == 3432771.201\n       */\n      getNumber: function(val, commaAsDecimalSeparator) {\n        if (val) {\n          if (!val.replace) {\n            return val;\n          }\n          if (commaAsDecimalSeparator) {\n            val = val.replace(DOT, \"\");\n            val = val.replace(COMMA, \".\");\n          } else {\n            val = val.replace(COMMA, \"\");\n          }\n          return new Number(val);\n        }\n        return 0;\n      },\n      \n      /**\n       * Shortcut for val.join && typeof(val.join) == \"function\"\n       * @param {Object} val the object to be verified \n       * @returns {Boolean} true if val is an array, false otherwise\n       */\n      isArray: function(val) {\n        return val && val.join && typeof(val.join) == \"function\";\n      },\n      \n      /**\n       * Adds a handler for a browser event. The capture flag is set to false.\n       * @param {Object} obj the element to be listened to.\n       * @param {String} evnt the event to be listened to.\n       * @param {Function} handler the function to be called\n       * @returns {Boolean} true if the event was registered, false otherwise.\n       * @example \n       * Helpers.addEvent(window, \"load\", function(){});\n       */\n      addEvent: function(obj, evnt, handler){ \n        if (!Environment.isBrowserDocument()) {\n          return false;\n        }\n        if (typeof obj.addEventListener != \"undefined\") {\n          obj.addEventListener(evnt, handler, false);\n          \n        } else if (typeof obj.attachEvent != \"undefined\") { //old IE\n          obj.attachEvent(\"on\" + evnt, handler);\n        } \n        return true;\n      },\n      \n      /**\n       * Removes a handler for a browser event. \n       * @param {Object} obj the element that is listened to.\n       * @param {String} evnt the event that is listened to.\n       * @param {Function} handler the function that is called\n       * @returns {Boolean} true if the event was removed, false otherwise.\n       */\n      removeEvent: function(obj, evnt, handler){ \n        if (!Environment.isBrowserDocument()) {\n          return false;\n        }\n        if (typeof obj.removeEventListener != \"undefined\") {\n          obj.removeEventListener(evnt, handler, false);\n          \n        } else if (typeof obj.detachEvent != \"undefined\") { //old IE\n          obj.detachEvent(\"on\" + evnt, handler);\n        } \n        return true;\n      } \n  };\n  \n  Helpers[\"getTimeStamp\"] = Helpers.getTimeStamp;\n  Helpers[\"randomG\"] = Helpers.randomG;\n  Helpers[\"trim\"] = Helpers.trim;\n  Helpers[\"getNumber\"] = Helpers.getNumber;\n  Helpers[\"isArray\"] = Helpers.isArray;\n  Helpers[\"addEvent\"] = Helpers.addEvent;\n  Helpers[\"removeEvent\"] = Helpers.removeEvent;\n  \n  return Helpers;\n})();\n","import Environment from \"../src-tool/Environment\";\n\nexport default /*@__PURE__*/(function() {\n  var Constants = {\n\n  /**\n   * WARNING\n   * if the flag is true, change TLCP_VERSION to 2.1.1 instead of 2.1.0\n   */\n    handleError5: false,\n      \n    REFRESH_STATUS_INTERVAL: 1000,\n    REFRESH_STATUS_INTERVAL_TOLERANCE: 200,\n    STOP_SEARCH_TIMEOUT: 10000,\n    FRAME_NAME_INDEX: 1,\n    TIMESTAMP_INDEX: 0,\n    HOST_INDEX: 2,\n    BUILD_INDEX: 3,\n    PROTOCOL_INDEX: 4,\n    BLOB_INDEX: 5,\n    NULL_VALUE: \"N\",\n    ALONE_CHECK_TIMEOUT: 200,\n\n    MAIN_CLIENT: \"MAIN\",\n\n    WORKER_BRIDGE_GLOBAL: \"wbridge\",\n    FRAME_BRIDGE_GLOBAL: \"fbridge\",\n\n    //channel fail codes\n    PROMISE_TIMEOUT: 1,\n    PROMISE_FAILURE: 2,\n\n\n    BUILD: '$build$',\n    LIBRARY_VERSION: '$version$',\n    LIBRARY_NAME: '$library_name$',\n    LIBRARY_TAG: '$library_tag$',\n    LS_CID: '$LS_cid$',\n    \n    PAGE_PROTOCOL: Environment.isBrowserDocument() && (document.location.protocol == \"http:\" || document.location.protocol == \"https:\") ? document.location.protocol : \"file:\",\n      \n    STREAM: \"lightstreamer.stream\",\n    PROTOCOL: \"lightstreamer.protocol\",\n    SESSION: \"lightstreamer.session\",\n    REQUESTS: \"lightstreamer.requests\",\n    SUBSCRIPTIONS: \"lightstreamer.subscriptions\",\n    MESSAGES: \"lightstreamer.messages\",\n    ACTIONS: \"lightstreamer.actions\",\n    SHARING: \"lightstreamer.sharing\",  \n    CROSSTAB: \"lightstreamer.crosstab\",  \n    STATS: \"lightstreamer.stats\",  \n    MPN: \"lightstreamer.mpn\",  \n    \n    STORAGE_PREFIX: \"Lightstreamer_\",\n      \n    LIGHTSTREAMER_PATH: \"lightstreamer\",\n    \n    _UNORDERED_MESSAGES: \"UNORDERED_MESSAGES\",\n    \n    //unchanged field\n    UNCHANGED: {length:-1,toString:function(){return \"[UNCHANGED]\";}},\n    \n    // *****from LightstreamerConstants -->\n    \n    CONNECTING: \"CONNECTING\",\n    // connected prefix\n    CONNECTED: \"CONNECTED:\",\n    // create_session response received, trying to setup a streaming connection\n    SENSE: \"STREAM-SENSING\",\n    // receiving pushed data\n    WS_STREAMING: \"WS-STREAMING\",\n    HTTP_STREAMING: \"HTTP-STREAMING\",\n    // connected but doesn't receive data\n    STALLED: \"STALLED\",\n    // polling for data\n    WS_POLLING: \"WS-POLLING\",\n    HTTP_POLLING: \"HTTP-POLLING\",\n    // disconnected\n    DISCONNECTED: \"DISCONNECTED\",\n    WILL_RETRY: \"DISCONNECTED:WILL-RETRY\",\n    TRYING_RECOVERY: \"DISCONNECTED:TRYING-RECOVERY\",\n\n    WS_ALL: \"WS\",\n    HTTP_ALL: \"HTTP\",\n    \n    RAW: \"RAW\",\n    DISTINCT: \"DISTINCT\",\n    COMMAND: \"COMMAND\",\n    MERGE: \"MERGE\",\n\n    MASTER: \"MASTER\",\n    \n    TLCP_VERSION: \"TLCP-2.1.0\"\n  \n  };\n    \n  return Constants;\n})();\n  \n","/*\n  Copyright (c) Lightstreamer Srl\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\nimport Environment from \"./Environment\";\n\nexport default /*@__PURE__*/(function() {\n  //You'll find strange comments near the methods declarations; We use such comments to keep track of why are we using such browser sniffing \n  \n  \n /* \n     stuff we never used or used in the past\n   \n      var is_icab = (window.ScriptEngine && (ScriptEngine().indexOf(\"InScript\") > -1));\n      var is_icab2down = (is_icab && !document.createElement);\n      var is_icab3up = (is_icab && document.createElement);\n      \n      var is_konqueror = (navigator.vendor == \"KDE\")||(document.childNodes)&&(!document.all)&&(!navigator.taintEnabled);\n      var is_safari = (document.childNodes)&&(!document.all)&&(!navigator.taintEnabled)&&(!navigator.accentColorName);\n      var is_omniweb45plus = (document.childNodes)&&(!document.all)&&(!navigator.taintEnabled)&&(navigator.accentColorName);\n      \n      var is_nn6up = (navigator.product == \"Gecko\");\n      var is_nn6 = (navigator.product == \"Gecko\" && !window.find);\n      var is_nn7 = (navigator.product == \"Gecko\" && window.find);\n  */\n  //20110909 removed isOldKHTML and isIE5 detections. \n  //20130813 removed isProbablyWinPhone7 detection\n  \n  //null means \"not yet checked\", while false means that we are not on such browser; if we're not on a browser at all\n  //we can directly set everything to false\n  var INIT_VALUE = Environment.isBrowser() ? null : false;\n\n  var LOW_UA = Environment.isBrowser() ? navigator.userAgent.toLowerCase() : null;\n  \n  function getSolution(myVer,reqVer,less) {\n    if(!reqVer || !myVer) {\n      return true;\n    } else if (less === true) {\n      // the given version or less\n      return myVer <= reqVer;\n    } else if (less === false) {\n      //the given version or more \n      return myVer >= reqVer;\n    } else {\n      //exactly the given version\n      return myVer == reqVer;\n    }\n  }\n  \n  function doUACheck(checkString) {\n    return LOW_UA.indexOf(checkString) > -1;\n  }\n  \n  function getSimpleUACheckFunction(checkString) {\n    var resultVar = INIT_VALUE;\n    return function() {\n      if (resultVar === null) {\n        resultVar = doUACheck(checkString);\n      }\n      return resultVar;\n      \n    };\n  };\n  \n  function getChainedANDFunction(funs) {\n    var resultVar = INIT_VALUE;\n    return function() {\n      if (resultVar === null) {\n        resultVar = true;\n        for (var i=0; i<funs.length; i++) {\n          resultVar = resultVar && funs[i]();\n        }\n      }\n      return resultVar;\n    };\n  }\n  function getChainedORFunction(funs) {\n    var resultVar = INIT_VALUE;\n    return function() {\n      if (resultVar === null) {\n        resultVar = false;\n        for (var i=0; i<funs.length; i++) {\n          resultVar = resultVar || funs[i]();\n        }\n      }\n      return resultVar;\n    };\n  }\n  \n  function getVersionedFunction(preCheckFunction,versionExtractionFunction) {\n    var isBrowser = INIT_VALUE;\n    var browserVersion = INIT_VALUE; \n    return function(requestedVersion,orLowerFlag){\n      if (isBrowser === null) {\n        isBrowser = preCheckFunction();\n        browserVersion = isBrowser ? versionExtractionFunction() : null;\n      }\n      return isBrowser ? getSolution(browserVersion,requestedVersion,orLowerFlag) : false;\n    };\n  }\n  \n  function getExtractVersioByRegexpFunction(regexp) {\n    var isBrowser = INIT_VALUE;\n    return function() {\n      if (isBrowser === null) {\n        var res = regexp.exec(LOW_UA);\n      \n        if (res && res.length >= 2) {\n          return res[1];  \n        }\n      }\n      return null;\n    };\n  }\n  \n  function getOperaVersion() {\n    if (!opera.version) {\n      //pre 7.6\n      //we do not need to detect Opera 6 so we're cool like this\n      return 7;\n    } else {\n      //> 7.6\n      var verStr = opera.version();\n      verStr = verStr.replace(new RegExp(\"[^0-9.]+\",\"g\"), \"\");\n      \n      return parseInt(verStr);\n    }\n         //side NOTE: opera 7 mobile does not have opera.postError\n  }\n  \n  function hasOperaGlobal() {\n    return typeof opera != \"undefined\";\n  }\n    \n  function getNotFunction(f) {\n    return function() {\n      return !f();\n    };\n  }\n  \n  \n  var khtmlVar = INIT_VALUE;\n  \n  /**\n   * Simple module that can be used to try to detect the browser in use.If possible the use of this module should be avoided:\n   * it should only be used if the behavior can't be guessed using feature detection. The module does not contain an extensive list\n   * of browsers, new method were added only when needed in the Lightstreamer JavaScript Client library. \n   * <br/>There are two kinds of methods, one does simply recognize the browsers, the other can also discern the browser version.\n   * As most of the methods are based on User Agent inspections all the method names contain the \"probably\" word to recall their\n   * intrinsic weakness.\n   * @exports BrowserDetection\n   */\n  var BrowserDetection = {\n      /**\n       * Check if the browser in use is probably a rekonq or not\n       * @method\n       * @return {Boolean} true if probably a rekonq, false if probably not.\n       */\n      isProbablyRekonq: getSimpleUACheckFunction(\"rekonq\"),  //used by isProbablyApple thus \"spin fix\"\n      /**\n       * Check if the browser in use is probably a WebKit based browser or not\n       * @method\n       * @return {Boolean} true if probably a WebKit based browser, false if probably not.\n       */\n      isProbablyAWebkit: getSimpleUACheckFunction(\"webkit\"),//iframe generation\n      /**\n       * Check if the browser in use is probably a Playstation 3 browser or not\n       * @method\n       * @return {Boolean} true if probably a Playstation 3 browser, false if probably not.\n       */\n      isProbablyPlaystation: getSimpleUACheckFunction(\"playstation 3\"),  //expected streaming behavior\n      /**\n       * Check if the browser in use is probably a Chrome (or Chrome tab)  or not. A specific version or version range can be requested.\n       * @method\n       * @param {Number=} requestedVersion The version to be checked. If not specified any version will do.\n       * @param {Boolean=} orLowerFlag true to check versions up to the specified one, false to check for greater versions; the specified version\n       * is always included. If missing only the specified version is considered.\n       * @return {Boolean} true if the browser is probably the correct one, false if probably not.\n       */\n      isProbablyChrome: getVersionedFunction( \n                                                  getSimpleUACheckFunction(\"chrome/\"),\n                                                  getExtractVersioByRegexpFunction(new RegExp(\"chrome/([0-9]+)\",\"g\"))\n                                                  ),  // iframe content generation / used by isProbablyApple / used by isProbablyAndroid / windows communication\n      /**\n       * Check if the browser in use is probably a KHTML browser or not\n       * @method\n       * @return {Boolean} true if probably a KHTML browser, false if probably not.\n       */\n      isProbablyAKhtml: function() {\n        if (khtmlVar === null) {\n          khtmlVar = (document.childNodes) && (!document.all) && (!navigator.taintEnabled) && (!navigator.accentColorName);\n        }\n        return khtmlVar;\n      }, //hourglass trick\n      /**\n       * Check if the browser in use is probably a Konqueror or not. A specific version or version range can be requested.\n       * @method\n       * @param {Number=} requestedVersion The version to be checked. If not specified any version will do.\n       * @param {Boolean=} orLowerFlag true to check versions up to the specified one, false to check for greater versions; the specified version\n       * is always included. If missing only the specified version is considered.\n       * @return {Boolean} true if the browser is probably the correct one, false if probably not.\n       */\n      isProbablyKonqueror: getVersionedFunction( \n                                                  getSimpleUACheckFunction(\"konqueror\"),\n                                                  getExtractVersioByRegexpFunction(new RegExp(\"konqueror/([0-9.]+)\",\"g\"))\n                                                  ),  //iframe communications / iframe content generation\n      /**\n       * Check if the browser in use is probably an Internet Explorer or not. A specific version or version range can be requested.\n       * @method\n       * @param {Number=} requestedVersion The version to be checked. If not specified any version will do.\n       * @param {Boolean=} orLowerFlag true to check versions up to the specified one, false to check for greater versions; the specified version\n       * is always included. If missing only the specified version is considered.\n       * @return {Boolean} true if the browser is probably the correct one, false if probably not.\n       */                                                 \n      isProbablyIE: function(requestedVersion,orLowerFlag){\n        if (\n                getVersionedFunction(\n                        getSimpleUACheckFunction(\"msie\"), \n                        getExtractVersioByRegexpFunction(new RegExp(\"msie\\\\s\"+\"(\"+\"[0-9]+\"+\")\"+\"[.;]\",\"g\"))\n                )(requestedVersion,orLowerFlag)\n                ||\n                getVersionedFunction(\n                        getSimpleUACheckFunction(\"rv:11.0\"),\n                        function() { return \"11\"; }\n                )(requestedVersion,orLowerFlag)\n                ) {\n          return true;\n        } else {\n          return false;\n        }\n      },  //color name resolution / eval isolation / hourglass trick / expected streaming behavior / iframe communication / iframe domain handling / iframe creation\n      /**\n       * Check if the browser in use is probably an Internet Explorer 11 or not.\n       * @method\n       * @return {Boolean} true if the browser is probably the correct one, false if probably not.\n       */                                                 \n      isProbablyEdge: getSimpleUACheckFunction(\"edge\"), // expected streaming behavior\n      /**\n       * Check if the browser in use is probably a Firefox or not. A specific version or version range can be requested.\n       * @method\n       * @param {Number=} requestedVersion The version to be checked. If not specified any version will do.\n       * @param {Boolean=} orLowerFlag true to check versions up to the specified one, false to check for greater versions; the specified version\n       * is always included. If missing only the specified version is considered.\n       * @return {Boolean} true if the browser is probably the correct one, false if probably not.\n       */  \n      isProbablyFX: getVersionedFunction(\n                                         getSimpleUACheckFunction(\"firefox\"),\n                                         getExtractVersioByRegexpFunction(new RegExp(\"firefox\\\\/(\\\\d+\\\\.?\\\\d*)\"))\n                                         ), //mad check\n      /**\n       * Check if the browser in use is probably an old Opera (i.e.: up to the WebKit switch) or not. A specific version or version range can be requested.\n       * @method\n       * @param {Number=} requestedVersion The version to be checked. If not specified any version will do.\n       * @param {Boolean=} orLowerFlag true to check versions up to the specified one, false to check for greater versions; the specified version\n       * is always included. If missing only the specified version is considered.\n       * @return {Boolean} true if the browser is probably the correct one, false if probably not.\n       */                                          \n      isProbablyOldOpera: getVersionedFunction(hasOperaGlobal,getOperaVersion) //autoscroll / expected streaming behavior / windows communication / onload expectations / iframe communications / iframe content generation / iframe generation\n  };\n  \n  /**\n   * Check if the browser in use is probably an Android stock browser or not\n   * @method\n   * @return {Boolean} true if probably an Android stock browser, false if probably not.\n   */\n  BrowserDetection.isProbablyAndroidBrowser = getChainedANDFunction([\n                                                       getSimpleUACheckFunction(\"android\"),\n                                                       BrowserDetection.isProbablyAWebkit,\n                                                       getNotFunction(BrowserDetection.isProbablyChrome)\n                                                       ]);//spin fix / connection behavior handling\n   /**\n    * Check if the browser in use is probably an Opera Mobile or not\n    * @method\n    * @return {Boolean} true if probably a an Opera Mobile, false if probably not.\n    */\n   BrowserDetection.isProbablyOperaMobile = getChainedANDFunction([\n                                                    BrowserDetection.isProbablyOldOpera,\n                                                    getSimpleUACheckFunction(\"opera mobi\")\n                                                    ]); //expected test results\n     \n    /**\n     * Check if the browser in use is probably an Apple Browser (i.e. Safari or Safari Mobile) or not. A specific version or version range can be requested.\n     * @method\n     * @param {Number=} requestedVersion The version to be checked. If not specified any version will do.\n     * @param {Boolean=} orLowerFlag true to check versions up to the specified one, false to check for greater versions; the specified version\n     * is always included. If missing only the specified version is considered.\n     * @return {Boolean} true if the browser is probably the correct one, false if probably not.\n     */ \n    BrowserDetection.isProbablyApple = getVersionedFunction( \n                                        getChainedANDFunction([ // safari + (ipad || iphone || ipod || (!android+!chrome+!rekonq))\n                                            getSimpleUACheckFunction(\"safari\"),\n                                            getChainedORFunction([\n                                                                  getSimpleUACheckFunction(\"ipad\"),\n                                                                  getSimpleUACheckFunction(\"iphone\"),\n                                                                  getSimpleUACheckFunction(\"ipod\"),\n                                                                  getChainedANDFunction([\n                                                                                         getNotFunction(BrowserDetection.isProbablyAndroidBrowser),\n                                                                                         getNotFunction(BrowserDetection.isProbablyChrome),\n                                                                                         getNotFunction(BrowserDetection.isProbablyRekonq)])\n                                                                  ])\n                                            ]),\n                                            getExtractVersioByRegexpFunction(new RegExp(\"version\\\\/(\\\\d+\\\\.?\\\\d*)\"))\n                                          ); //spin fix / windows communication\n  \n  BrowserDetection[\"isProbablyRekonq\"] = BrowserDetection.isProbablyRekonq;\n  BrowserDetection[\"isProbablyChrome\"] = BrowserDetection.isProbablyChrome;\n  BrowserDetection[\"isProbablyAWebkit\"] = BrowserDetection.isProbablyAWebkit;\n  BrowserDetection[\"isProbablyPlaystation\"] = BrowserDetection.isProbablyPlaystation;\n  BrowserDetection[\"isProbablyAndroidBrowser\"] = BrowserDetection.isProbablyAndroidBrowser;\n  BrowserDetection[\"isProbablyOperaMobile\"] = BrowserDetection.isProbablyOperaMobile;\n  BrowserDetection[\"isProbablyApple\"] = BrowserDetection.isProbablyApple;\n  BrowserDetection[\"isProbablyAKhtml\"] = BrowserDetection.isProbablyAKhtml;\n  BrowserDetection[\"isProbablyKonqueror\"] = BrowserDetection.isProbablyKonqueror;\n  BrowserDetection[\"isProbablyIE\"] = BrowserDetection.isProbablyIE;\n  BrowserDetection[\"isProbablyEdge\"] = BrowserDetection.isProbablyEdge;\n  BrowserDetection[\"isProbablyFX\"] = BrowserDetection.isProbablyFX;\n  BrowserDetection[\"isProbablyOldOpera\"] = BrowserDetection.isProbablyOldOpera;\n  return BrowserDetection;\n})();\n  \n  \n  \n","/*\n  Copyright (c) Lightstreamer Srl\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nexport default /*@__PURE__*/(function() {  \n  /**\n   * Creates an empty List instance\n   * @constructor\n   *\n   * @exports List\n   * @class Very simple Array-backed List implementation.<br/>\n   * It is discouraged the use of this class to handle big lists. \n   */\n  var List = function() {\n    this.data = [];\n  };\n  \n  List.prototype = {\n      \n    /**\n     * Adds the element to the end of the list (using Array.push).\n     * Each element can be added multiple times; in such case it will be added to the list multiple times\n     * \n     * @param {Object} newEl The element to be added\n     */\n    add: function(newEl) {\n      this.data.push(newEl);\n    },\n    \n    /**\n     * Removes the first occurrence of the specified object in the List.<br/>\n     * A linear search is performed to find the element; a non-strict comparison ( == )\n     * is performed to identify the element. \n     * \n     * @param {Object} newEl The element to be removed\n     * \n     * @returns {Boolean} true if element was found and deleted, false otherwise\n     */\n    remove: function(remEl) {\n      var i = this.find(remEl);\n      if (i < 0) {\n        return false;\n      }\n      this.data.splice(i,1);\n      return true;\n    },\n\n    /**\n     * Checks if an element is in the list\n     *\n     * @param {Object} el the element to be searched\n     *\n     * @returns {Boolean} true if element was found, false otherwise\n     */\n    contains: function(el) {\n      return this.find(el) >= 0;\n    },\n\n    /**\n     * @private\n     */\n    find: function(el) {\n      for (var i=0; i<this.data.length; i++) {\n        if (this.data[i] === el) {\n          return i;\n        }\n      }\n      return -1;\n    },\n    \n    /**\n     * Executes a given callback passing each element of the list as the only\n     * call parameter.<br/>  \n     * Callbacks are executed synchronously before the method returns: calling \n     * {@link List#add} or {@link List#remove} during callback execution may result in\n     * a wrong iteration.\n     * \n     * @param {Function} cb The callback to be called.\n     */\n    forEach: function(cb) {\n      for (var i=0; i<this.data.length; i++) {\n        cb(this.data[i]);\n      }\n    },\n    \n    /**\n     * Returns a copy of the internal array.\n     * \n     * @returns {Array} A copy of the original array.\n     */\n    asArray: function() {\n      return [].concat(this.data);\n    },\n    \n    /**\n     * Resets the list by re-instantiating the internal array.\n     */\n    clean: function() {\n      this.data = [];\n    }\n    \n  };\n  \n  //exports\n  List.prototype[\"add\"] = List.prototype.add;\n  List.prototype[\"remove\"] = List.prototype.remove;\n  List.prototype[\"forEach\"] = List.prototype.forEach;\n  List.prototype[\"asArray\"] = List.prototype.asArray;\n  List.prototype[\"clean\"] = List.prototype.clean;\n  \n  \n  return List;\n})();\n  \n  \n","/*\n  Copyright (c) Lightstreamer Srl\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\nimport Helpers from \"./Helpers\";\nimport BrowserDetection from \"./BrowserDetection\";\nimport Environment from \"./Environment\";\nimport List from \"./List\";\n\nexport default /*@__PURE__*/(function() {\n  //do not use EventDispatcher/Executor to avoid circular dependencies hell\n    \n  var onunloadFunctions = new List();\n  var onloadFunctions = new List();  \n  var onbeforeunloadFunctions = new List();\n  var controlLoadTimeout = 1000;\n  \n  var isDOMLoaded = false;\n  \n  //closure compiler trick -->\n  var names = {\n    onloadDone : \"onloadDone\",\n    onloadInprogress : \"onloadInprogress\",\n    unloaded : \"unloaded\",\n    unloading : \"unloading\",\n    preunloading : \"preunloading\"\n  };\n  var reverse = {};\n  for (var i in names) {\n    reverse[names[i]] = i;\n  }\n  //<-- closure compiler trick\n \n  \n  function getOnloadClosure(that) {\n    return getEventClosure(that,reverse['onloadDone'],reverse['onloadInprogress'],onloadFunctions,'onloadEvent');\n  }\n  \n  function getUnloadClosure(that) {\n    return getEventClosure(that,reverse['unloaded'],reverse['unloading'],onunloadFunctions,'unloadEvent');\n  }\n  \n  function getBeforeUnloadClosure(that) {\n    return getEventClosure(that,reverse['preunloading'],reverse['preunloading'],onbeforeunloadFunctions,'preUnloadEvent');\n  }\n  \n  \n  function getEventClosure(that,toCheck,toSet,toExe,methodName) {\n    return function() {\n      if (that[toCheck]) {\n        return;\n      }\n      that[toSet] = true;\n      \n      toExe.forEach(function(elToExe) {\n        try {\n          singleEventExecution(elToExe,methodName);\n        } catch (_e) {\n        }\n      });\n      \n      if (toCheck != 'preunloading') {\n        toExe.clean();\n      }\n\n      that[toCheck] = true;\n      that[toSet] = false;\n    };\n    \n  }\n  \n  function singleEventExecution(elToExe,methodName) {\n    if (elToExe[methodName]) {\n      elToExe[methodName]();\n    } else {\n      elToExe();\n    }\n  }\n  \n  function asynchSingleEventExecution(elToExe,methodName) { \n    setTimeout(function() {\n      singleEventExecution(elToExe,methodName);\n    },0);\n  }\n  \n  function executeLater(what,when,who,how) { \n    setTimeout(function() {\n      if (who) {\n        if (how) {\n          what.apply(who,how);\n        } else {\n          what.apply(who);\n        }\n      } else if (how) {\n        what.apply(null, how);\n      } else {\n        what();\n      }\n    },when);\n  }\n  \n  function DOMloaded() {\n    isDOMLoaded = true; //no need to initialize it anywhere\n  }\n    \n  /**\n   * Tries to track the loading status of the page. It may fallback to using timeouts or DOMContentLoaded events to address browser compatibilities: in such\n   * cases there is a chance that the registered onload handlers are fired before the actual onload is. Also unload and beforeunload may not fire at all.\n   * @exports EnvironmentStatus\n   */\n  var EnvironmentStatus = {\n    /**\n     * @private\n     */\n    onloadDone: false,\n    /**\n     * @private\n     */\n    onloadInprogress: false,\n    /**\n     * @private\n     */\n    unloaded: false,\n    /**\n     * @private\n     */\n    unloading: false,\n    /**\n     * @private\n     */\n    preunloading: false,\n    \n    /**\n     * Checks if the load event has been fired.\n     * @returns {Boolean} true if the load event has already been fired, false otherwise.\n     */\n    isLoaded: function() {\n      return this.onloadDone;\n    },\n    /**\n     * Checks if the unload event has been fired.\n     * @returns {Boolean} true if the unload event has already been fired, false otherwise.\n     */\n    isUnloaded : function() {\n      return this.unloaded;\n    },\n    /**\n     * Checks if the unload event is currently being handled.\n     * @returns {Boolean} true if the unload event is currently being handled, false otherwise.\n     */\n    isUnloading: function() {\n      return this.unloading;\n    },\n    \n    /**\n     * Adds a handler for the load event. If the event was already fired the handler is sent in a setTimeout (with a 0 timeout).\n     * @param {Function|EnvironmentStatusListener} the function to be executed or an object containing the onloadEvent function to be executed. \n     */\n    addOnloadHandler: function(f) {\n      if (this.isPreOnload()) {\n        onloadFunctions.add(f);\n      } else {\n        asynchSingleEventExecution(f,'onloadEvent');\n      }\n    },\n    \n    /**\n     * Adds a handler for the unload event. If the event was already fired the handler is sent in a setTimeout (with a 0 timeout).\n     * @param {Function|EnvironmentStatusListener} the function to be executed or an object containing the unloadEvent function to be executed. \n     */\n    addUnloadHandler: function(f) {\n      if (this.isPreUnload()) {\n        onunloadFunctions.add(f);\n      } else {\n        asynchSingleEventExecution(f,'unloadEvent');\n      }\n    },\n    \n    /**\n     * Adds a handler for the onbeforeunload event.\n     * @param {Function|EnvironmentStatusListener} the function to be executed or an object containing the preUnloadEvent function to be executed. \n     */\n    addBeforeUnloadHandler: function(f) {\n      onbeforeunloadFunctions.add(f);\n      if (this.preunloading) {\n        asynchSingleEventExecution(f,'preUnloadEvent');\n      }\n    },\n    \n    /**\n     * Removes the specified load handler if present, otherwise it does nothing. \n     * @param {Function|EnvironmentStatusListener} the function or object to be removed\n     */\n    removeOnloadHandler: function(f) {\n      onloadFunctions.remove(f);\n    },\n    \n    /**\n     * Removes the specified unload handler if present, otherwise it does nothing. \n     * @param {Function|EnvironmentStatusListener} the function or object to be removed\n     */\n    removeUnloadHandler: function(f) {\n      onunloadFunctions.remove(f);\n    },\n    \n    /**\n     * Removes the specified onbeforeunload handler if present, otherwise it does nothing. \n     * @param {Function|EnvironmentStatusListener} the function or object to be removed.\n     */\n    removeBeforeUnloadHandler: function(f) {\n      onbeforeunloadFunctions.remove(f);\n    },\n    \n    /**\n     * @private\n     */\n    isPreOnload: function() {\n      return !(this.onloadDone || this.onloadInprogress);\n    },\n    \n    /**\n     * @private\n     */\n    isPreUnload: function() {\n      return !(this.unloaded || this.unloading);\n    },\n  \n    /**\n     * @private\n     */\n    attachToWindow: function() {\n      Helpers.addEvent(window,\"unload\",this.closeFun);\n      Helpers.addEvent(window,\"beforeunload\",this.beforeCloseFun);\n      \n      //EXPERIMENTAL\n      if (document && typeof document.readyState != \"undefined\") {\n        var strState = document.readyState;\n        if (strState.toUpperCase() == \"COMPLETE\") {\n          //already loaded\n          this.asynchExecution();\n          return;\n        } else {\n          //It may happen that readyState is not \"completed\" but the onload\n          //was already fired. We fire a timeout to check the case\n          executeLater(this.controlReadyStateLoad,controlLoadTimeout,this);\n        }\n      } else if(this.isInBody()) {\n        //already loaded\n        this.asynchExecution();\n        return;\n      }\n      //EXPERIMENTAL end\n      \n\n      var done = Helpers.addEvent(window,\"load\",this.readyFun);\n      if (!done) {\n        //Can't append an event listener to the onload event (webworker / nodejs)\n        //Let's launch a timeout \n        this.asynchExecution(); //should not happen since we did the check on the module setup, why did we keep it?\n      } else if (BrowserDetection.isProbablyOldOpera()) {\n        //Old Opera did not fire the onload event on a page wrapped\n        //in an iFrame if a brother iFrame is still loading (in the\n        //worst case the second iFrame is a forever-frame)\n        //To prevent the case we will fire a fake onload\n       \n        \n        var checkDOM = false;\n        //on Opera < 9 DOMContentLoaded does not exist, so we can't wait for it\n        if (BrowserDetection.isProbablyOldOpera(9, false)) {\n          checkDOM = true;\n          //DOMContentLoaded did not fire yet or we should have not reach this point \n          //as per the readyState/isInBody checks\n          Helpers.addEvent(document,\"DOMContentLoaded\",DOMloaded);\n        } \n        executeLater(this.controlOperaLoad,controlLoadTimeout,this,[checkDOM]);\n        \n      }\n    },\n    \n    /**\n     * @private\n     */\n    asynchExecution: function() {\n      executeLater(this.readyFun,0);\n    },\n    \n    /**\n     * @private\n     */\n    controlReadyStateLoad: function() {\n      if (!this.onloadDone) {\n        //onload not yet fired\n        var strState = document.readyState;\n        if (strState.toUpperCase() == \"COMPLETE\") {\n          this.readyFun();\n        } else {\n          executeLater(this.controlReadyStateLoad,controlLoadTimeout,this);\n        }\n      }\n    },\n    \n    /**\n     * @private\n     */\n    controlOperaLoad: function(checkDOM) {\n      if (!this.onloadDone) {\n        //onload not yet fired\n        if (isDOMLoaded || !checkDOM && this.isInBody()) {\n          //DOM is there\n          //let's fake the onload event\n          this.readyFun(); \n        } else {\n          //body is still missing\n          executeLater(this.controlOperaLoad,controlLoadTimeout,this,[checkDOM]);\n        }\n      }\n    },\n    \n    /**\n     * @private\n     */\n    isInBody: function() {\n      return (typeof document.getElementsByTagName != \"undefined\" && typeof document.getElementById != \"undefined\" && ( document.getElementsByTagName(\"body\")[0] != null || document.body != null ) );\n    }\n    \n  };\n  \n  \n  EnvironmentStatus.readyFun = getOnloadClosure(EnvironmentStatus);\n  EnvironmentStatus.closeFun = getUnloadClosure(EnvironmentStatus);\n  EnvironmentStatus.beforeCloseFun = getBeforeUnloadClosure(EnvironmentStatus);\n  if (Environment.isBrowserDocument()) {\n    EnvironmentStatus.attachToWindow();\n  } else {\n    EnvironmentStatus.asynchExecution();\n  }\n  \n  \n  \n  EnvironmentStatus[\"addOnloadHandler\"] = EnvironmentStatus.addOnloadHandler;\n  EnvironmentStatus[\"addUnloadHandler\"] = EnvironmentStatus.addUnloadHandler;\n  EnvironmentStatus[\"addBeforeUnloadHandler\"] = EnvironmentStatus.addBeforeUnloadHandler;\n  EnvironmentStatus[\"removeOnloadHandler\"] = EnvironmentStatus.removeOnloadHandler;\n  EnvironmentStatus[\"removeUnloadHandler\"] = EnvironmentStatus.removeUnloadHandler;\n  EnvironmentStatus[\"removeBeforeUnloadHandler\"] = EnvironmentStatus.removeBeforeUnloadHandler;\n  EnvironmentStatus[\"isLoaded\"] = EnvironmentStatus.isLoaded;\n  EnvironmentStatus[\"isUnloaded\"] = EnvironmentStatus.isUnloaded;\n  EnvironmentStatus[\"isUnloading\"] = EnvironmentStatus.isUnloading;\n  \n  \n  \n  /**\n   * This constructor does nothing\n   * @constructor\n   * \n   * @exports EnvironmentStatusListener\n   * @class Interface that can be implemented to listen to {@link module:EnvironmentStatus} events.\n   */\n  var EnvironmentStatusListener = function() { //only for jsdoc sake, closure will remove it\n    \n  };\n  EnvironmentStatusListener.prototype = {\n      /**\n       * @see module:EnvironmentStatus.addOnloadHandler\n       */\n      onloadEvent: function() {\n        \n      },\n      /**\n       * @see module:EnvironmentStatus.addUnloadHandler\n       */\n      unloadEvent: function() {\n        \n      },\n      /**\n       * @see module:EnvironmentStatus.addBeforeUnloadHandler\n       */\n      preUnloadEvent: function() {\n        \n      }\n  };\n  \n  return EnvironmentStatus;\n})();\n  \n","import Constants from \"./Constants\";\nimport EnvironmentStatus from \"../src-tool/EnvironmentStatus\";\nimport Environment from \"../src-tool/Environment\";\n  \n  var ls = \"Lightstreamer\";\n  \n  var Lightstreamer = {\n    wstatus: EnvironmentStatus,\n    \n    \n    toString: function() {\n      return \"[\"+ls+\" \"+this[\"library\"]+\" client version \"+this[\"version\"]+\" build \" +this[\"build\"]+\"]\";\n    },\n   \n    exportGlobal: function(exportId,exportName,exportVal,prefix) {\n      prefix = prefix || \"_\";\n      \n      var gName = prefix+exportId;\n      if (!this[gName]) {\n        this[gName] = {};\n      }\n      this[gName][exportName] = exportVal;\n      \n      return ls+\".\"+gName+\".\"+exportName;\n    },\n    \n    hasGlobal: function(exportId,exportName,prefix) {\n      prefix = prefix || \"_\";\n      var gName = prefix+exportId;\n      return this[gName] && this[gName][exportName];\n    },\n\n    getGlobal: function(exportId,exportName,prefix) {\n      prefix = prefix || \"_\";\n      var gName = prefix+exportId;\n      if (this[gName]) {\n        return this[gName][exportName];\n      }\n      return null;\n    },\n    \n    cleanGlobal: function(exportId,cleanName,prefix) {\n      prefix = prefix || \"_\";\n      \n      var gName = prefix+exportId;\n      if (this[gName] && this[gName][cleanName]) {\n        delete(this[gName][cleanName]);\n        \n        for (var inThere in this[gName]) {\n          return;\n        }\n        delete(this[gName]);\n        \n      }\n    },\n    \n    cleanAllGlobals: function(exportId,prefix) {\n      prefix = prefix || \"_\";\n      \n      var gName = prefix+exportId;\n      if (this[gName]) {\n        delete(this[gName]);\n      }\n    },\n    \n    //ExtIframe exports \"EQCallback_\"+frameName (QXXX) [OK]\n      //nobody cleans...\n    \n    //SessionHandler exports LS_forceReload (_XXX) [OK]\n      //cleaned by LightstreamerEngine.suicide\n    \n    //PushEvents exports: \n      //LS_e (_XXX) [OK]\n      //LS_t (_XXX) [OK]\n      //LS_u (_XXX) [OK]\n      //LS_v (_XXX) [OK]\n      //LS_o (_XXX) [OK]\n      //LS_n (_XXX) [OK]\n      //LS_s (_XXX) [OK]\n      //LS_l (_XXX) [OK]\n      //LS_w (_XXX) [OK]\n        //cleaned by LightstreamerEngine.suicide\n  \n    //LightstreamerEngine exports lsEngine on its bind call (_XXX) [OK]\n      //cleans all _XXX on its suicide call\n    \n    //AjaxFrame exports LS_a on its attachGlobal call (AXXX) [OK}\n      //nobody cleans...\n  \n    //PushPage exports lsPage on its changeStatusPhase call (PXXX) [OK]\n      //cleans PXXX.lsPage on its changeStatusPhase call \n      \n    localSharedEngines: {},\n    addSharableEngine: function(name,lsEngine) {\n      var sharedEngines = this.localSharedEngines;\n\n      if (!sharedEngines[name]) {\n        sharedEngines[name] = [];\n      }\n      sharedEngines[name].push(lsEngine);\n    },\n    removeSharableEngine: function(name,lsEngine) {\n      var sharedEngines = this.localSharedEngines[name];\n      \n      if (sharedEngines) {\n        for (var i = 0; i < sharedEngines.length; i++) {\n          if(sharedEngines[i] == lsEngine) {\n            sharedEngines.splice(i,1);\n          }\n        }\n        if (sharedEngines.length == 0) {\n          delete(sharedEngines[name]);\n        }\n      }\n    },\n    \n    getSharableEngine: function(engineName) {\n      if (this.localSharedEngines[engineName]) {\n        var sharedEngines = this.localSharedEngines[engineName];\n        if (sharedEngines && sharedEngines.length > 0) {\n          //we grab the first one \n          return sharedEngines[0];\n        }\n      }\n      return null;\n    }\n    \n    \n    \n  };\n  \n  //OpenAjax\n  if (Environment.isBrowserDocument()) {\n    if (window.OpenAjax && window.OpenAjax.hub) {\n        window.OpenAjax.hub.registerLibrary(ls, \"http://www.lightstreamer.com/\", Lightstreamer.version);\n    }\n\n    //create the global object\n    window[\"Lightstreamer\"] = Lightstreamer;\n  }\n\n\n  Lightstreamer[\"library\"] = Constants.LIBRARY_NAME;\n  Lightstreamer[\"version\"] = Constants.LIBRARY_VERSION;\n  Lightstreamer[\"build\"] = Constants.BUILD;\n  \n  \n  export default Lightstreamer;  \n","/*\n  Copyright (c) Lightstreamer Srl\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\nimport Helpers from \"./Helpers\";\nimport EnvironmentStatus from \"./EnvironmentStatus\";\nimport Environment from \"./Environment\";\n\nexport default /*@__PURE__*/(function() {\n    var step = 50;\n    var newStuffFlag = false;\n    var toBeExecuted = [];\n    var now = Helpers.getTimeStamp();\n    var RESET_TIME = 3*60*60*1000; //3 hours\n    var resetAt = now+RESET_TIME; //workaround for Safari 5 windows: after several hours the toBeExecuted array becomes unusable (OOM)\n    var toBeRepeated = [];\n    var timer = null;\n    var nextId = 0;\n    //var goodWakeups = 0;\n    \n    function sortFun(a,b) {\n      if (a.time === b.time) {\n        return a.orderId - b.orderId;\n      }\n      return a.time-b.time;\n    }\n    \n    //TICK handling stuff\n    var origin = Environment.isBrowserDocument() && (document.location.protocol == \"http:\" || document.location.protocol == \"https:\") ? (document.location.protocol+\"//\"+document.location.hostname+(document.location.port?\":\"+document.location.port:\"\")) : \"*\";\n    var DEFAULT_GENERATE_TICK = function() { /*setTimeout(doTick,0); */ };\n    var generateTickExecution = DEFAULT_GENERATE_TICK;\n    var pendingGeneratedTick = false;\n    function doTick() {\n      pendingGeneratedTick = false;\n      execute();\n    }\n    //we need to call this for urgent task as on FX5 and CH11 setInterval/setTimeout calls \n    //are made 1 per second on background pages (and our 50ms tick is based on a setInterval) \n    function generateTick() {\n      if (!pendingGeneratedTick) {\n        pendingGeneratedTick = true;\n        generateTickExecution();\n      }\n    }\n    \n    \n    function doInit() {\n      if (!timer) {\n        //set up the method to generate the tick\n        //  on recent browsers we send a post message and trigger the doTick when we receive such message\n        if (Environment.isBrowserDocument() && typeof postMessage != \"undefined\") {\n          generateTickExecution = function() {\n              try {\n                  window.postMessage(\"Lightstreamer.run\",origin);                    \n              } catch (e) {\n                  // sometimes on IE postMessage fails mysteriously but, if repeated, works\n                  try {\n                      window.postMessage(\"Lightstreamer.run\",origin);\n                  } catch (e) {\n                      // await next tick (at most 50ms on foreground page and 1s in background pages)\n                  }\n              }\n          };\n          \n          var postMessageHandler = function(event){\n            if (event.data == \"Lightstreamer.run\" && origin == \"*\" || event.origin == origin) {\n              doTick();\n            }\n          };\n          Helpers.addEvent(window,\"message\", postMessageHandler);\n          \n          ///verify if postMessage can be used \n          generateTick();\n          if (pendingGeneratedTick == false) {\n            //post message can't be used, rollback\n            Helpers.removeEvent(window,\"message\", postMessageHandler);\n            generateTickExecution =  DEFAULT_GENERATE_TICK;\n          }\n          \n        } else if (Environment.isNodeJS() && typeof process != \"undefined\" && process.nextTick) {\n          //  on node versions having the nextTick method we rely on that\n          generateTickExecution  = function() {\n            process.nextTick(doTick);\n          };\n          \n        } //  other cases will use the default implementation that's currently empty\n        \n      } else {\n        clearInterval(timer);\n      }\n      \n      //for \"normal\" tasks we use an interval\n      timer = setInterval(execute,step);\n    }\n    \n    \n    //main execution method, the core of the Executor\n    function execute() {\n      if (EnvironmentStatus.unloaded) {\n        clearInterval(timer);\n        return;\n      }\n      \n      var last = now;\n      now = Helpers.getTimeStamp();\n      if (now < last) {\n        // not to be expected, but let's protect from this, because, otherwise,\n        // the order of the events might not be respected\n        now = last;\n      }\n      //adjustTimer(last, now);\n      \n      if (toBeExecuted.length > 0) {\n        if (newStuffFlag) {\n          toBeExecuted.sort(sortFun);\n          newStuffFlag = false;\n        } //no new tasks = no need to sort\n        \n        var exeNow;\n        while (toBeExecuted.length > 0 && toBeExecuted[0].time <= now && !EnvironmentStatus.unloaded) {\n          exeNow = toBeExecuted.shift();\n          if (exeNow.fun) {\n            Executor.executeTask(exeNow);\n            \n            //prepare to re-enqueue repetetive tasks\n            if (exeNow.step) {  \n              toBeRepeated.push(exeNow);\n            }\n          } \n        }\n      } \n\n      if (toBeExecuted.length <= 0) { //if queue is empty reset the index\n        nextId = 0;\n      }\n      \n      // re-enqueue repetetive tasks \n      var t;\n      while(toBeRepeated.length > 0) {\n        t = toBeRepeated.shift();\n        if (t.step) { //a task might have called stopRepetitiveTask on this task\n          t.orderId = nextId++;\n          Executor.addPackedTimedTask(t,t.step,true);\n        }\n      }\n      \n      if (now >= resetAt) {\n        resetAt = now+RESET_TIME;\n        toBeExecuted = [].concat(toBeExecuted);\n      }\n    }\n\n    /**\n     * An Executor based on a single setInterval that is triggered every 50ms to dequeue expired tasks.\n     * When 0ms tasks are enqueued a postMessage call is used to trigger an immediate execution; on nodejs\n     * the process.nextTick method is used in place of the postMessage; on older browser where postMessage\n     * is not supported no action is taken.\n     * \n     * @exports Executor\n     * @extends module:ExecutorInterface\n     */\n    var Executor = {  \n      \n      toString: function() {\n        return [\"[\",\"Executor\",step,toBeExecuted.length,/*this.goodWakeups,*/\"]\"].join(\"|\");\n      },\n     \n    \n      getQueueLength: function() {\n        return toBeExecuted.length;\n      },\n      \n      packTask: function(fun,context,params) {\n        return {fun:fun,context:context||null,params:params||null,orderId:nextId++};\n      },\n      \n      addPackedTimedTask: function(task,time,repetitive) {\n        task.step = repetitive ? time : null;\n        task.time = now + parseInt(time);\n        // WARNING: \"now\" has not been refreshed;\n        // hence, with this implementation, the order of the events is guaranteed\n        // only when \"time\" is the same (or growing);\n        // we assume that sequences of tasks to be kept ordered will have a the same \"time\"\n        \n        if (isNaN(task.time)) {\n          try {\n            throw new Error();\n          } catch(e) {\n            var err = \"Executor error for time: \" + time;\n            if (e.stack) {\n              err+= \" \" +e.stack;\n            }\n            throw err;\n          }\n        }\n        toBeExecuted.push(task);\n        newStuffFlag = true;\n      },\n      \n      addRepetitiveTask: function(fun,interval,context,params) {\n        return this.addTimedTask(fun,interval,context,params,true);\n      },\n\n      stopRepetitiveTask: function(task) {\n        if (!task) {\n          return;\n        }\n        task.fun = null;\n        task.step = null;\n      },\n\n      addTimedTask: function(fun,time,context,params,repetitive) {\n        var task = this.packTask(fun,context,params);\n        this.addPackedTimedTask(task,time,repetitive);\n        if (time == 0) {\n          generateTick();\n        }\n        return task;\n      },\n      \n      modifyTaskParam: function(task,index,newParam) {\n        task.params[index] = newParam;\n      },\n      \n      modifyAllTaskParams: function(task,extParams) {\n        task.params = extParams;\n      },\n      \n      delayTask: function(task,delay) {\n        task.time += delay;\n        newStuffFlag = true;\n      },\n      \n      executeTask: function(task,extParams) {\n        try {\n\n            //IE doesn't like the simple form when useParams is null:\n            //task.fun.apply(task.context, task.params);\n            //if we leave the above code instead of using the below code, we fall into IE weird problem, where\n            //the execution fails in exception, task.fun results not null nor undefined, but if we try to print it \n            //(toString) or call it results as undefined (exception \"Object expected\").\n          \n          var useParams = extParams || task.params;\n          \n          if (task.context) {\n            if (useParams) {\n              task.fun.apply(task.context, useParams);\n            } else {\n              task.fun.apply(task.context);\n            }\n          } else if (useParams) {\n            task.fun.apply(null, useParams);\n          } else {\n            task.fun();\n          }\n          \n        } catch (_e) {\n          var sendName = null;\n          try {\n            sendName = task.fun.name || task.fun.toString();\n          } catch(_x) {\n          }\n          //TODO report sendName\n        } \n        \n      }\n      \n   };\n   \n   if (Environment.isWebWorker()) {\n     //we need this workaround otherwise on firefox 10 the Executor may not run as expected.\n     //I wasn't able to create a simple test case as it seems that the number of classes involved\n     //and the loading order have an impact on the issue (so that it is possible that once built the\n     //issue will not be there)\n     //I don't want to include BrowserDetection here so that I apply the workaround on all browsers\n     setTimeout(doInit,1);\n     \n     //other possible workarounds (referring to the failing test)\n     //that make the Executor run correctly:\n     // *do not include Subscription\n     // *do not include the descriptor classes (inside the library code)\n     // *set the step value to a higher value (75 and 100 are suggested values that seem to work)\n     \n   } else {\n     doInit();\n   }\n   \n   Executor[\"getQueueLength\"] = Executor.getQueueLength;\n   Executor[\"packTask\"] = Executor.packTask;\n   Executor[\"addPackedTimedTask\"] = Executor.addPackedTimedTask;\n   Executor[\"addRepetitiveTask\"] = Executor.addRepetitiveTask;\n   Executor[\"stopRepetitiveTask\"] = Executor.stopRepetitiveTask;\n   Executor[\"addTimedTask\"] = Executor.addTimedTask;\n   Executor[\"modifyTaskParam\"] = Executor.modifyTaskParam;\n   Executor[\"modifyAllTaskParams\"] = Executor.modifyAllTaskParams;\n   Executor[\"delayTask\"] = Executor.delayTask;\n   Executor[\"executeTask\"] = Executor.executeTask;\n   \n   return Executor;\n})();\n\n   \n \n \n/*\n      function adjustTimer(last, now) {\n        var diff = now - last;\n        \n        if (diff <= step) {\n          goodWakeups++;\n        } else {\n          goodWakeups--;\n        }\n        \n        if (goodWakeups >= 10) {\n          changeStep(step+1);\n          goodWakeups = 0;\n        } else if (goodWakeups < 0) {\n          if (step >= 2) {\n            changeStep(Math.round(step / 2));\n            goodWakeups = 0;\n          } else {\n            goodWakeups = 0;\n          }\n        }\n      }\n      \n      function changeStep (newStep) {\n        step = newStep;\n        doInit();\n      }\n*/","/*\n  Copyright (c) Lightstreamer Srl\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\nimport Helpers from \"../src-tool/Helpers\";\n\nexport default /*@__PURE__*/(function() {\n  //used as default is*Enabled spares arguments handling\n  var emptyFun = function() {\n    return false;\n  };\n  \n  //implements Logger :)\n  var placeholder = {\n      \"error\":emptyFun,\n      \"warn\":emptyFun,\n      \"info\":emptyFun,\n      \"debug\":emptyFun,\n      \"fatal\":emptyFun,\n      \"isDebugEnabled\":emptyFun,\n      \"isInfoEnabled\":emptyFun,\n      \"isWarnEnabled\":emptyFun,\n      \"isErrorEnabled\":emptyFun,\n      \"isFatalEnabled\":emptyFun\n  };\n  \n  \n  /**\n   * This constructor is used internally by {@link module:LoggerManager} and should not\n   * be called manually. Use {@link module:LoggerManager.getLoggerProxy} to obtain a \n   * LoggerProxy instance.\n   * @constructor\n   * \n   * @exports LoggerProxy\n   * \n   * @class Offers a simple proxy to {@link Logger} instances. The proxied instance can be\n   * switched at any time with a different one.\n   * <br>Other than the proxied methods it offers some utility methods that will join\n   * together all of the specified parameters in a single string before passing it to\n   * the proxied instance. \n   */\n  var LoggerProxy = function(toWrap) {//called simply Log on the original .NET implementation\n    this.setWrappedInstance(toWrap);\n  };\n\n  LoggerProxy.prototype = {\n       \n      /**\n       * Called by LoggerManager to redirect the log to a different Logger\n       * @param {Logger} [toWrap]\n       */\n      setWrappedInstance: function(toWrap) {\n        this.wrappedLogger = toWrap || placeholder;\n      },\n      \n      //fatal\n      \n      /**\n       * Joins all the specified parameters and calls {@link Logger#fatal} on\n       * the proxied instance.\n       * @param {...*} mex The string or object to be logged. \n       */\n      logFatal: function(mex) {\n        if (!this.isFatalLogEnabled()) {\n          return;\n        }\n        mex += this.logArguments(arguments,1);\n        this.fatal(mex);\n      },\n\n      /**\n       * Proxies the call to the underling {@link Logger}\n       * \n       * @param {String} message The message to be logged.  \n       * @param {Error} [exception] An Exception instance related to the current log message.\n       */\n      fatal: function(mex,exc) {\n        this.wrappedLogger.fatal(mex,exc);\n      },\n      \n      /**\n       * Proxies the call to the underling {@link Logger}\n       */\n      isFatalLogEnabled: function() {\n        return !this.wrappedLogger.isFatalEnabled || this.wrappedLogger.isFatalEnabled();\n      },\n      \n      //error\n     \n      /**\n       * Joins all the specified parameters and calls {@link Logger#error} on\n       * the proxied instance.\n       * @param {...*} mex The string or object to be logged. \n       */\n      logError: function(mex)  {\n        if (!this.isErrorLogEnabled()) {\n          return;\n        }\n        mex += this.logArguments(arguments,1);\n        this.error(mex);\n      },\n      \n      /**\n       * Joins all the specified parameters and calls {@link Logger#error} on\n       * the proxied instance.\n       * @param {...*} mex The string or object to be logged. \n       */\n      logErrorExc: function(exc,mex) {\n        if (!this.isErrorLogEnabled()) {\n          return;\n        }\n        mex += this.logArguments(arguments,2);\n        this.error(mex,exc);\n      },\n      \n      /**\n       * Proxies the call to the underling {@link Logger}\n       * \n       * @param {String} message The message to be logged.  \n       * @param {Error} [exception] An Exception instance related to the current log message.\n       */\n      error: function(mex,exc) {\n        this.wrappedLogger.error(mex,exc);\n      },\n      \n      /**\n       * Proxies the call to the underling {@link Logger}\n       */\n      isErrorLogEnabled: function() {\n        return !this.wrappedLogger.isErrorEnabled || this.wrappedLogger.isErrorEnabled();\n      },\n\n      //warn\n      \n      /**\n       * Joins all the specified parameters and calls {@link Logger#warn} on\n       * the proxied instance.\n       * @param {...*} mex The string or object to be logged. \n       */\n      logWarn: function(mex) {\n        if (!this.isWarnLogEnabled()) {\n          return;\n        }\n        mex += this.logArguments(arguments,1);\n        this.warn(mex);\n      },\n      \n      /**\n       * Proxies the call to the underling {@link Logger}\n       * \n       * @param {String} message The message to be logged.  \n       * @param {Error} [exception] An Exception instance related to the current log message.\n       */\n      warn: function(mex,exc) {\n        this.wrappedLogger.warn(mex,exc);\n      },\n      \n      /**\n       * Proxies the call to the underling {@link Logger}\n       */\n      isWarnLogEnabled: function() {\n        return !this.wrappedLogger.isWarnEnabled || this.wrappedLogger.isWarnEnabled();\n      },\n      \n      //info\n\n      /**\n       * Joins all the specified parameters and calls {@link Logger#info} on\n       * the proxied instance.\n       * @param {...*} mex The string or object to be logged. \n       */\n      logInfo: function(mex) {\n        if (!this.isInfoLogEnabled()) {\n          return;\n        }\n        mex += this.logArguments(arguments,1);\n        this.info(mex);\n      },\n      \n      /**\n       * Proxies the call to the underling {@link Logger}\n       * \n       * @param {String} message The message to be logged.  \n       * @param {Error} [exception] An Exception instance related to the current log message.\n       */\n      info: function(mex,exc) {\n        this.wrappedLogger.info(mex,exc);\n      },\n      \n      /**\n       * Proxies the call to the underling {@link Logger}\n       */\n      isInfoLogEnabled: function() {\n        return !this.wrappedLogger.isInfoEnabled || this.wrappedLogger.isInfoEnabled();\n      },\n\n\n      //debug\n\n      /**\n       * Joins all the specified parameters and calls {@link Logger#debug} on\n       * the proxied instance.\n       * @param {...*} mex The string or object to be logged. \n       */\n      logDebug: function(mex) {\n        if (!this.isDebugLogEnabled()) {\n          return;\n        }\n        mex += this.logArguments(arguments,1);\n        this.debug(mex);\n      },\n      \n      /**\n       * Proxies the call to the underling {@link Logger}\n       * \n       * @param {String} message The message to be logged.  \n       * @param {Error} [exception] An Exception instance related to the current log message.\n       */\n      debug: function(mex,exc) {\n        this.wrappedLogger.debug(mex,exc);\n      },\n      \n      /**\n       * Proxies the call to the underling {@link Logger}\n       */\n      isDebugLogEnabled: function() {\n        return !this.wrappedLogger.isDebugEnabled || this.wrappedLogger.isDebugEnabled();\n      },\n      \n      /**\n       * @private\n       */\n      logArguments: function(args, _start){ //Joins together all of the elements of an arguments array in a custom string\n        _start = _start ? _start : 0;\n        var _line = \" {\";\n        for (var i = _start; i < args.length; i++) {\n          try {\n            var element = args[i];\n            \n            if (element === null) {\n              _line += \"NULL\";\n              \n            } else if (element.length < 0) {\n              _line += \"*\";\n              \n            } else if (element.charAt != null) {\n              _line += element;\n              \n            } else if (element.message) {\n              _line += element.message;\n              if (element.stack) {\n                _line += \"\\n\"+element.stack+\"\\n\";\n              }\n              \n            } else if (element[0] == element) {\n              // seen on Firefox?\n              _line += element;\n            } else if (Helpers.isArray(element)) {\n              _line += \"(\";\n              _line += this.logArguments(element);\n              _line += \")\";\n            } else {\n              _line += element;\n            }\n            _line += \" \";\n            \n          } catch (_e) {\n            _line += \"??? \";\n          }\n        }\n        return _line + \"}\";\n      }\n      \n      \n  };\n  \n  //closure exports\n  LoggerProxy.prototype[\"debug\"] = LoggerProxy.prototype.debug;\n  LoggerProxy.prototype[\"isDebugLogEnabled\"] = LoggerProxy.prototype.isDebugLogEnabled;\n  LoggerProxy.prototype[\"logDebug\"] = LoggerProxy.prototype.logDebug;\n  \n  LoggerProxy.prototype[\"info\"] = LoggerProxy.prototype.info;\n  LoggerProxy.prototype[\"isInfoLogEnabled\"] = LoggerProxy.prototype.isInfoLogEnabled;\n  LoggerProxy.prototype[\"logInfo\"] = LoggerProxy.prototype.logInfo;\n  \n  LoggerProxy.prototype[\"warn\"] = LoggerProxy.prototype.warn;\n  LoggerProxy.prototype[\"isWarnEnabled\"] = LoggerProxy.prototype.isWarnEnabled;\n  LoggerProxy.prototype[\"logWarn\"] = LoggerProxy.prototype.logWarn;\n  \n  LoggerProxy.prototype[\"error\"] = LoggerProxy.prototype.error;\n  LoggerProxy.prototype[\"isErrorEnabled\"] = LoggerProxy.prototype.isErrorEnabled;\n  LoggerProxy.prototype[\"logError\"] = LoggerProxy.prototype.logError;\n  LoggerProxy.prototype[\"logErrorExc\"] = LoggerProxy.prototype.logErrorExc;\n  \n  LoggerProxy.prototype[\"fatal\"] = LoggerProxy.prototype.fatal;\n  LoggerProxy.prototype[\"isFatalEnabled\"] = LoggerProxy.prototype.isFatalEnabled;\n  LoggerProxy.prototype[\"logFatal\"] = LoggerProxy.prototype.logFatal;\n\n  return LoggerProxy;\n})();\n  \n","/*\n  Copyright (c) Lightstreamer Srl\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nexport default /*@__PURE__*/(function() {\n  /**\n   * Constructs an IllegalArgumentException with the specified detail message.\n   * @constructor\n   *\n   * @param {String} message short description of the error.\n   *\n   * @exports IllegalArgumentException\n   * @class Thrown to indicate that a method has been passed an illegal \n   * or inappropriate argument.\n   * <BR>Use toString to extract details on the error occurred.\n   */\n  var IllegalArgumentException  = function(message) {\n    \n    /**\n     * Name of the error, contains the \"IllegalArgumentException\" String.\n     * \n     * @type String\n     */\n    this.name = \"IllegalArgumentException\";\n\n    /**\n     * Human-readable description of the error.\n     * \n     * @type String\n     */\n    this.message = message;\n   \n  };\n  \n  IllegalArgumentException.prototype = {\n\n      toString: function() {\n        return [\"[\",this.name,this.message,\"]\"].join(\"|\");\n      }\n      \n  };\n  \n  return IllegalArgumentException;\n})();\n  \n","/*\n  Copyright (c) Lightstreamer Srl\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\nimport LoggerProxy from \"./LoggerProxy\";\nimport IllegalArgumentException from \"../src-tool/IllegalArgumentException\";\n\nexport default /*@__PURE__*/(function() {\n  var logInstances = {};\n  var currentLoggerProvider = null;\n  var NOT_LOGGER_PROVIDER = \"The given object is not a LoggerProvider\";\n  \n  /**\n   * This singleton should be used to obtain {@link Logger} instances to\n   * be used to produce the log.\n   * @exports LoggerManager\n   * \n   * @example\n   * define([\"LoggerManager\"],function(LoggerManager) {\n   *  \n   *  //stuff\n   *  var logger = LoggerManager.getLoggerProxy(\"myCategory\");\n   *  \n   *  var MyClass = function() {\n   *    //more stuff\n   *    logger.info(\"my info log\");\n   *    //stuff\n   *    logger.error(\"my error log\");\n   *  };\n   *  \n   *  return MyClass;\n   *  \n   * });\n   * \n   * //elsewhere\n   * require([\"MyClass\",\"LoggerManager\",\"MyLoggerProvider\"],\n   *  function(MyClass,LoggerManager,MyLoggerProvider) {\n   *  \n   *  LoggerManager.setLoggerProvider(new MyLoggerProvider());\n   *  var m = new MyClass(); //m will send log to the MyLoggerProvider instance\n   *  \n   * });\n   * \n   * \n   */\n  var LoggerManager = {\n      \n    /**\n     * Sets the provider that will be used to get the Logger instances; it can\n     * be set and changed at any time. All the new log will be sent to the \n     * {@link Logger} instances obtained from the latest LoggerProvider set.\n     * Log produced before any provider is set is discarded. \n     * \n     * @param {LoggerProvider} [newLoggerProvider] the provider to be used; if\n     * missing or null all the log will be discarded until a new provider is provided.\n     */  \n    setLoggerProvider: function(newLoggerProvider) {\n      if (newLoggerProvider && !newLoggerProvider.getLogger) {\n        //null is a valid value\n        throw new IllegalArgumentException(NOT_LOGGER_PROVIDER);\n      }\n      \n      currentLoggerProvider = newLoggerProvider;\n      \n      //updates the alive proxies\n      for (var cat in logInstances) {\n        if (!currentLoggerProvider) {\n          logInstances[cat].setWrappedInstance(null);\n        } else {\n          logInstances[cat].setWrappedInstance(currentLoggerProvider.getLogger(cat));\n        }\n      }\n      \n    },\n  \n    /**\n     * Gets a LoggerProxy to be used to produce the log bound to a defined category.\n     * One single LoggerProxy instance will be created per each category: if the method\n     * is called twice for the same category then the same instance will be returned.\n     * On the other hand this method can potentially cause a memory leak as once a Logger \n     * is created it will never be dismissed. It is expected that the number of \n     * categories within a single application is somewhat limited and in any case\n     * not growing with time.\n     * \n     * @param {String} cat The category the Logger will be bound to.\n     * @returns {LoggerProxy} the instance to be used to produce the log\n     * for a certain category.\n     */\n    getLoggerProxy: function(cat) {\n      if (!logInstances[cat]) {\n        if (!currentLoggerProvider) {\n          logInstances[cat] = new LoggerProxy();\n        } else {\n          logInstances[cat] = new LoggerProxy(currentLoggerProvider.getLogger(cat));\n        }\n         \n      }\n      return logInstances[cat];\n    },\n    \n    /**\n     * @private \n     */\n    resolve: function(id){ //if LogMessages is included this method will be replaced\n      return id;\n    }\n  };\n  \n  LoggerManager[\"setLoggerProvider\"] = LoggerManager.setLoggerProvider;\n  LoggerManager[\"getLoggerProxy\"] = LoggerManager.getLoggerProxy;\n  LoggerManager[\"resolve\"] = LoggerManager.resolve;\n  \n  return LoggerManager;\n})();\n  ","import Environment from \"../src-tool/Environment\";\nimport Constants from \"./Constants\";\nimport Helpers from \"../src-tool/Helpers\";\n\nexport default /*@__PURE__*/(function() {\n  var removeDot = new RegExp(\"\\\\.\",\"g\");\n  var removeMinus = new RegExp(\"-\",\"g\");\n\n  var ignoredChars = {\n      \".\":true,\n      \" \":true,\n      \"0\":true\n  };\n  \n  var requestIdCounter = 1;\n  var subscriptionIdCounter = 1;\n\n  var Utils = {\n\n    isOffline: function() {\n      return Environment.isBrowser() ? navigator.onLine === false : false;\n    },\n\n    canUseLocalStorage: function() {\n      try {\n\t\tif (typeof localStorage != \"undefined\" && localStorage !== null && localStorage.getItem && localStorage.setItem) {\n\t\t  var x = '__canUseLocalStorage_test__',\n\t\t      y = 'true';\n\n\t\t  localStorage.setItem(x, y);\n\t\t  localStorage.removeItem(x);\n\n\t\t  return true;\n\t\t} else {\n\t\t  return false;\n\t\t}\n      } catch(_e) {\n        return false;\n      }\n    },\n\n    getDomain: function() {\n      try {\n        return document.domain;\n      } catch(e) {\n        //wp8 webview (eg phonegapp apps) will throw an exception if try to read\n        //document.domain. Yes I had the same look on my face when I discovered this\n        return \"\";\n      }\n    },\n\n    hasDefaultDomain: function() {\n      if (!Environment.isBrowserDocument()) {\n        return true;\n      }\n      try {\n        var fixHost = document.location.host;\n        if (fixHost.indexOf(\"[\") > -1) {\n          //if host is an IPv6 it's impossible that the domain has been changed\n          return true;\n        }\n\n        return  Utils.getDomain() == document.location.hostname;\n      } catch(_e) {\n        //guess who's got an exception while reading location.host? IE of course\n        return false;\n      }\n    },\n\n\n    /**\n     * necessario per IE7 altrimenti (faccio un esempio che mi vien + semplice):\n     * Copio numero da finestra A a finestra B\n     * B � un numero\n     * Chiudo A\n     * B magicamente diventa un oggetto.\n     * L'errore riportato da IE7 �:\n     * \"Il chiamato (server [applicazione non server]) non � disponibile ed � scomparso.\n     * Tutte le connessioni non sono valide. La chiamata non � stata effettuata.\"\n     * [l'errore su IE7 sembra non presentarsi pi�]\n     */\n    copyByValue: function(_value) {\n\n      if (typeof _value != \"undefined\") {\n        if (_value === true || _value === false) {\n          //booleano\n          return _value === true;\n\n        } else if (_value == null) {\n          return null;\n\n        } else if (typeof _value == \"number\" || _value instanceof Number) {\n            return Number(_value);\n\n        } else if (Helpers.isArray(_value)) {\n          var arr = [];\n          for (var i = 0; i<_value.length; i++) {\n            arr[i] = this.copyByValue(_value[i]);\n          }\n          return arr;\n\n        } else if (typeof _value == \"string\" || _value instanceof String) {\n          return String(_value);\n\n        } else if (_value.length === -1) {\n          return Constants.UNCHANGED;\n\n        } else if (isNaN(_value) && typeof _value == \"number\") {\n          return NaN;\n\n        } else {\n          //it's not undefined, it's not null, it's not a number, it's not a string\n          //it has not the toString method:\n          //it should be a JSON object\n\n          var obj = {};\n          for (var i in _value) {\n            obj[this.copyByValue(i)] = this.copyByValue(_value[i]);\n          }\n          return obj;\n\n        }\n      }\n      return null;\n\n    },\n\n    extendObj: function(core,extension) {\n      core = core || {};\n      if (extension) {\n        for (var p in extension) {\n          core[p] = extension[p];\n        }\n      }\n      return core;\n    },\n\n    sanitizeIFrameName: function(_name) {\n      // ie does not want that there are points in the name of a frame and -\n      // should be the only special characters present in a\n      // domain so I don't have to replace anything else\n      return _name.replace(removeDot,\"_\").replace(removeMinus,\"__\");\n    },\n\n    getReverse: function(map) {\n      var res = {};\n\n      for (var i in map) {\n        res[map[i]] = i;\n      }\n\n      return res;\n    },\n\n    argumentsToArray: function(params) {\n      if (params && !params.pop) {\n        //this is an Arguments, not an array\n        var tmp = [];\n        for (var i=0; i<params.length; i++) {\n          tmp.push(params[i]);\n        }\n        return tmp;\n      }\n      return params;\n    },\n\n    /**\n     * Parses the value of a set-cookie header containing multiple cookie definitions separated by commas.\n     * Notwithstanding RFC 6265 forbids cookie folding, some libraries (e.g. faye-websocket)\n     * returns multiple set-cookie headers as a comma-separated string.\n     *\n     * @param {String} cookieStr comma-separated cookie definitions (e.g. 'cookie1=val1; attr1, cookie2=val2')\n     * @return {String[]} an array of cookie definitions (e.g. ['cookie1=val1; attr1', 'cookie2=val2'])\n     */\n    parseSetCookieHeader: function(cookieDefs) {\n        /*\n         * Set-cookie syntax:\n         *\n         * <HEADER> ::= <COOKIE>* (separated by commas)\n         * <COOKIE> ::= <NAME-VALUE>';'<ATTRIBUTE-SEQ>\n         * <NAME-VALUE> ::= <CHAR>* (not containing commas or semicolons)\n         * <ATTRIBUTE-SEQ> ::= <ATTRIBUTE>* (separated by semicolons)\n         * <ATTRIBUTE> ::= <CHAR>* (not containing commas or semicolons)\n         */\n\n        if (! cookieDefs) {\n            return [];\n        }\n        // string iterator (returns empty string when reaches the end)\n        var it = {\n                i: 0,\n                next: function() {\n                    return cookieDefs.charAt(this.i++);\n                }\n        };\n        var expiresAttribute = /^\\s*Expires/i;\n        var cookies = [];\n        var ch = it.next();\n        /* <HEADER> */\n        while (ch) {\n            var cookie = '';\n            /* <COOKIE> */\n            var nameValue = '';\n            /* <NAME-VALUE> */\n            while (ch && ch != ';' && ch != ',') {\n                nameValue += ch;\n                ch = it.next();\n            } /* end <NAME-VALUE> */\n            nameValue = nameValue.trim();\n            cookie += nameValue;\n            if (ch == ';') {\n                cookie += '; ';\n                ch = it.next(); // consume semicolon\n            }\n            /* <ATTRIBUTE-SEQ> */\n            while (ch && ch != ',') {\n                var attribute = '';\n                /* <ATTRIBUTE> */\n                while (ch && ch != ';' && ch != ',') {\n                    attribute += ch;\n                    ch = it.next();\n                } /* end <ATTRIBUTE> */\n\n                // NB Expires attribute (e.g. Expires=Wed, 21 Oct 2015 07:28:00 GMT) needs a special processing\n                // because it contains an internal comma, which must not be mistaken for a cookie separator\n                if (attribute.match(expiresAttribute)) {\n                    console.assert(ch == ',');\n                    attribute += ch;\n                    ch = it.next(); // consume internal comma\n                    while (ch && ch != ';' && ch != ',') {\n                        attribute += ch;\n                        ch = it.next();\n                    }\n                }\n\n                attribute = attribute.trim();\n                cookie += attribute;\n                if (ch == ';') {\n                    cookie += '; ';\n                    ch = it.next(); // consume semicolon\n                }\n            } /* end <ATTRIBUTE-SEQ> */\n            /* end <COOKIE> */\n            cookies.push(cookie);\n            ch = it.next(); // consume comma\n        } /* end <HEADER> */\n        return cookies;\n    },\n    \n    /**\n     * LS_reqId generator.\n     */\n    nextRequestId: function() {\n        return requestIdCounter++;\n    },\n    \n    /**\n     * LS_subId generator.\n     */\n    nextSubscriptionId: function() {\n        return subscriptionIdCounter++;\n    },\n    \n    /**\n     * Returns a custom promise with two additional methods resolve and reject.\n     */\n    defer: function() {\n        var res, rej;\n        var p = new Promise(function(resolve, reject) {\n            res = resolve;\n            rej = reject;\n        });\n        p.resolve = res;\n        p.reject = rej;\n        return p;\n    }\n\n  };\n\n  return Utils;\n})();\n\n","/*\n  Copyright (c) Lightstreamer Srl\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\nimport IllegalStateException from \"./IllegalStateException\";\n\nexport default /*@__PURE__*/(function() {\n  /**\n   * @method\n   * \n   * @param {Object} o\n   * @param {Function} tc\n   * @param {Object[]} params\n   * \n   * @private\n   */\n  function doCall(o,tc,params) {\n    if (tc) {\n      if (params) {\n        return tc.apply(o,params);\n      } else {\n        return tc.apply(o);\n      }\n    }\n  }\n  \n  \n  /**\n   * @private\n   */\n  function searchAlias(proto,extendedName) {\n    for (var i in proto) {\n      if (proto[extendedName] == proto[i] && extendedName != i) {\n        return i;\n      }\n    }\n    return null;\n  }\n  \n  /**\n   * This module introduce a \"classic\" inheritance mechanism as well as an helper to\n   * copy methods from one class to another. See the Inheritance method documentation below for details.\n   * @exports Inheritance\n   */\n  var Inheritance = {\n      \n    /**\n     * This method extends a class with the methods of another class preserving super\n     * methods and super constructor. This method should be called on a class only\n     * after its prototype is already filled, otherwise\n     * super methods may not work as expected.<br/>\n     * The <i>_super_</i>, <i>_callSuperMethod</i> and <i>_callSuperConstructor</i> names are reserved: extending and\n     * extended classes' prototypes must not define properties with such names.<br/>\n     * Once extended it is possible to call the super constructor calling the _callSuperConstructor\n     * method and the super methods calling the _callSuperMethod method\n     * <br/>Note that this function is the module itself (see the example)\n     * \n     * @throws {IllegalStateException} if checkAliases is true and an alias of the super class\n     * collides with a different method on the subclass.\n     *\n     * @param {Function} subClass the class that will extend the superClass\n     * @param {Function} superClass the class to be extended\n     * @param {boolean} [lightExtension] if true constructor and colliding methods of the\n     * super class are not ported on the subclass hence only non-colliding methods will be copied\n     * on the subclass (this kind of extension is also known as mixin)\n     * @param {boolean} [checkAliases] if true aliases of colliding methods will be searched on the\n     * super class prototype and, if found, the same alias will be created on the subclass. This is \n     * especially useful when extending a class that was minified using the Google Closure Compiler.\n     * Note however that collisions can still occur, between a property and a method and between methods\n     * when the subclass is minified too. The only way to prevent collisions is to minify super and sub \n     * classes together.\n     * @function Inheritance\n     * @static\n     * \n     * @example\n     * require([\"Inheritance\"],function(Inheritance) {\n     *   function Class1() {\n     *   }\n     *\n     *   Class1.prototype = {\n     *     method1: function(a) {\n     *       return a+1;\n     *     }\n     *   };\n     * \n     *   function Class2() {\n     *     this._callSuperConstructor(Class2);\n     *   }\n     *\n     *   Class2.prototype = {\n     *     method1: function(a,b) {\n     *       return this._callSuperMethod(Class2,\"method1\",[a])+b;\n     *     }\n     *   };\n     *\n     *   Inheritance(Class2,Class1);\n     *   \n     *   var class2Instance = new Class2();\n     *   class2Instance.method1(1,2); //returns 4\n     *   \n     * });\n     */\n    Inheritance: function(subClass, superClass, lightExtension, checkAliases){\n      //iterate all of superClass's methods\n      for (var i in superClass.prototype) {\n        if (!subClass.prototype[i]) {\n          //copy non-colliding methods directly\n          subClass.prototype[i] = superClass.prototype[i];\n        } else if(checkAliases) {\n          //in case of collision search in the super prototype if the method has an alias\n          //and create the alias here too\n          var name = searchAlias(superClass.prototype,i);\n          if (name) {\n            //we want to copy  superClass.method to superClass.prototype[i], but subClass.prototype[i] already exists \n            //name is an alias of i --> superClass.prototype[name] == superClass.prototype[i]\n            //if subClass has a name method thay is different not an alias of i (subClass.prototype[name] != subClass.prototype[i]) there is a collision problem\n            if (subClass.prototype[name] && subClass.prototype[name] !== subClass.prototype[i]) {\n              //unless the alias name was previously copied from superClass ( superClass.prototype[name] == superClass.prototype[name] )\n              if (superClass.prototype[name] !== superClass.prototype[name]) {\n                throw new IllegalStateException(\"Can't solve alias collision, try to minify the classes again (\" + name + \", \" + i + \")\");\n              }\n            }\n            subClass.prototype[name] = subClass.prototype[i];\n          }\n          \n        }\n      }\n     \n      if (!lightExtension) {\n        //setup the extended class for super calls (square brakets used to support google closure)\n        subClass.prototype[\"_super_\"] = superClass;\n        subClass.prototype[\"_callSuperConstructor\"] = Inheritance._callSuperConstructor;\n        subClass.prototype[\"_callSuperMethod\"] = Inheritance._callSuperMethod;\n      }\n\n      return subClass;\n    },\n    \n    /**\n     * This method is attached to the prototype of each extended class as _callSuperMethod to make it possible to\n     * call super methods. \n     * <br/>Note that it is not actually visible in this module.\n     * \n     * @param {Function} ownerClass the class that calls this method.\n     * @param {String} toCall the name of the super function to be called.\n     * @param {Object[]} [params] array of parameters to be used to call the super method.\n     * @static\n     */\n    _callSuperMethod: function(ownerClass, toCall, params){\n      return doCall(this,ownerClass.prototype[\"_super_\"].prototype[toCall],params);\n    },\n    \n    /**\n     * This method is attached to the\n     * prototype of each extended class as _callSuperConstructor to make it possible\n     * to call the super constructor.\n     * <br/>Note that it is not actually visible in this module.\n     *\n     * @param {Function} ownerClass the class that calls this method.\n     * @param {Object[]} [params] array of parameters to be used to call the super constructor.\n     * @static\n     */\n    _callSuperConstructor: function(ownerClass, params){\n      doCall(this,ownerClass.prototype[\"_super_\"], params);\n    }\n  \n  \n  };\n  \n  //the way this is handled may look weird, well it is, I had to put\n  //things this way with the only purpose to let JSDoc document the module\n  //as I wanted to (and that didn't even turned out perfectly)\n  return Inheritance.Inheritance;\n})();\n\n","/*\n  Copyright (c) Lightstreamer Srl\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\nimport IllegalArgumentException from \"./IllegalArgumentException\";\n\nexport default /*@__PURE__*/(function() {\n  //This is an abstract class; it could have been a module with a couple of static methods but I find it handier this way.\n  \n  /**\n   * @private\n   * @constant\n   * @static\n   */\n  var VALUE_NOT_VALID = \"The given value is not valid. \";\n  /**\n   * @private\n   * @constant\n   * @static\n   */\n  var USE_NUMBER = \"Use a number\";\n  /**\n   * @private\n   * @constant\n   * @static\n   */\n  var USE_INTEGER = \"Use an integer\";\n  /**\n   * @private\n   * @constant\n   * @static\n   */\n  var USE_POSITIVE = \"Use a positive number\";\n  /**\n   * @private\n   * @constant\n   * @static\n   */\n  var OR_ZERO = \" or 0\";\n  /**\n   * @private\n   * @constant\n   * @static\n   */\n  var USE_TRUE_OR_FALSE = \"Use true or false\";\n  \n  /**\n   * Fake constructor. This abstract class is supposed to be extended using {@link module:Inheritance}\n   * light extension.\n   * @constructor\n   *\n   * @exports Setter\n   * @abstract\n   * @class Abstract class to be  extended to gain input validation for a class' setter methods.\n   * \n   * @example\n   * define([\"Inheritance\",\"Setter\"],function(Inheritance,Setter) {\n   *   \n   *   var MyClass = function() {\n   *     this.exampleProperty = 1;\n   *     //do stuff\n   *   }\n   *   \n   *   MyClass.prototype = {\n   *     setExampleProperty: function(newVal) {\n   *       this.exampleProperty = this.checkPositiveNumber(newVal,false,false);\n   *     },\n   *   \n   *     //declare more stuff\n   *   };\n   *   \n   *   Inheritance(MyClass,Setter,true);\n   *   return MyClass;\n   * });\n   * \n   */\n  var Setter = function() {\n    \n  };\n\n  /**\n   * Checks the given value to be a valid number. The input value is first explicitly converted into \n   * a Number (e.g. null would become 0) then is checked to be a valid number and finally it is verified\n   * against the input configurations.    \n   * \n   * @throws {IllegalArgumentException} if the input value is not a number or does not respect one of the given constraint.\n   * \n   * @param newVal {Number|String|Object} the value to be verified.\n   * @param canBeZero {Boolean} specifies if the given value can be 0 or not.\n   * @param canBeDecimal {Boolean} specifies if the given value can be a decimal number or not.\n   * @returns {Number} The explicitly converted Number is returned. \n   * \n   * @protected\n   * @memberof Setter.prototype\n   */\n  function checkPositiveNumber(newVal,canBeZero,canBeDecimal) {\n    var tmp = new Number(newVal);\n    \n    if (isNaN(tmp)) {\n      throw new IllegalArgumentException(VALUE_NOT_VALID+USE_NUMBER);\n    } \n\n    if(!canBeDecimal && tmp != Math.round(tmp)) {\n      throw new IllegalArgumentException(VALUE_NOT_VALID+USE_INTEGER);  \n      \n    } \n      \n    if (canBeZero) {\n      if (newVal < 0) {\n        throw new IllegalArgumentException(VALUE_NOT_VALID+USE_POSITIVE+OR_ZERO);\n      }\n    } else if(newVal <= 0) {\n      throw new IllegalArgumentException(VALUE_NOT_VALID+USE_POSITIVE);\n    } \n    return tmp;\n    \n  }\n  \n  /**\n   * Checks the given value to be a boolean. The check is performed with the strict equal operactor (i.e.: ===)<br/>\n   * If specified, empty strings, nulls, NaN, 0s, negative numbers \n   * and undefineds are also admitted values and are interpreted as false.\n   *  \n   * @param newVal the value to be verified.\n   * @param notStrictFalse if true anything that would not-strictly equal (==) false is considered as\n   * a valid false. \n   * @returns {Boolean} \n   * \n   * @throws {IllegalArgumentException} if the input value is not a valid boolean.  \n   * \n   * @protected\n   * @memberof Setter.prototype\n   */\n  function checkBool(newVal,notStrictFalse) {\n    if (newVal === true || newVal === false || (notStrictFalse && !newVal)) {\n      return newVal === true;\n    }\n    \n    throw new IllegalArgumentException(VALUE_NOT_VALID+USE_TRUE_OR_FALSE);\n  }\n  \n  \n  Setter.prototype.checkPositiveNumber = checkPositiveNumber;\n  Setter.prototype.checkBool = checkBool;\n  Setter.prototype[\"checkPositiveNumber\"] = checkPositiveNumber;\n  Setter.prototype[\"checkBool\"] = checkBool;\n  \n  \n  return Setter;\n})();\n\n\n\n\n\n","/*\n  Copyright (c) Lightstreamer Srl\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\nimport LoggerManager from \"../src-log/LoggerManager\";\n\nexport default /*@__PURE__*/(function() {\n  var logger = LoggerManager.getLoggerProxy(\"weswit.test\");\n  \n  var failures = 0;\n  \n  var VOID = {};\n  \n  /**\n   * you can use method of ASSERT to verify conditions\n   * If a conditions is not met ASSERT.failures is increased\n   * and an error log line is printed on the ASSERT category\n   * @exports ASSERT\n   */\n  var ASSERT = {\n    /**\n     * The VOID property to be used in various calls\n     */\n    \"VOID\": VOID,\n    \n    /**\n     * Gets the number of failures. A failure is added\n     * each time any of the other methods return false.\n     * @returns {Number}\n     */\n    getFailures: function() {\n      return failures;\n    },\n    \n    /**\n     * Checks that two arrays contain the same elements\n     * the sameOrder flag can be used to specify if the\n     * elements must be in the same order in both arrays.\n     * \n     * @param {Array} arr1 the first array to be compared\n     * @param {Array} expected the second array to be compared\n     * @param {Boolean} sameOrder true if the elements in the \n     * arrays must be placed in the same order, false otherwise.\n     * In the latter case duplicated entries will be considered\n     * as one.\n     * \n     * @return true if the test pass, false otherwise.\n     */\n    compareArrays: function(arr1,expected,sameOrder) {\n      if (arr1.length != expected.length) {\n        this.failInternal();\n        logger.logError(\"Wong length!\",arr1,expected);\n        return false;\n      }\n      \n      if (!sameOrder) {\n        var genMap = {};\n        for (var i=0; i<arr1.length; i++) {\n          genMap[arr1[i]] = 1;\n        }\n        \n        for (var i=0; i<expected.length; i++) {\n          if (!genMap[expected[i]]) {\n            logger.logError(\"Missing from first array\",expected[i]);\n            this.failInternal();\n            return false;\n          } else {\n            genMap[expected[i]]++;\n          }\n        }\n        \n        for (var i in genMap) {\n          if (genMap[i] == 1) {\n            logger.logError(\"Missing from second array\",genMap[i]);\n            this.failInternal();\n            return false;\n          }\n        }\n        \n      } else {\n        for (var i=0; i<arr1.length; i++) {\n          if(arr1[i] != expected[i]) {\n            logger.logError(\"Wrong  element\", arr1[i], expected[i]);\n            this.failInternal();\n            return false;\n          }\n        }\n      }\n      \n      return true;\n    },\n    \n    /**\n     * Calls the function method (passed as a string) of the\n     * obj instance using param (that is an array of parameters) \n     * as parameters and verifies that the result is equal to res.\n     * Specify ASSERT.VOID as param to not pass any input parameter.\n     * Specify ASSERT.VOID as res to avoid checks on the return value.\n     * Pass a function as compareFun if the check between res and \n     * the return value can't be done with a simple comparison (==) \n     * and must be done by such compareFun method, specify true as\n     * compareFun if the check must be performed using the strict \n     * equal operator (===). The tested function is expected to not\n     * throw any exception.\n     * \n     * @param {Object} obj the object upon which the function method will \n     * be called\n     * @param {String} method the name of the function to be called\n     * @param {Array} param an array of parameters to be passed to the\n     * function call or ASSERT.VOID if no parameters have to be passed.\n     * @param {*} res the expected value or ASSERT.VOID if no value is\n     * expected.\n     * @param {Boolean|Function} [compareFun] if not specified the return \n     * value will be compared with the res parameter using the equal \n     * operator (==). If true is specified the strict equal operator \n     * (===) is used. If a function is passed the return value will \n     * be compared by such function with the res parameter.\n     * \n     * @returns true if the function executes without exception \n     * and returns with the expected value, false otherwise.\n     */\n    verifySuccess: function(obj,method,param,res,compareFun) {\n      return this.verify(obj,method,param,res,false,compareFun);\n    },\n    \n    /**\n     * Calls the function method (passed as a string) of the\n     * obj instance using param (that is an array of parameters) \n     * as parameters and verifies that the method exits with an\n     * exception.\n     * Specify ASSERT.VOID as param to not pass any input parameter.\n     * \n     * @param {Object} obj the object upon which the function method will \n     * be called\n     * @param {String} method the name of the function to be called\n     * @param {Array} param an array of parameters to be passed to the\n     * function call or ASSERT.VOID if no parameters have to be passed.\n     * \n     * @returns true if the function throws an exception, false otherwise.\n     */\n    verifyException: function (obj,method,param) {\n      return this.verify(obj,method,param,null,true);\n    },\n    \n    /**\n     * Verifies that the given value is not null (strict check)\n     * @param {*} val1 the value to be checked.\n     * @returns {Boolean}\n     */\n    verifyNotNull: function(val1) {\n      if (val1 === null) {\n        this.failInternal();\n        logger.logError(\"Not expecting a NULL\",val1);\n        return false;\n      }\n      return true;\n    },\n    \n    /**\n     * Compares two values.\n     * \n     * @param {*} val1 the first value to be compared.\n     * @param {*} val2 the second value to be compared.\n     * @param {Boolean|Function} [compareFun] if not specified the return \n     * value will be compared with the res parameter using the equal \n     * operator (==). If true is specified the strict equal operator \n     * (===) is used. If a function is passed the return value will \n     * be compared by such function with the res parameter.\n     * \n     * @returns true if the two values are the same, false otherwise.\n     */\n    verifyValue: function(val1,val2,compareFun) {\n      var ok = false;\n      if (compareFun === true) {\n        ok = val1===val2;\n      } else if (compareFun) {\n        ok = compareFun(val1,val2);\n      } else if (!isNaN(val1)) {\n        \n        var c1 = val1 && val1.charAt ? val1.charAt(0) : null;\n        var c2 = val2 && val2.charAt ? val2.charAt(0) : null;\n        \n        if (c1 == \".\" || c1 == \" \" || c1 == \"0\" || c2 == \".\" || c2 == \" \" || c2 == \"0\") {\n          ok = String(val1)==String(val2);\n        } else {\n          ok = val1==val2;\n        }\n        \n        \n      } else {\n        ok = val1==val2;\n      }\n       \n      if (!ok) {\n        this.failInternal();\n        logger.logError(\"Expecting a different value\",val1,val2);\n        return false;\n      }\n      return true;\n    },\n    \n    /**\n     * Compares two values expecting'em to be different.\n     * \n     * @param {*} val1 the first value to be compared.\n     * @param {*} val2 the second value to be compared.\n     * @param {Boolean} [strict] if true a strict comparison\n     * is performed.\n     * \n     * @returns true if the two values are different, false otherwise.\n     */\n    verifyDiffValue: function(val1,val2,strict) {\n      var ok = false;\n      if (strict) {\n        ok = val1 !== val2;\n      } else {\n        ok = val1 != val2;\n      }\n      \n      if (!ok) {\n        this.failInternal();\n        logger.logError(\"Expecting 2 different values\",val1,val2);\n        return false;\n      }\n      return true;\n    },\n    \n    /**\n     * Simple check for a valid value \n     * (0, \"\", NaN etc do not pass this test)\n     * \n     * @param {*} val the value to be checked.\n     * @returns {Boolean} true if a valid value is passed, false otherwise.\n     */\n    verifyOk: function(val) {\n      if (!val) {\n        this.failInternal();\n        logger.logError(\"Expecting a valid value\");\n        return false;\n      }\n      return true;\n    },\n    \n    /**\n     * Simple check for a not valid value \n     * (0, \"\", NaN etc pass this test)\n     * \n     * @param {*} val the value to be checked.\n     * @returns {Boolean} true if a not valid value is passed, false otherwise.\n     */\n    verifyNotOk: function(val) {\n      if (val) {\n        this.failInternal();\n        logger.logError(\"Expecting a not valid value\");\n        return false;\n      }\n      return true;\n    },\n    \n    /**\n     * Fails in any case\n     * @returns {Boolean} false is always returned.\n     */\n    fail: function() {\n      logger.logError(\"ASSERT failed\");\n      this.failInternal();\n      return false;\n    },\n    \n    /**\n     * @private\n     */\n    failInternal: function() {\n      failures++;\n    },\n    \n    /**\n     * @private\n     */\n    verify: function(obj,method,param,res,expectingException,compareFun) {\n      var flag = false;\n      var ret = null;\n      var exc = null;\n      try {\n        if (param !== VOID) {\n          ret = obj[method].apply(obj,param);\n        } else {\n          ret = obj[method]();  \n        }\n        \n      } catch(_e) {\n        flag = true;\n        exc = _e;\n      }\n      \n      var what = expectingException ? \"succes\" : \"failure\";\n      var ok = expectingException == flag;\n      if (!ok) {\n        this.failInternal();\n        logger.logError(\"Unexpected\",what,\"for\",method,param,res,exc);\n        return false;\n      }\n      \n      \n      if (!expectingException && res !== VOID) {\n        return this.verifyValue(ret,res,compareFun);\n      }\n      return true;\n    }\n    \n  };\n  \n  //closure exports\n  ASSERT[\"getFailures\"] = ASSERT.getFailures;\n  ASSERT[\"fail\"] = ASSERT.fail;\n  ASSERT[\"verifyNotOk\"] = ASSERT.verifyNotOk;\n  ASSERT[\"verifyOk\"] = ASSERT.verifyOk;\n  ASSERT[\"verifyDiffValue\"] = ASSERT.verifyDiffValue;\n  ASSERT[\"verifyNotNull\"] = ASSERT.verifyNotNull;\n  ASSERT[\"verifyValue\"] = ASSERT.verifyValue;\n  ASSERT[\"verifyException\"] = ASSERT.verifyException;\n  ASSERT[\"verifySuccess\"] = ASSERT.verifySuccess;\n  ASSERT[\"compareArrays\"] = ASSERT.compareArrays;\n  \n  \n  return ASSERT;\n})();\n  \n","import LoggerManager from \"../../src-log/LoggerManager\";\nimport Utils from \"../Utils\";\nimport Copyright from \"../Copyright\";\nimport Environment from \"../../src-tool/Environment\";\nimport ASSERT from \"../../src-test/ASSERT\";\nimport Constants from \"../Constants\";\n  \n  var protocolLogger = LoggerManager.getLoggerProxy(Constants.PROTOCOL);\n\n  var SBU_PORTION = \"STREAMING_IN_PROGRESS\";\n  var BIND_SESSION = \"bind_session\";\n  var CREATE_SESSION = \"create_session\";\n  \n  var LSVersionParam = \"LS_cid=\" + Constants.LS_CID + \"&\";\n  //                                   NOTE: the final & is not part of the CID\n  \n  var validMachinaName = new RegExp(\"^[a-z][a-z0-9\\-]+$\");\n  var validHost = new RegExp(\"^((?:[a-z][a-z.0-9\\-]+)\\.(?:[a-z][a-z\\-]+))(?![\\\\w.])\");\n  var validIP = new RegExp(\"^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))(?![\\d])\");\n  var validIPv6 = new RegExp(\"^[a-f0-9:]+$\");\n  \n   \n  \n  export default {\n    \n    /**\n     * \n     * @param {String} serverAddress\n     * @return {boolean} true if the address is valid, an error message otherwise (hint, check it with === true)\n     * @private\n     */\n    /*public*/ verifyServerAddress: function(serverAddress) {\n      serverAddress = serverAddress.toLowerCase();\n      var endSch = serverAddress.indexOf(\"http://\") == 0 ? 7 : (serverAddress.indexOf(\"https://\") == 0 ? 8 : -1);\n      if (endSch == -1) {\n        return \"The given server address has not a valid scheme\";\n      }\n      \n      var startPort = serverAddress.lastIndexOf(\":\");\n      startPort = startPort > endSch ? startPort : serverAddress.length;\n      \n      \n      var port = this.extractPort(serverAddress,serverAddress.indexOf(\"://\"));\n      if (port != null && isNaN(port.substring(1))) {\n        return \"The given server address has not a valid port\";\n      }\n      \n      \n      var endHost = serverAddress.indexOf(\"/\",endSch);\n      endHost = endHost < startPort ? endHost : startPort;\n      \n      \n      if (serverAddress.charAt(endSch) == \"[\") {\n        //IPv6\n        \n        var endIp = serverAddress.lastIndexOf(\"]\");\n        var toTest = serverAddress.substring(endSch+1,endIp);\n        \n        if (!validIPv6.test(toTest)) {\n          return \"The given server address is not a valid IPv6\";\n        }\n        \n      } else {\n        \n        var toTest = serverAddress.substring(endSch,endHost) ;\n        \n        \n        if (toTest.indexOf(\".\") > -1) {\n          if (!validHost.test(toTest)) {\n            if (!validIP.test(toTest)) {\n              return \"The given server address is not a valid URL\";\n            }\n          }\n        } else if (!validMachinaName.test(toTest)) {\n          return \"The given server address is not a valid machine name\";\n        }\n      }\n      \n      return true;\n    },\n    \n    /*private*/ readUrl: function(url) {\n        var urlParts = {};\n        var schemaEnd = url.indexOf(\"://\");\n        if (schemaEnd != -1) {\n            urlParts.schema = url.substring(0, schemaEnd);\n            url = url.substring(schemaEnd + 3);\n        } else {\n            urlParts.schema = null;\n        }\n        var pathStart = url.indexOf(\"/\");\n        if (pathStart != -1) {\n            urlParts.path = url.substring(pathStart);\n            url = url.substring(0, pathStart);\n        } else {\n            urlParts.path = null;\n        }\n        var portStart = this.extractPortStart(url);\n        if (portStart != -1) {\n            urlParts.port = url.substring(portStart);\n            urlParts.host = url.substring(0, portStart - 1);\n        } else {\n            urlParts.port = null;\n            urlParts.host = url;\n        }\n        return urlParts;\n    },\n\n    /*private*/ writeUrl: function(urlParts) {\n        var url = urlParts.host;\n        if (urlParts.schema != null) {\n            url = urlParts.schema + \"://\" + url;\n        }\n        if (urlParts.port != null) {\n            url += \":\" + urlParts.port;\n        }\n        if (urlParts.path != null) {\n            url += urlParts.path;\n        }\n        if (url.substring(url.length - 1) != \"/\") {\n            url += \"/\";\n        }\n        return url;\n    },\n\n    /*private*/ extractPortStart: function(address) {\n        var portStarts = address.indexOf(\":\");\n        if (portStarts <= -1) {\n            return -1;\n        }\n        if (address.indexOf(\"]\") > -1) {\n            portStarts = address.indexOf(\"]:\");\n            if (portStarts <= -1) {\n                return -1;\n            }\n            return portStarts + 2;\n        } else if (portStarts != address.lastIndexOf(\":\")) {\n            return -1;\n        } else {\n            return portStarts + 1;\n        }\n    },\n  \n    /*public*/ completeControlLink: function(extractFrom, controlLink) { \n        var baseUrl = this.readUrl(extractFrom);\n        var clUrl = this.readUrl(controlLink);\n        var fullClUrl = {\n            schema: clUrl.schema != null ? clUrl.schema : baseUrl.schema,\n            host: clUrl.host,\n            port: clUrl.port != null ? clUrl.port : baseUrl.port,\n            path: clUrl.path\n        };\n        return this.writeUrl(fullClUrl);\n    },\n    \n    /*public*/ getPushCommand: function(\n            pushPhase, sessionId, policyBean, connectionBean, \n            isCreate, isPolling, oldSession, reconnectionCause, \n            delay, askCL, askDomain,\n            serverBusy) {\n      \n      var domainParam = askDomain && Environment.isBrowserDocument() && !Utils.hasDefaultDomain() ? \"LS_domain=\" + Utils.getDomain() + \"&\" : \"\";\n      \n      var LSContextParams = \"LS_phase=\" + pushPhase + \"&\" + domainParam + (reconnectionCause?\"LS_cause=\"+reconnectionCause+\"&\":\"\");\n    \n      if (isCreate || isPolling) {\n        //polling\n        LSContextParams += \"LS_polling=true&\";\n        \n        var requestedPollingInterval = 0;\n        var requestedIdleTimeout = 0;\n        if (isPolling) {\n           //real polling\n          \n          requestedPollingInterval = Number(policyBean.pollingInterval);\n          // proponiamo il nostro polling interval,\n          // anche se il server potra' costringerci ad un'attesa minore.\n          // Da notare che noi stessi ci riserviamo poi di poter effettuare\n          // un'attesa minore, se ne vale la pena; per esempio sul secondo polling\n          if (delay != null && !isNaN(delay)) {\n            // chiediamo al Server piu' tempo, per compensare la nostra lentezza\n            requestedPollingInterval += delay;\n          }\n          \n          requestedIdleTimeout = policyBean.idleTimeout;\n          \n        }\n        \n        if (!isNaN(requestedPollingInterval)) {\n            LSContextParams += \"LS_polling_millis=\" + requestedPollingInterval + \"&\";\n        }\n        if (!isNaN(requestedIdleTimeout)) {\n          LSContextParams += \"LS_idle_millis=\" + requestedIdleTimeout + \"&\";\n        }\n  \n      } else {\n        if (policyBean.keepaliveInterval > 0) {\n          LSContextParams += \"LS_keepalive_millis=\" + policyBean.keepaliveInterval + \"&\";\n        }\n        \n        if (policyBean.reverseHeartbeatInterval > 0) {\n          LSContextParams += \"LS_inactivity_millis=\" + policyBean.reverseHeartbeatInterval + \"&\";\n        }\n          \n        if (askCL) {\n          LSContextParams += \"LS_content_length=\" + policyBean.contentLength + \"&\";\n        }\n      }\n    \n      if (!isCreate) {   \n        // gestione della richiesta di aggancio a una sessione esistente;\n        // bisogna usare l'indirizzo indicato nella sessione, se esiste\n        \n      //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n        if (!ASSERT.verifyOk(sessionId)) {\n          protocolLogger.logError(\"Unexpectedly missing session id\");\n        }\n      //>>excludeEnd(\"debugExclude\");\n  \n        var LS_SessionString = \"LS_session=\" + sessionId + \"&\";\n        \n        var res = LS_SessionString + LSContextParams;\n        \n        protocolLogger.logDebug(\"Bind request generated\",res);\n        \n        // URL di attivazione Lightstreamer\n        return res;\n  \n      } else {\n        // inizio una nuova sessione.\n\n        //ok I know bandwidth has nothing to do with user params, btw...it's just a variable name :)\n        \n        var LSUserParams = \"\";\n        if (policyBean.requestedMaxBandwidth > 0) { // <=0 means unlimited\n          LSUserParams += \"LS_requested_max_bandwidth=\" + policyBean.requestedMaxBandwidth + \"&\";\n        } \n        \n        if (connectionBean.adapterSet != null) {\n          LSUserParams += \"LS_adapter_set=\" + encodeURIComponent(connectionBean.adapterSet) + \"&\";\n        }\n        if (connectionBean.user != null) {\n          LSUserParams += \"LS_user=\" + encodeURIComponent(connectionBean.user) + \"&\";\n        }\n        \n        var lsUrl = /*\"LS_op2=create&\" +*/ LSContextParams + LSVersionParam + LSUserParams;\n        if (oldSession) {\n          // esiste gia` una sessione aperta; la nuova sessione la sostituira`.\n          // per evitare problemi di diritti sulle risorse, la richiesta viene\n          // corredata dall'indicazione della vecchia sessione da 'rottamare'\n          lsUrl += (\"LS_old_session=\" + oldSession + \"&\");\n        }\n        \n        if (serverBusy) {\n            lsUrl += \"LS_ttl=unlimited&\";\n        }\n        \n        protocolLogger.logDebug(\"Create request generated\",lsUrl);\n        \n        //first log the request, then attach the password...\n        if (connectionBean.password != null) {\n          lsUrl += \"LS_password=\" + encodeURIComponent(connectionBean.password) + \"&\";\n        }\n        \n        return lsUrl;\n      }\n    },\n    \n    /**\n     * A recovery request is a special type of bind_session request with the additional LS_recovery_from parameter.\n     */\n    getRecoveryCommand: function(pushPhase, sessionId, policyBean, reconnectionCause, delay, askDomain, sessionRecoveryProg) {\n        var domainParam = askDomain && Environment.isBrowserDocument() && !Utils.hasDefaultDomain() ? \"LS_domain=\" + Utils.getDomain() + \"&\" : \"\";\n        \n        var LSContextParams = \"LS_phase=\" + pushPhase + \"&\" + domainParam + (reconnectionCause?\"LS_cause=\"+reconnectionCause+\"&\":\"\");\n        \n        LSContextParams += \"LS_polling=true&\";\n        var requestedPollingInterval = 0;\n        if (delay != null && !isNaN(delay)) {\n            requestedPollingInterval += delay;\n        }\n        LSContextParams += \"LS_polling_millis=\" + requestedPollingInterval + \"&\";\n        LSContextParams += \"LS_idle_millis=0&\"\n            \n        if (policyBean.requestedMaxBandwidth > 0) { // <=0 means unlimited\n            LSContextParams += \"LS_requested_max_bandwidth=\" + policyBean.requestedMaxBandwidth + \"&\";\n        }\n        \n        LSContextParams += \"LS_session=\" + sessionId + \"&\";\n        \n        LSContextParams += \"LS_recovery_from=\" + sessionRecoveryProg + \"&\";\n        \n        protocolLogger.logDebug(\"Recovery request generated\", LSContextParams);\n        \n        return LSContextParams;\n    },\n    \n    /*public*/ getDestroyParams: function(sessionId,reason) {\n      var _data = {\n          \"LS_op\": \"destroy\",\n          \"LS_session\": sessionId,\n          \"LS_reqId\": Utils.nextRequestId()\n      };\n      \n      if (reason) {\n        _data[\"LS_cause\"]=reason;\n      }\n      \n      protocolLogger.logDebug(\"Destroy request generated\");\n      \n      return _data;\n    },\n    \n    /*public*/ getForceRebindParams: function(rebindCause,_delay) {\n      var _data = {\n          \"LS_op\": \"force_rebind\",\n          \"LS_reqId\": Utils.nextRequestId()\n      };\n      if (rebindCause) {\n        _data[\"LS_cause\"]=rebindCause;\n      }\n      \n      if(_delay != null && !isNaN(_delay)) {\n        _data[\"LS_polling_millis\"]=_delay;\n      }\n      \n      protocolLogger.logDebug(\"Force rebind request generated\");\n      \n      return _data;\n    },\n    \n    /*public*/ getLogRequestParams: function(pushPhase,msg,buildNum) {\n      msg[\"LS_build\"] = buildNum;\n      msg[\"LS_phase\"] = pushPhase;\n      return msg; \n    },\n    \n    /*public*/ getConstraintParams: function(policyBean) {\n      return {\n        \"LS_op\": \"constrain\",\n        \"LS_requested_max_bandwidth\": (policyBean.requestedMaxBandwidth > 0 ? policyBean.requestedMaxBandwidth : \"unlimited\"),\n        \"LS_reqId\": Utils.nextRequestId()\n      };\n    },\n    \n    /*public*/ getPushPath: function(isCreate,isPolling,suffix) {\n      var res;\n      if (isPolling || (suffix != null && suffix.indexOf(\".txt\") == 0) || suffix == \"\") {\n          if (isCreate) {\n              res = this.getCreateSessionExtraPath() + CREATE_SESSION + suffix;\n          } else {\n              res = BIND_SESSION + suffix;\n          }\n          \n      } else {\n          if (isCreate) {\n              res = this.getCreateSessionExtraPath() + SBU_PORTION;\n          } else {\n              res = SBU_PORTION;\n          }\n      }\n      return res;\n    },\n    \n    /**\n     * The recovery request is a special type of bind_session.\n     */\n    getRecoveryPath: function(suffix) {\n        return BIND_SESSION + suffix;\n    },\n    \n    /*private*/ getCreateSessionExtraPath: function() {\n      return \"\";\n    },\n\n    /*private*/ setCID: function(str) {\n        // available for test clients using the source code\n        LSVersionParam = str;\n    },\n    \n    /*private*/ extractPort: function(extractFrom,protLoc) {\n        var portStarts = extractFrom.indexOf(\":\",protLoc+1);\n        if (portStarts <= -1) {\n          return null;\n        }\n        \n        if (extractFrom.indexOf(\"]\") > -1) {\n          portStarts = extractFrom.indexOf(\"]:\");\n          if (portStarts <= -1) {\n            return null;\n          }\n          portStarts+=1;\n          \n        } else if (portStarts != extractFrom.lastIndexOf(\":\")) {\n          return null;\n        }\n          \n        \n        var portEnds = extractFrom.indexOf(\"/\",protLoc+3);\n        \n        return portEnds > -1 ? extractFrom.substring(portStarts,portEnds) : extractFrom.substring(portStarts);\n         \n      }\n    \n  };\n  \n  \n  ","import Utils from \"../Utils\";\n\n  /**\n   * can be used as mixin, just call initChannel in your constructor\n   * @constructor\n   */\n  export default {\n    createCaller: function (name, definition) {\n      if (definition.wantsResponse) {\n\n        if (definition.addSessionPhase) {\n          return function () {\n            try {\n              var r = this.target[name].apply(this.target, [this.sessionPhase].concat(Utils.argumentsToArray(arguments)));\n              return Promise.resolve(r);\n            } catch(e) {\n              return Promise.reject(e);\n            }\n          };\n\n        } else {\n          return function () {\n            try {\n              var r = this.target[name].apply(this.target, arguments);\n              return Promise.resolve(r);\n            } catch(e) {\n              return Promise.reject(e);\n            }\n          };\n        }\n\n\n\n      } else {\n        if (definition.addSessionPhase) {\n          return function () {\n            try {\n              this.target[name].apply(this.target, [this.sessionPhase].concat(Utils.argumentsToArray(arguments)));\n            } catch (e) {\n                console.error(e);\n            }\n          };\n        } else {\n          return function () {\n            try {\n              this.target[name].apply(this.target, arguments);\n            } catch (e) {\n                console.error(e);\n            }\n          };\n        }\n      }\n    }\n  };\n\n\n\n","import Helpers from \"../src-tool/Helpers\";\nimport Global from \"./Global\";\nimport Executor from \"../src-tool/Executor\";\nimport Configuration from \"./beans/Configuration\";\nimport ConnectionOptions from \"./beans/ConnectionOptions\";\nimport ConnectionDetails from \"./beans/ConnectionDetails\";\nimport NewEngineHandler from \"./pushpage/NewEngineHandler\";\nimport ServerConnection from \"./net/ServerConnection\";\nimport MessageProxy from \"./pushpage/MessageProxy\";\nimport SubscriptionsHandler from \"./subscriptions/SubscriptionsHandler\";\nimport Inheritance from \"../src-tool/Inheritance\";\nimport Setter from \"../src-tool/Setter\";\nimport EventDispatcher from \"../src-tool/EventDispatcher\";\nimport Constants from \"./Constants\";\nimport EnvironmentStatus from \"../src-tool/EnvironmentStatus\";\nimport IllegalArgumentException from \"../src-tool/IllegalArgumentException\";\nimport Environment from \"../src-tool/Environment\";\nimport LoggerManager from \"../src-log/LoggerManager\";\nimport IllegalStateException from \"../src-tool/IllegalStateException\";\nimport ASSERT from \"../src-test/ASSERT\";\nimport PushEvents from \"./engine/PushEvents\";\nimport LightstreamerEngine from \"./engine/LightstreamerEngine\";\nimport ls_sbc from \"./ls_sbc\";\nimport BrowserDetection from \"../src-tool/BrowserDetection\";\nimport Assertions from \"./utils/Assertions\";\nimport Utils from \"./Utils\";\nimport Subscription from \"./Subscription\";\nimport MpnManager from \"./mpn/MpnManager\";\nimport WebSocketConnection from \"./net/WebSocketConnection\";\n\nexport default /*@__PURE__*/(function() {\n  //THIS CLASS IMPLEMENTS BeanParent\n\n  var actionsLogger = LoggerManager.getLoggerProxy(Constants.ACTIONS);\n  var sharingLogger = LoggerManager.getLoggerProxy(Constants.SHARING);\n\n  var uniqueIDCounter = 0;\n\n  var ext_alpha_numeric = new RegExp(\"^[a-zA-Z0-9_]*$\");\n\n  var INVALID_SEQUENCE = \"The given sequence name is not valid, use only alphanumeric characters plus underscore, or null\";\n\n  var NO_ADDRESS = \"Configure the server address before trying to connect\";\n\n\n  /**\n   * Creates an object to be configured to connect to a Lightstreamer server\n   * and to handle all the communications with it.\n   * It is possible to instantiate as many LightstreamerClient as needed.\n   * Each LightstreamerClient is the entry point to connect to a Lightstreamer server,\n   * subscribe to as many items as needed and to send messages.\nSTART_NODE_JSDOC_EXCLUDE\n   * Multiple LightstreamerClient instances may share the same connection if\n   * configured to behave that way through {@link LightstreamerClient#enableSharing}.\nEND_NODE_JSDOC_EXCLUDE\n   * @constructor\n   *\n   * @exports LightstreamerClient\n   *\n   * @throws {IllegalArgumentException} if a not valid address is passed. See\n   * {@link ConnectionDetails#setServerAddress} for details.\n   *\n   * @param {String} [serverAddress] the address of the Lightstreamer Server to\n   * which this LightstreamerClient will connect to. It is possible not to specify\n   * it at all or to specify it later. See  {@link ConnectionDetails#setServerAddress}\n   * for details.\n   * @param {String} [adapterSet] the name of the Adapter Set mounted on Lightstreamer Server\n   * to be used to handle all requests in the Session associated with this LightstreamerClient.\n   * It is possible not to specify it at all or to specify it later. See\n   * {@link ConnectionDetails#setAdapterSet} for details.\n   *\n   * @class Facade class for the management of the communication to\n   * Lightstreamer Server. Used to provide configuration settings, event\n   * handlers, operations for the control of the connection lifecycle,\n   * {@link Subscription} handling and to send messages.\nSTART_NODE_JSDOC_EXCLUDE\n   * <BR>It can be configured to share its connection with other LightstreamerClient\n   * instances (even if on different html pages) through\n   * {@link LightstreamerClient#enableSharing} calls.\nEND_NODE_JSDOC_EXCLUDE\n   */\n  var LightstreamerClient = function(serverAddress, adapterSet) {\n\n    this[\"C\"] = LightstreamerClient;\n    this._callSuperConstructor(LightstreamerClient);\n\n    /**\n     * Data object that contains options and policies for the connection to\n     * the server. This instance is set up by the LightstreamerClient object at\n     * its own creation.\n     * <BR>Properties of this object can be overwritten by values received from a\n     * Lightstreamer Server. Such changes will be notified through a\n     * {@link ClientListener#onPropertyChange} event on listeners of this instance.\nSTART_NODE_JSDOC_EXCLUDE\n     * <BR>In case of a shared connection the involved LightstreamerClient instances\n     * will keep this data object synchronized so that a change on a property of an object\n     * of one of the instances will be reflected on all the others. Any change will\n     * be notified through a {@link ClientListener#onPropertyChange} event on\n     * listeners of this instance.\nEND_NODE_JSDOC_EXCLUDE\n     *\n     * @type ConnectionOptions\n     *\n     * @see ClientListener#onPropertyChange\n     */\n    this.connectionOptions = new ConnectionOptions();\n\n    /**\n     * Data object that contains the details needed to open a connection to\n     * a Lightstreamer Server. This instance is set up by the LightstreamerClient object at\n     * its own creation.\n     * <BR>Properties of this object can be overwritten by values received from a\n     * Lightstreamer Server. Such changes will be notified through a\n     * {@link ClientListener#onPropertyChange} event on listeners of this instance.\nSTART_NODE_JSDOC_EXCLUDE\n     * <BR>In case of a shared connection the involved LightstreamerClient instances\n     * will keep this data object synchronized so that a change on a property of an object\n     * of one of the instances will be reflected on all the others. Any change will\n     * be notified through a {@link ClientListener#onPropertyChange} event on\n     * listeners of this instance.\nEND_NODE_JSDOC_EXCLUDE\n     *\n     * @type ConnectionDetails\n     *\n     * @see ClientListener#onPropertyChange\n     */\n    this.connectionDetails = new ConnectionDetails();\n\n    this[\"connectionOptions\"] = this.connectionOptions;\n    this[\"connectionDetails\"] = this.connectionDetails;\n\n    this[\"connectionSharing\"] = ls_sbc(this);\n\n    this._configuration = new Configuration();\n    this._policy = this.connectionOptions; //TODO can be avoided\n    this._connection = this.connectionDetails;\n\n    //this.statistics = null;\n\n    if (serverAddress) {\n      this._connection.setServerAddress(serverAddress);\n    }\n\n    if (adapterSet) {\n      this._connection.setAdapterSet(adapterSet);\n    }\n\n    this._configuration.setBroadcaster(this);\n    this._policy.setBroadcaster(this);\n    this._connection.setBroadcaster(this);\n\n    this.tables = new SubscriptionsHandler(this._policy);\n\n    this.engineHandler = null;\n    this.sharing = null;\n    this.sharingPhase = 0;\n    this.enableSharingPhase = 0;\n\n    this.uID = ++uniqueIDCounter;\n    this.messages = new MessageProxy();\n    this.lastEngineStatus = Constants.DISCONNECTED;\n    this.checkEngineTask = null;\n\n    this.usedEngines = {};\n\n    EnvironmentStatus.addUnloadHandler(this);\n\n    /* MpnManager */\n    this.mpnManager = new MpnManager(this);\n  };\n\n\n//START_WEB_JSDOC_EXCLUDE\n  /**\n   * Static method that can be used to share cookies between connections to the Server\n   * (performed by this library) and connections to other sites that are performed\n   * by the application. With this method, cookies received by the application\n   * can be added (or replaced if already present) to the cookie set used by the\n   * library to access the Server. Obviously, only cookies whose domain is compatible\n   * with the Server domain will be used internally.\n   *\n   * <p class=\"lifecycle\"><b>Lifecycle:</b>This method can be called at any time;\n   * it will affect the internal cookie set immediately and the sending of cookies\n   * on future requests.</p>\n   *\n   * @param {String} uri String representation of the URI from which the supplied\n   * cookies were received. It can be null.\n   *\n   * @param {String[]} cookies An array of String representations of the various\n   * cookies to be added. Each cookie should be represented in the text format\n   * provided for the Set-Cookie HTTP header by RFC 6265.\n   *\n   * @see LightstreamerClient.getCookies\n   *\n   * @static\n   */\n//END_WEB_JSDOC_EXCLUDE\n  LightstreamerClient.addCookies = function(uri, cookieList) {\n    if (Environment.isNodeJS()) {\n      ServerConnection.addGlobalCookiesForNode(uri, cookieList);\n    }\n  };\n\n//START_WEB_JSDOC_EXCLUDE\n  /**\n   * Static inquiry method that can be used to share cookies between connections to the Server\n   * (performed by this library) and connections to other sites that are performed\n   * by the application. With this method, cookies received from the Server can be\n   * extracted for sending through other connections, according with the URI to be accessed.\n   *\n   * @param {String} uri String representation of the URI to which the cookies should\n   * be sent, or null.\n   *\n   * @return {String[]} An array of String representations of the various cookies that can\n   * be sent in a HTTP request for the specified URI. If a null URI was supplied,\n   * the export of all available cookies, including expired ones, will be returned.\n   * Each cookie is represented in the text format provided for the Set-Cookie HTTP header\n   * by RFC 6265.\n   *\n   * @see LightstreamerClient.addCookies\n   *\n   * @static\n   */\n//END_WEB_JSDOC_EXCLUDE\n  LightstreamerClient.getCookies = function(uri) {\n    if (Environment.isNodeJS()) {\n      var cookies = ServerConnection.getGlobalCookiesForNode(uri);\n      var cookieValues = [];\n      cookies.forEach(function(cookie_i, i, array) {\n          // BEGIN ported from cookie_send in xmlhttprequest-cookie\n          cookieValues.push(cookie_i.toString());\n          // END ported from cookie_send in xmlhttprequest-cookie\n      });\n      return cookieValues;\n    }\n  };\n\n  /**\n   * Static method that permits to configure the logging system used by the library.\n   * The logging system must respect the {@link LoggerProvider} interface. A custom\n   * class can be used to wrap any third-party JavaScript logging system.\n   * <BR>A ready-made LoggerProvider implementation is available within the\n   * library in the form of the {@link SimpleLoggerProvider} class.\n   * <BR>If no logging system is specified, all the generated log is discarded.\n   * <BR>The following categories are available to be consumed:\n   * <ul>\n   * <li>\n   * lightstreamer.stream:\n   * <BR>logs socket activity on Lightstreamer Server connections;\n   * <BR>at DEBUG level, read data is logged, write preparations are logged.\n   * </li><li>\n   * lightstreamer.protocol:\n   * <BR>logs requests to Lightstreamer Server and Server answers;\n   * <BR>at DEBUG level, request details and events from the Server are logged.\n   * </li><li>\n   * lightstreamer.session:\n   * <BR>logs Server Session lifecycle events;\n   * <BR>at INFO level, lifecycle events are logged;\n   * <BR>at DEBUG level, lifecycle event details are logged.\n   * </li><li>\n   * lightstreamer.requests:\n   * <BR>logs submission of control requests to the Server;\n   * <BR>at WARN level, alert events from the Server are logged;\n   * <BR>at INFO level, submission of control requests is logged;\n   * <BR>at DEBUG level, requests batching and handling details are logged.\n   * </li><li>\n   * lightstreamer.subscriptions:\n   * <BR>logs subscription requests and the related updates;\n   * <BR>at INFO level, subscriptions and unsubscriptions are logged;\n   * <BR>at DEBUG level, requests handling details are logged.\n   * </li><li>\n   * lightstreamer.messages:\n   * <BR>logs sendMessage requests and the related updates;\n   * <BR>at INFO level, sendMessage operations are logged;\n   * <BR>at DEBUG level, request handling details are logged.\n   * </li><li>\n   * lightstreamer.actions:\n   * <BR>logs settings / API calls.\n   * </li>\nSTART_NODE_JSDOC_EXCLUDE\n   * <li>\n   * lightstreamer.grids:\n   * <BR>logs grid-related code.\n   * </li><li>\n   * lightstreamer.sharing:\n   * <BR>logs creation / sharing / election of the Master and Slave\n   * {@link LightstreamerClient};\n   * <BR>at WARN level, problems getting a connection up and ready are logged;\n   * <BR>at INFO level, found/lost events are logged;\n   * <BR>at DEBUG level, connection management details and regular checks on the current connection are logged.\n   * </li>\nEND_NODE_JSDOC_EXCLUDE\n   * </ul>\n   *\n   * @param {LoggerProvider} provider A LoggerProvider instance that will be used\n   * to generate log messages by the library classes.\n   *\n   * @static\n   */\n  LightstreamerClient.setLoggerProvider = function(provider) {\n    LoggerManager.setLoggerProvider(provider);\n  };\n\n  /**\n   * A constant string representing the name of the library.\n   *\n   * @type String\n   */\n  LightstreamerClient.LIB_NAME = Constants.LIBRARY_TAG;\n\n  /**\n   * A constant string representing the version of the library.\n   *\n   * @type String\n   */\n  LightstreamerClient.LIB_VERSION = Constants.LIBRARY_VERSION + \" build \" + Constants.BUILD;\n\n\n  /**\n   * @private\n   */\n  LightstreamerClient[\"simulateSilence\"] = function(silence) {\n    //used to test STALLED\n    PushEvents.simulateSilence(silence);\n  };\n\n\n  LightstreamerClient.prototype = {\n\n      toString: function() {\n        return [\"[\",\"LightstreamerClient\",this.uID,this.statusPhase,this.initPhase,\"]\"].join(\"|\");\n      },\n\n      getTablesHandler: function() {\n        return this.tables;\n      },\n\n      getMessageProxy: function() {\n        return this.messages;\n      },\n\n      getEngineHandler: function() {\n        return this.engineHandler;\n      },\n\n      setEngineHandler: function(newEh) {\n        this.engineHandler = newEh;\n        this.tables.switchEngineHandler(newEh);\n        this.messages.switchEngineHandler(newEh);\n        this.setEnginePhase = this.enableSharingPhase;\n\n        this.checkEngineTask = Executor.addRepetitiveTask(newEh.checkDeath,5000,newEh);\n      },\n\n      clearEngineHandler: function() {\n        if (this.engineHandler) {\n          //we already have an engine, kill this one, start another\n\n          this.usedEngines[this.engineHandler.getEngineId()] = true;\n\n          this.tables.switchEngineHandler(null);\n          this.messages.switchEngineHandler(null);\n\n          if (this.checkEngineTask) {\n            Executor.stopRepetitiveTask(this.checkEngineTask);\n            this.checkEngineTask = null;\n          }\n\n          this.engineHandler.dispose();\n          this.engineHandler = null;\n\n          if (this.master) {\n            this.master.dispose();\n            this.master = null;\n          }\n\n          if (this._configuration.connectionRequested) {\n            this.cacheEngineStatus(Constants.WILL_RETRY);\n          } else {\n            this.cacheEngineStatus(Constants.DISCONNECTED);\n          }\n        }\n\n        if (this.search) {\n          this.search.stop();\n          this.search = null;\n        }\n      },\n\n      broadcastSetting: function(objClass,prop,val) {\n        if (this.engineHandler) {\n          this.engineHandler.onClientConfigurationChange(objClass,prop,val);\n        }\n\n        return true;\n      },\n\n      notifyOptionChange: function(prop,inst) {\n        //README if this method is changed take a look to lsClient of the appfiles: it contains a hack on this method\n        if (inst != this._configuration) {\n          this.dispatchEvent(\"onPropertyChange\",[prop]);\n        }\n      },\n\n// START_NODE_JSDOC_EXCLUDE\n      /**\n       * Configures the client to share its connection and/or attach to a shared connection.\n       * Different windows trying to share the connection to Lightstreamer Server must share the\n       * exact same origin. Depending on the browser in use, connection sharing might not work.\n       * Specify null to prevent any kind of sharing (this is also the default). In case\n       * a connection is not currently required (i.e. the client is in DISCONNECTED status)\n       * specifying null will also have the effect to dismiss resources currently held by the\n       * client: failing to do that when a LightstreamerClient instance is not needed anymore\n       * might prevent the VM from collecting all the allocated resources. Note that in this case\n       * required resources will be prepared again once a call to {@link LightstreamerClient#connect}\n       * is performed.\n       *\n       * <p class=\"default-value\"><b>Default value:</b> by default no sharing is configured.</p>\n       *\n       * <p class=\"lifecycle\"><b>Lifecycle:</b> this method can be called at any time.\n       * <BR>Note that if multiple calls to this method are performed, the last one will\n       * override the previous ones. Also if a call to enableSharing is made on a\n       * Master client, the current connection (if any) will be dropped and the\n       * remaining clients will enter the election algorithm.</p>\n       *\n       * @param {ConnectionSharing} sharing The sharing parameters or null to prevent any sharing\n       */\n// END_NODE_JSDOC_EXCLUDE\n      enableSharing: function(sharing) {\n        if (this.mpnRequested) {\n            throw new IllegalStateException(\"Sharing is not available when MPN is enabled\");\n        }\n        var userAgent = Environment.isBrowser() ? navigator.userAgent.toLowerCase() : null;\n        if (userAgent != null && (userAgent.indexOf(\"ucbrowser\") != -1 || userAgent.indexOf(\"ubrowser\") != -1)) {\n            sharingLogger.logInfo(\"Sharing is not available on UCBrowser\");\n            return;\n        }\n        this.enableSharingPhase++;\n        Executor.addTimedTask(this.enableSharingExec,0,this,[sharing,this.enableSharingPhase]);\n        this.sharingRequested = (sharing != null);\n      },\n\n      enableSharingExec: function(sharing,ph) {\n        if (ph != this.enableSharingPhase) {\n          return;\n        }\n\n        this.sharingPhase++;\n\n        this.clearEngineHandler();\n\n        this.sharing = sharing;\n        if (sharing && ! sharing.isPossible()) {\n            sharingLogger.logInfo(\"Connection sharing is not available\");\n        }\n        if (sharing && sharing.isPossible()) {\n\n          var ph = this.sharingPhase;\n          var that = this;\n          var nowSearching = sharing.findEngine(this);\n\n          this.search = nowSearching;\n          this.search.find(this.usedEngines)[\"then\"](function(eh) {\n            if(ph != that.sharingPhase) {\n              return;\n            }\n\n            if (that.search.noHope == true) {\n              that.sharing.noHope();\n            }\n\n            if (eh === null) {\n              that.setupOwnEngine(ph,nowSearching.getCheckedEngineList()); //avoid suicide for an engine we failed to connect to\n            } else {\n              that.setEngineHandler(eh);\n            }\n          }, function() {\n            if(ph != that.sharingPhase) {\n              return;\n            }\n            that.dispatchEvent(\"onShareAbort\");\n          });\n\n\n        } else if (sharing == null && this._configuration.connectionRequested) {\n          this.setupOwnEngine();\n        } //else { //no engine currently needed\n\n      },\n\n      /**\n       * @private\n       * @param suicided\n       * @param noHopeToAttachToAnotherEngine if true, the client must not try to attach to another engine\n       */\n      engineMourningRoom: function(suicided, noHopeToAttachToAnotherEngine) {\n        if (this.setEnginePhase != this.enableSharingPhase) {\n          return;\n        }\n        //if we disposed the engine we won't reach this point as the clearEngineHandler in the enableSharing\n        //prevents us from receiving the notification\n\n        this.clearEngineHandler();\n\n        if (EnvironmentStatus.isUnloading() || EnvironmentStatus.isUnloaded()) {\n          actionsLogger.logInfo(\"Page is closing, won't search a new engine\");\n          return;\n        }\n\n//>>excludeStart(\"debugExclude\", pragmas.debugExclude);\n        if (!this.sharing) {\n          ASSERT.fail();\n          actionsLogger.logError(\"no sharing on mourning room?\");\n          return;\n        }\n//>>excludeEnd(\"debugExclude\");\n\n        actionsLogger.logInfo(\"Sharing lost, trying to obtain a new one\");\n\n        //to avoid conflicts, we must delay the creation of the engine by giving the search algorithm\n        //more time between the two checks that convinces him he is alone\n        var aloneTimeout = null;\n        if (this._configuration.clientsCount <= 2) {\n          //when the engine died there was at most one other page, leave the default alone-timeout (default is very short)\n        } else if (suicided) {\n          //in the suicided case there was a conflict, so leave more time (there should already be an alive engine somewhere)\n          aloneTimeout = 10000;\n        } else {\n\n          //if everyone has the same timeout we get a ton of collisions\n          //there are currently -1 clients wondering if it is proper to create an engine\n\n          aloneTimeout = 200 + Helpers.randomG(this._configuration.clientsCount) * 500;\n          if (aloneTimeout > 5000) {\n            aloneTimeout = 5000; //keep a decent limit for the worst case scenario\n          }\n\n        }\n\n        var newSharing = this.sharing.convertToElectionVersion(aloneTimeout, noHopeToAttachToAnotherEngine);\n        this.enableSharingExec(newSharing,this.setEnginePhase);\n\n      },\n\n      unloadEvent: function() {\n        // destroy the session when the browser tab is closed\n        this.disconnect();\n        if (this.engineHandler) {\n          this.engineHandler.clientDeath();\n        }\n      },\n\n      /**\n       * @private\n       */\n      setupOwnEngine: function(ph,dontDieFor) {\n        if (ph && ph != this.sharingPhase) {\n          return;\n        }\n        this.setEngineHandler(new NewEngineHandler(this));\n        this.master = new LightstreamerEngine(\n        \t\tthis._configuration,\n        \t\tthis._policy,\n        \t\tthis._connection,\n        \t\tthis.sharing,\n        \t\tthis.engineHandler,\n        \t\tdontDieFor,\n        \t\tthis.mpnManager);\n        this.engineHandler.setEngineId(this.master.getEngineId());\n        this.engineHandler.setSessionPhase(this.master.getSessionPhase());\n\n        return this.engineHandler;\n      },\n\n// START_NODE_JSDOC_EXCLUDE\n      /**\n       * Inquiry method that checks if the LightstreamerClient has its own connection or if it is using\n       * a connection shared by another LightstreamerClient.\n       * This LightstreamerClient is not a Master if:\n       * <ul>\n       * <li>it is attached to another LightstreamerClient connection</li>\n       * <li>no call to {@link LightstreamerClient#connect} or {@link LightstreamerClient#enableSharing}\n       * was performed on it.</li>\n       * <li>the {@link ClientListener#onShareAbort} event has been fired and no following\n       * {@link LightstreamerClient#enableSharing} has been performed.</li>\n       * <li>a call to {@link LightstreamerClient#enableSharing} has been performed and the client is currently\n       * searching for a shared connection</li>\n       * <li>a call to {@link LightstreamerClient#enableSharing} has been performed with null as parameter and no\n       * subsequent call to connect has been performed</li>\n       *\n       * @return {boolean} Whenever the LightstreamerClient owning this instance is a Master or not.\n       *\n       * @see ConnectionSharing\n       */\n// END_NODE_JSDOC_EXCLUDE\n      isMaster: function() {\n        return this.master != null;\n      },\n\n\n      /**\n       * Operation method that requests to open a Session against the configured\n       * Lightstreamer Server.\n       * <BR>When connect() is called, unless a single transport was forced through\n       * {@link ConnectionOptions#setForcedTransport},\n       * the so called \"Stream-Sense\" mechanism is started: if the client does not\n       * receive any answer for some seconds from the streaming connection, then it\n       * will automatically open a polling connection.\n       * <BR>A polling connection may also be opened if the environment is not suitable\n       * for a streaming connection.\nSTART_NODE_JSDOC_EXCLUDE\n       * <BR>When connect() is used to activate the Lightstreamer\n       * Session on page start up, it is suggested to make this call as the\n       * latest action of the scripts in the page. Otherwise, if the stream\n       * connection is opened but third-party scripts are consuming most of the\n       * CPU for page initialization (initial rendering, etc.), the parsing\n       * of the streaming response could be delayed to the point that the Client\n       * switches to polling mode. This is usually not the case nowadays but may\n       * still happen if the client is used on old machines.\n       * <BR>In case of a shared connection the connect call will apply to such\n       * shared connection regardless of which LightstreamerClient is calling it.\n       * <BR>If {@link LightstreamerClient#enableSharing} has not been called before the\n       * first call to connect, then a default call will be performed with the\n       * following parameter:\n       * <BR><CODE>new ConnectionSharing(\"randomstring\",\"IGNORE\", \"CREATE\", true, null);</CODE>\nEND_NODE_JSDOC_EXCLUDE\n       * <BR>Note that as \"polling connection\" we mean a loop of polling\n       * requests, each of which requires opening a synchronous (i.e. not\n       * streaming) connection to Lightstreamer Server.\n       *\n       * <p class=\"lifecycle\"><b>Lifecycle:</b>\n       * Note that the request to connect is accomplished by the client\n       * asynchronously; this means that an invocation to {@link LightstreamerClient#getStatus}\n       * right after connect() might not reflect the change yet. Also if a\n       * CPU consuming task is performed right after the call the connection will\n       * be delayed.\n       * <BR>When the request to connect is finally being executed, if the current status\n       * of the client is not DISCONNECTED, then nothing will be done.</p>\n       *\nSTART_NODE_JSDOC_EXCLUDE\n       * @throws {IllegalStateException} if the LightstreamerClient cannot\n       * connect to the server due to the sharing policies configured in the\n       * {@link ConnectionSharing} object.\n       * @see ConnectionSharing\n       *\nEND_NODE_JSDOC_EXCLUDE\n       * @throws {IllegalStateException} if no server address was configured\n       * and there is no suitable default address to be used.\n       *\n       * @see LightstreamerClient#getStatus\n       * @see LightstreamerClient#disconnect\n       * @see ClientListener#onStatusChange\n       * @see ConnectionDetails#setServerAddress\n       */\n      connect: function() {\n        if (!this._connection.serverAddress) {\n          throw new IllegalStateException(NO_ADDRESS);\n        }\n\n        actionsLogger.logInfo(\"Connect requested\");\n\n        //this.startupStatistics();\n\n\n        Executor.addTimedTask(this.asynchConnect,0,this);\n      },\n\n      asynchConnect: function() {\n        if (this.lastEngineStatus) {\n          // if executed while not DISCONNECTED it will be ignored.\n          if(this.lastEngineStatus != Constants.DISCONNECTED){\n            // note: this case includes DISCONNECTED:WILL-RETRY and DISCONNECTED:TRYING-RECOVERY.\n            return;\n          }\n        }\n\n        if ((this.sharing == null || ! this.sharing.isPossible()) && !this.master) {\n          this.setupOwnEngine();\n        }\n\n        actionsLogger.logDebug(\"Executing connect\");\n\n        this._configuration.simpleSetter('connectionRequested',true);\n\n        var eh = this.getEngineHandler();\n        if (eh) {\n          eh.callConnect();\n        }\n      },\n      /*\n      startupStatistics: function() {\n        this.dismissStatistics();\n        this.statistics = new StatusStatistics();\n        this.addListener(this.statistics);\n      },\n\n      dismissStatistics: function() {\n        if (this.statistics) {\n          this.statistics.dismiss();\n          this.removeListener(this.statistics);\n          delete this.statistics;\n        }\n      },\n      */\n\n      /**\n       * Operation method that requests to close the Session opened against the\n       * configured Lightstreamer Server (if any).\n       * <BR>When disconnect() is called, the \"Stream-Sense\" mechanism is stopped.\n       * <BR>Note that active {@link Subscription} instances, associated with this\n       * LightstreamerClient instance, are preserved to be re-subscribed to on future\n       * Sessions.\nSTART_NODE_JSDOC_EXCLUDE\n       * <BR>In case of a shared connection, the disconnect() call will apply to such\n       * shared connection regardless of which LightstreamerClient is calling it.\nEND_NODE_JSDOC_EXCLUDE\n       *\n       * <p class=\"lifecycle\"><b>Lifecycle:</b>\n       * Note that the request to disconnect is accomplished by the client\n       * asynchronously; this means that an invocation to {@link LightstreamerClient#getStatus}\n       * right after disconnect() might not reflect the change yet. Also if a\n       * CPU consuming task is performed right after the call the disconnection will\n       * be delayed.\n       * <BR>When the request to disconnect is finally being executed, if the status of the client is\n       * \"DISCONNECTED\", then nothing will be done.</p>\n       */\n      disconnect: function() {\n        actionsLogger.logInfo(\"Disconnect requested\");\n\n        //this.dismissStatistics();\n\n        Executor.addTimedTask(this.asynchDisconnect,0,this);\n      },\n\n      asynchDisconnect: function() {\n\n        actionsLogger.logDebug(\"Executing disconnect\");\n\n        this._configuration.simpleSetter('connectionRequested',false);\n\n        var eh = this.getEngineHandler();\n        if (eh) {\n          eh.callDisconnect();\n        }\n      },\n\n      /**\n       * Inquiry method that gets the current client status and transport\n       * (when applicable).\n       *\n       * @return {String} The current client status. It can be one of the following\n       * values:\n       * <ul>\n       * <li>\"CONNECTING\" the client is waiting for a Server's response in order\n       * to establish a connection;</li>\n       * <li>\"CONNECTED:STREAM-SENSING\" the client has received a preliminary\n       * response from the server and is currently verifying if a streaming connection\n       * is possible;</li>\n       * <li>\"CONNECTED:WS-STREAMING\" a streaming connection over WebSocket is active;</li>\n       * <li>\"CONNECTED:HTTP-STREAMING\" a streaming connection over HTTP is active;</li>\n       * <li>\"CONNECTED:WS-POLLING\" a polling connection over WebSocket is in progress;</li>\n       * <li>\"CONNECTED:HTTP-POLLING\" a polling connection over HTTP is in progress;</li>\n       * <li>\"STALLED\" the Server has not been sending data on an active\n       * streaming connection for longer than a configured time;</li>\n       * <li>\"DISCONNECTED:WILL-RETRY\" no connection is currently active but one will\n       * be opened (possibly after a timeout).</li>\n       * <li>\"DISCONNECTED:TRYING-RECOVERY\" no connection is currently active,\n       * but one will be opened as soon as possible, as an attempt to recover\n       * the current session after a connection issue;</li>\n       * <li>\"DISCONNECTED\" no connection is currently active;</li>\n       * </ul>\n       *\n       * @see ClientListener#onStatusChange\n       */\n      getStatus: function() {\n        return this.lastEngineStatus;\n      },\n\n      /**\n       * Operation method that sends a message to the Server. The message is\n       * interpreted and handled by the Metadata Adapter associated to the\n       * current Session. This operation supports in-order guaranteed message\n       * delivery with automatic batching. In other words, messages are\n       * guaranteed to arrive exactly once and respecting the original order,\n       * whatever is the underlying transport (HTTP or WebSockets). Furthermore,\n       * high frequency messages are automatically batched, if necessary,\n       * to reduce network round trips.\n       * <BR>Upon subsequent calls to the method, the sequential management of\n       * the involved messages is guaranteed. The ordering is determined by the\n       * order in which the calls to sendMessage are issued\nSTART_NODE_JSDOC_EXCLUDE\n       * ; in case of calls\n       * issued from different LightstreamerClient instances on different html pages\n       * sharing the same connection, the relative order is determined by the client\n       * owning the shared connection. Anyway two messages sent through the same\n       * LightstreamerClient instance will never surpass each other\nEND_NODE_JSDOC_EXCLUDE\n       * .\n       * <BR>If a message, for any reason, doesn't reach the Server (this is possible with the HTTP transport),\n       * it will be resent; however, this may cause the subsequent messages to be delayed.\n       * For this reason, each message can specify a \"delayTimeout\", which is the longest time the message, after\n       * reaching the Server, can be kept waiting if one of more preceding messages haven't been received yet.\n       * If the \"delayTimeout\" expires, these preceding messages will be discarded; any discarded message\n       * will be notified to the listener through {@link ClientMessageListener#onDiscarded}.\n       * Note that, because of the parallel transport of the messages, if a zero or very low timeout is \n       * set for a message and the previous message was sent immediately before, it is possible that the\n       * latter gets discarded even if no communication issues occur.\n       * The Server may also enforce its own timeout on missing messages, to prevent keeping the subsequent\n       * messages for long time.\n       * <BR>Sequence identifiers can also be associated with the messages.\n       * In this case, the sequential management is restricted to all subsets\n       * of messages with the same sequence identifier associated.\n       * <BR>Notifications of the operation outcome can be received by supplying\n       * a suitable listener. The supplied listener is guaranteed to be eventually\n       * invoked; listeners associated with a sequence are guaranteed to be invoked\n       * sequentially.\n       * <BR>The \"UNORDERED_MESSAGES\" sequence name has a special meaning.\n       * For such a sequence, immediate processing is guaranteed, while strict\n       * ordering and even sequentialization of the processing is not enforced.\n       * Likewise, strict ordering of the notifications is not enforced.\n       * However, messages that, for any reason, should fail to reach the Server\n       * whereas subsequent messages had succeeded, might still be discarded after\n       * a server-side timeout, in order to ensure that the listener eventually gets a notification.\n       * <BR>Moreover, if \"UNORDERED_MESSAGES\" is used and no listener is supplied,\n       * a \"fire and forget\" scenario is assumed. In this case, no checks on\n       * missing, duplicated or overtaken messages are performed at all, so as to\n       * optimize the processing and allow the highest possible throughput.\n       *\n       * <p class=\"lifecycle\"><b>Lifecycle:</b> Since a message is handled by the Metadata\n       * Adapter associated to the current connection, a message can be sent\n       * only if a connection is currently active.\n       * If the special enqueueWhileDisconnected flag is specified it is possible to\n       * call the method at any time and the client will take care of sending the\n       * message as soon as a connection is available, otherwise, if the current status\n       * is \"DISCONNECTED*\", the message will be abandoned and the\n       * {@link ClientMessageListener#onAbort} event will be fired.\n       * <BR>Note that, in any case, as soon as the status switches again to\n       * \"DISCONNECTED*\", any message still pending is aborted, including messages\n       * that were queued with the enqueueWhileDisconnected flag set to true.\n       * <BR>Also note that forwarding of the message to the server is made\n       * asynchronously; this means that if a CPU consuming task is\n       * performed right after the call, the message will be delayed. Hence,\n       * if a message is sent while the connection is active, it could be aborted\n       * because of a subsequent disconnection. In the same way a message sent\n       * while the connection is not active might be sent because of a subsequent\n       * connection.</p>\n       *\n       * @throws: {IllegalArgumentException} if the given sequence name is\n       * invalid.\n       * @throws: {IllegalArgumentException} if NaN or a negative value is\n       * given as delayTimeout.\n       *\n       * @param {String} msg a text message, whose interpretation is entirely\n       * demanded to the Metadata Adapter associated to the current connection.\n       * @param {String} [sequence=\"UNORDERED_MESSAGES\"] an alphanumeric identifier, used to\n       * identify a subset of messages to be managed in sequence; underscore\n       * characters are also allowed. If the \"UNORDERED_MESSAGES\" identifier is\n       * supplied, the message will be processed in the special way described\n       * above.\n       * <BR>The parameter is optional; if not supplied, \"UNORDERED_MESSAGES\" is used\n       * as the sequence name.\n       * @param {Number} [delayTimeout] a timeout, expressed in milliseconds.\n       * If higher than the Server configured timeout on missing messages,\n       * the latter will be used instead. <BR>\n       * The parameter is optional; if not supplied, the Server configured timeout on missing\n       * messages will be applied.\n       * <BR>This timeout is ignored for the special \"UNORDERED_MESSAGES\" sequence,\n       * although a server-side timeout on missing messages still applies.\n       * @param {ClientMessageListener} [listener] an\n       * object suitable for receiving notifications about the processing outcome.\n       * <BR>The parameter is optional; if not supplied, no notification will be\n       * available.\n       * @param {boolean} [enqueueWhileDisconnected=false] if this flag is set to true, and\n       * the client is in a disconnected status when the provided message\n       * is handled, then the message is not aborted right away but is queued waiting\n       * for a new session. Note that the message can still be aborted later when a new\n       * session is established.\n       */\n      sendMessage: function(msg,sequence,delayTimeout,listener,enqueueWhileDisconnected) {\n        if (!sequence) {\n          sequence = Constants._UNORDERED_MESSAGES;\n        } else if (!ext_alpha_numeric.test(sequence)){\n          throw new IllegalArgumentException(INVALID_SEQUENCE);\n        }\n\n        //If a timeout is given it must be a number.\n        //the values that return false from if(delayTimeout) are 0 null undefined and \"\"\n        if (delayTimeout || delayTimeout == 0) {\n          delayTimeout = this.checkPositiveNumber(delayTimeout, true);\n        } else {\n          delayTimeout = null;\n        }\n\n        enqueueWhileDisconnected = this.checkBool(enqueueWhileDisconnected,true);\n\n        Executor.addTimedTask(this.asyncSendMessage,0,this,[msg,sequence,listener,delayTimeout,enqueueWhileDisconnected]);\n\n      },\n\n      asyncSendMessage: function(msg,sequence,listener,_timeout,enqueueWhileDisconnected) {\n\n        if (this.engineHandler && this.engineHandler.isSessionAlive()) {\n          this.messages.forwardMessage(msg,sequence,listener,_timeout);\n\n        } else if (enqueueWhileDisconnected) {\n          //we enqueue\n          this.messages.enqueueMessage(msg,sequence,listener,_timeout);\n\n        } else if (listener) {\n          //we abort immediately\n          //this.messages.messageAbort(listenerProxy.prog);//can't use this as we don't have the listenerProxy\n          this.messages.fireEvent(\"onAbort\",listener,[msg,false]);\n        } //no listener: no abort\n      },\n\n      serverError: function(flag,mex) {\n        this.dispatchEvent(\"onServerError\",[flag,mex]);\n      },\n\n      sessionEnd: function() {\n        this.getTablesHandler().pauseAllTables();\n        this.getMessageProxy().cleanMessageListeners();\n      },\n\n      sessionStart: function() {\n        this.getTablesHandler().handleAllWaitingTables();\n        this.getMessageProxy().handleAllWaitingMessages();\n        this.getLsEngine().resolve(this.master);\n      },\n\n      cacheEngineStatus: function(_status) {\n        if (_status == this.lastEngineStatus) {\n          return;\n        }\n        this.lastEngineStatus = _status;\n        this.dispatchEvent(\"onStatusChange\",[_status]);\n      },\n\n      sendLog: function(logStr) {\n        if (this.engineHandler && this.engineHandler.isSessionAlive()) {\n          this.engineHandler.forwardLog(logStr);\n          return true;\n        }\n        return false;\n      },\n\n      onServerKeepalive: function() {\n          this.dispatchEvent(\"onServerKeepalive\");\n      },\n\n\n      /**\n       * Inquiry method that returns an array containing all the {@link Subscription}\n       * instances that are currently \"active\" on this LightstreamerClient.\n       * <BR/>Internal second-level Subscription are not included.\n       *\n       * @return {String[]} An array, containing all the {@link Subscription} currently\n       * \"active\" on this LightstreamerClient.\n       * <BR>The array can be empty.\n       */\n      getSubscriptions: function() {\n        var map = [];\n        var origMap = this.tables.getAllTables();\n        for (var _id in origMap) {\n          if(!origMap[_id].isSubTable()) {\n            map.push(origMap[_id]);\n          }\n        }\n        return map;\n      },\n\n      /**\n       * Operation method that adds a {@link Subscription} to the list of \"active\"\n       * Subscriptions.\n       * The Subscription cannot already be in the \"active\" state.\n       * <BR>Active subscriptions are subscribed to through the server as soon as possible\n       * (i.e. as soon as there is a session available). Active Subscription are\n       * automatically persisted across different sessions as long as a related\n       * unsubscribe call is not issued.\n       *\n       * <p class=\"lifecycle\"><b>Lifecycle:</b> Subscriptions can be given to the LightstreamerClient at\n       * any time. Once done the Subscription immediately enters the \"active\" state.\n       * <BR>Once \"active\", a {@link Subscription} instance cannot be provided again\n       * to a LightstreamerClient unless it is first removed from the \"active\" state\n       * through a call to {@link LightstreamerClient#unsubscribe}.\n       * <BR>Also note that forwarding of the subscription to the server is made\n       * asynchronously; this means that if a CPU consuming task is\n       * performed right after the call the subscription will be delayed.\n       * <BR>A successful subscription to the server will be notified through a\n       * {@link SubscriptionListener#onSubscription} event.</p>\n       *\n       * @throws {IllegalArgumentException} if the given Subscription does\n       * not contain a field list/field schema.\n       * @throws {IllegalArgumentException} if the given Subscription does\n       * not contain a item list/item group.\n       * @throws {IllegalStateException}  if the given Subscription is already \"active\".\n       *\n       * @param {Subscription} subscription A {@link Subscription} object, carrying\n       * all the information needed to process its pushed values.\n       *\n       * @see SubscriptionListener#onSubscription\n       */\n      subscribe: function(subscription) {\n        this.tables.addATable(subscription);\n      },\n\n      /**\n       * Operation method that removes a {@link Subscription} that is currently in\n       * the \"active\" state.\n       * <BR>By bringing back a Subscription to the \"inactive\" state, the unsubscription\n       * from all its items is requested to Lightstreamer Server.\n       *\n       * <p class=\"lifecycle\"><b>Lifecycle:</b> Subscription can be unsubscribed from at\n       * any time. Once done the Subscription immediately exits the \"active\" state.\n       * <BR>Note that forwarding of the unsubscription to the server is made\n       * asynchronously; this means that if a CPU consuming task is\n       * performed right after the call the unsubscription will be delayed.\n       * <BR>The unsubscription will be notified through a\n       * {@link SubscriptionListener#onUnsubscription} event.</p>\n       *\n       * @throws {IllegalStateException} if the given Subscription is not\n       * currently \"active\".\n       *\n       * @param {Subscription} subscription An \"active\" {@link Subscription} object\n       * that was activated by this LightstreamerClient instance.\n       *\n       * @see SubscriptionListener#onUnsubscription\n       */\n      unsubscribe: function(subscription) {\n        this.tables.removeATable(subscription);\n      },\n\n      /**\n       * Adds a listener that will receive events from the LightstreamerClient\n       * instance.\n       * <BR>The same listener can be added to several different LightstreamerClient\n       * instances.\n       *\n       * <p class=\"lifecycle\"><b>Lifecycle:</b> a listener can be added at any time.</p>\n       *\n       * @param {ClientListener} listener An object that will receive the events\n       * as shown in the {@link ClientListener} interface.\n       * <BR>Note that the given instance does not have to implement all of the\n       * methods of the ClientListener interface. In fact it may also\n       * implement none of the interface methods and still be considered a valid\n       * listener. In the latter case it will obviously receive no events.\n       */\n      addListener: function(listener) {\n        this._callSuperMethod(LightstreamerClient,\"addListener\",[listener]);\n      },\n\n      /**\n       * Removes a listener from the LightstreamerClient instance so that it\n       * will not receive events anymore.\n       *\n       * <p class=\"lifecycle\"><b>Lifecycle:</b> a listener can be removed at any time.</p>\n       *\n       * @param {ClientListener} listener The listener to be removed.\n       */\n      removeListener: function(listener) {\n        this._callSuperMethod(LightstreamerClient,\"removeListener\",[listener]);\n      },\n\n      /**\n       * Returns an array containing the {@link ClientListener} instances that\n       * were added to this client.\n       *\n       * @return {ClientListener[]} an array containing the listeners that were added to this client.\n       * Listeners added multiple times are included multiple times in the array.\n       */\n      getListeners: function() {\n        return this._callSuperMethod(LightstreamerClient,\"getListeners\");\n      },\n\n      /**\n       * Returns a promise that is resolved with a LightstreamerEngine.\n       * @private\n       */\n      getLsEngine: function() {\n          if (this.lsEnginePromise == null) {\n              this.lsEnginePromise = Utils.defer();\n          }\n          return this.lsEnginePromise;\n      },\n\n// START_NODE_JSDOC_EXCLUDE\n      /**\n       * Operation method that registers the MPN device on the server's MPN Module.<BR>\n       * By registering an MPN device, the client enables MPN functionalities such as {@link LightstreamerClient#subscribeMpn}.\n       *\n       * <p class=\"edition-note\"><B>Edition Note:</B> MPN is an optional feature, available depending on Edition and License Type.\n       * To know what features are enabled by your license, please see the License tab of the Monitoring Dashboard (by default,\n       * available at /dashboard).</p>\n       *\n       * <p class=\"lifecycle\"><b>Lifecycle:</b> An {@link MpnDevice} can be registered at any time. The registration will be notified through a {@link MpnDeviceListener#onRegistered} event.</p>\n       *\n       * @param device An {@link MpnDevice} instance, carrying all the information about the MPN device.\n       * @throws IllegalArgumentException if the specified device is null.\n       *\n       * @see #subscribeMpn\n       */\n// END_NODE_JSDOC_EXCLUDE\n      registerForMpn: function(device) {\n          if (this.sharingRequested) {\n              throw new IllegalStateException(\"MPN is not available when sharing is enabled\");\n          }\n          if (device == null) {\n              throw new IllegalArgumentException(\"Device cannot be null\");\n          }\n          this.mpnDevice = device;\n          this.mpnManager.registerForMpn(device);\n          this.mpnRequested = true;\n      },\n\n// START_NODE_JSDOC_EXCLUDE\n      /**\n       * Operation method that subscribes an MpnSubscription on server's MPN Module.<BR>\n       * This operation adds the {@link MpnSubscription} to the list of \"active\" subscriptions. MPN subscriptions are activated on the server as soon as possible\n       * (i.e. as soon as there is a session available and subsequently as soon as the MPN device registration succeeds). Differently than real-time subscriptions,\n       * MPN subscriptions are persisted on the server's MPN Module database and survive the session they were created on.<BR>\n       * If the <code>coalescing</code> flag is <i>set</i>, the activation of two MPN subscriptions with the same Adapter Set, Data Adapter, Group, Schema and trigger expression will be\n       * considered the same MPN subscription. Activating two such subscriptions will result in the second activation modifying the first MpnSubscription (that\n       * could have been issued within a previous session). If the <code>coalescing</code> flag is <i>not set</i>, two activations are always considered different MPN subscriptions,\n       * whatever the Adapter Set, Data Adapter, Group, Schema and trigger expression are set.<BR>\n       * The rationale behind the <code>coalescing</code> flag is to allow simple apps to always activate their MPN subscriptions when the app starts, without worrying if\n       * the same subscriptions have been activated before or not. In fact, since MPN subscriptions are persistent, if they are activated every time the app starts and\n       * the <code>coalescing</code> flag is not set, every activation is a <i>new</i> MPN subscription, leading to multiple push notifications for the same event.\n       *\n       * <p class=\"edition-note\"><B>Edition Note:</B> MPN is an optional feature, available depending on Edition and License Type.\n       * To know what features are enabled by your license, please see the License tab of the Monitoring Dashboard (by default,\n       * available at /dashboard).</p>\n       *\n       * <p class=\"lifecycle\"><b>Lifecycle:</b> An MpnSubscription can be given to the LightstreamerClient once an MpnDevice registration has been requested. The MpnSubscription\n       * immediately enters the \"active\" state.<BR>\n       * Once \"active\", an MpnSubscription instance cannot be provided again to an LightstreamerClient unless it is first removed from the \"active\" state through\n       * a call to {@link #unsubscribeMpn}.<BR>\n       * A successful subscription to the server will be notified through an {@link MpnSubscriptionListener#onSubscription} event.</p>\n       *\n       * @param subscription An MpnSubscription object, carrying all the information to route real-time data via push notifications.\n       * @param coalescing A flag that specifies if the MPN subscription must coalesce with any pre-existing MPN subscription with the same Adapter Set, Data Adapter,\n       * Group, Schema and trigger expression.\n       * @throws IllegalStateException if the given MPN subscription does not contain a field list/field schema.\n       * @throws IllegalStateException if the given MPN subscription does not contain a item list/item group.\n       * @throws IllegalStateException if there is no MPN device registered.\n       * @throws IllegalStateException if the given MPN subscription is already active.\n       *\n       * @see #unsubscribeMpn\n       * @see #unsubscribeMpnSubscriptions\n       */\n// END_NODE_JSDOC_EXCLUDE\n      subscribeMpn: function(subscription, coalescing) {\n          if (subscription == null) {\n              throw new IllegalArgumentException(\"MpnSubscription is null\");\n          }\n          if (subscription.fields == null) {\n              throw new IllegalArgumentException(\"Invalid MpnSubscription, please specify a field list or field schema\");\n          }\n          if (subscription.items == null) {\n              throw new IllegalArgumentException(\"Invalid MpnSubscription, please specify an item list or item group\");\n          }\n          if (subscription.getNotificationFormat() == null) {\n              throw new IllegalArgumentException(\"Invalid MpnSubscription, please specify a notification format\");\n          }\n          if (subscription.isActive()) {\n              throw new IllegalStateException(\"MpnSubscription is already active\");\n          }\n          if (this.mpnDevice == null) {\n              throw new IllegalStateException(\"No MPN device registered\");\n          }\n          coalescing = !! coalescing;\n\n          this.mpnManager.subscribe(subscription, coalescing);\n      },\n\n// START_NODE_JSDOC_EXCLUDE\n      /**\n       * Operation method that unsubscribes an MpnSubscription from the server's MPN Module.<BR>\n       * This operation removes the MpnSubscription from the list of \"active\" subscriptions.\n       *\n       * <p class=\"edition-note\"><B>Edition Note:</B> MPN is an optional feature, available depending on Edition and License Type.\n       * To know what features are enabled by your license, please see the License tab of the Monitoring Dashboard (by default,\n       * available at /dashboard).</p>\n       *\n       * <p class=\"lifecycle\"><b>Lifecycle:</b> An MpnSubscription can be unsubscribed from at any time. Once done the MpnSubscription immediately exits the \"active\" state.<BR>\n       * The unsubscription will be notified through an {@link MpnSubscriptionListener#onUnsubscription} event.</p>\n       *\n       * @param subscription An \"active\" MpnSubscription object.\n       * @throws IllegalStateException if the given MPN subscription is not active.\n       * @throws IllegalStateException if there is no MPN device registered.\n       *\n       * @see #subscribeMpn\n       * @see #unsubscribeMpnSubscriptions\n       */\n// END_NODE_JSDOC_EXCLUDE\n      unsubscribeMpn: function(/*MpnSubscription*/ subscription) {\n          if (! subscription.isActive()) {\n              throw new IllegalStateException(\"MpnSubscription is not active\");\n          }\n          if (this.mpnDevice == null) {\n              throw new IllegalStateException(\"No MPN device registered\");\n          }\n          this.mpnManager.unsubscribe(subscription);\n      },\n\n// START_NODE_JSDOC_EXCLUDE\n      /**\n       * Operation method that unsubscribes all the MPN subscriptions with a specified status from the server's MPN Module.<BR>\n       * By specifying a status filter it is possible to unsubscribe multiple MPN subscriptions at once. E.g. by passing <code>TRIGGERED</code> it is possible\n       * to unsubscribe all triggered MPN subscriptions. This operation removes the involved MPN subscriptions from the list of \"active\" subscriptions.\n       *\n       * <p class=\"edition-note\"><B>Edition Note:</B> MPN is an optional feature, available depending on Edition and License Type.\n       * To know what features are enabled by your license, please see the License tab of the Monitoring Dashboard (by default,\n       * available at /dashboard).</p>\n       *\n       * <p class=\"lifecycle\"><b>Lifecycle:</b> Multiple unsubscription can be requested at any time. Once done the involved MPN subscriptions immediately exit the \"active\" state.<BR>\n       * The unsubscription will be notified through an {@link MpnSubscriptionListener#onUnsubscription} event to all involved MPN subscriptions.</p>\n       *\n       * @param filter A status name to be used to select the MPN subscriptions to unsubscribe. If null all existing MPN subscriptions\n       * are unsubscribed. Possible filter values are:<ul>\n       * <li><code>ALL</code> or null</li>\n       * <li><code>TRIGGERED</code></li>\n       * <li><code>SUBSCRIBED</code></li>\n       * </ul>\n       * @throws IllegalArgumentException if the given filter is not valid.\n       * @throws IllegalStateException if there is no MPN device registered.\n       *\n       * @see #subscribeMpn\n       * @see #unsubscribeMpn\n       */\n// END_NODE_JSDOC_EXCLUDE\n      unsubscribeMpnSubscriptions: function(filter) {\n          if (! (filter == null || filter == \"ALL\" || filter == \"SUBSCRIBED\" || filter == \"TRIGGERED\")) {\n              throw new IllegalArgumentException(\"The given value is not valid for this setting. Use null, ALL, TRIGGERED or SUBSCRIBED instead\");\n          }\n          if (this.mpnDevice == null) {\n              throw new IllegalStateException(\"No MPN device registered\");\n          }\n          this.mpnManager.unsubscribeFilter(filter);\n      },\n\n// START_NODE_JSDOC_EXCLUDE\n      /**\n       * Inquiry method that returns a collection of the existing MPN subscription with a specified status.<BR>\n       * Can return both objects created by the user, via {@link MpnSubscription} constructors, and objects created by the client, to represent pre-existing MPN subscriptions.<BR>\n       * Note that objects in the collection may be substituted at any time with equivalent ones: do not rely on pointer matching, instead rely on the\n       * {@link MpnSubscription#getSubscriptionId} value to verify the equivalence of two MpnSubscription objects. Substitutions may happen\n       * when an MPN subscription is modified, or when it is coalesced with a pre-existing subscription.\n       *\n       * <p class=\"edition-note\"><B>Edition Note:</B> MPN is an optional feature, available depending on Edition and License Type.\n       * To know what features are enabled by your license, please see the License tab of the Monitoring Dashboard (by default,\n       * available at /dashboard).</p>\n       *\n       * <p class=\"lifecycle\"><b>Lifecycle:</b> The collection is available once an MpnDevice registration has been requested, but reflects the actual server's collection only\n       * after an {@link MpnDeviceListener#onSubscriptionsUpdated} event has been notified.</p>\n       *\n       * @param {String} filter An MPN subscription status name to be used to select the MPN subscriptions to return. If null all existing MPN subscriptions\n       * are returned. Possible filter values are:<ul>\n       * <li><code>ALL</code> or null</li>\n       * <li><code>TRIGGERED</code></li>\n       * <li><code>SUBSCRIBED</code></li>\n       * </ul>\n       * @return {MpnSubscription[]} the collection of {@link MpnSubscription} with the specified status.\n       * @throws IllegalArgumentException if the given filter is not valid.\n       * @throws IllegalStateException if there is no MPN device registered.\n       *\n       * @see #findMpnSubscription\n       */\n// END_NODE_JSDOC_EXCLUDE\n      getMpnSubscriptions: function(filter) {\n          if (! (filter == null || \"ALL\" == filter || \"SUBSCRIBED\" == filter || \"TRIGGERED\" == filter)) {\n              throw new IllegalArgumentException(\"The given value is not valid for this setting. Use null, ALL, TRIGGERED or SUBSCRIBED instead\");\n          }\n          if (this.mpnDevice == null) {\n              throw new IllegalStateException(\"No MPN device registered\");\n          }\n          /*List<MpnSubscription>*/ var ls = this.mpnManager.getSubscriptions(filter);\n          return ls.toArray();\n      },\n\n// START_NODE_JSDOC_EXCLUDE\n      /**\n       * Inquiry method that returns the MpnSubscription with the specified subscription ID, or null if not found.<BR>\n       * The object returned by this method can be an object created by the user, via MpnSubscription constructors, or an object created by the client,\n       * to represent pre-existing MPN subscriptions.<BR>\n       * Note that objects returned by this method may be substitutued at any time with equivalent ones: do not rely on pointer matching, instead rely on the\n       * {@link MpnSubscription#getSubscriptionId} value to verify the equivalence of two MpnSubscription objects. Substitutions may happen\n       * when an MPN subscription is modified, or when it is coalesced with a pre-existing subscription.\n       *\n       * <p class=\"edition-note\"><B>Edition Note:</B> MPN is an optional feature, available depending on Edition and License Type.\n       * To know what features are enabled by your license, please see the License tab of the Monitoring Dashboard (by default,\n       * available at /dashboard).</p>\n       *\n       * @param {String} subscriptionId The subscription ID to search for.\n       * @return {MpnSubscription} the MpnSubscription with the specified ID, or null if not found.\n       * @throws IllegalArgumentException if the given subscription ID is null.\n       * @throws IllegalStateException if there is no MPN device registered.\n       *\n       * @see #getMpnSubscriptions\n       */\n// END_NODE_JSDOC_EXCLUDE\n      findMpnSubscription: function(subscriptionId) {\n          if (subscriptionId == null) {\n              throw new IllegalArgumentException(\"Subscription id must be not null\");\n          }\n          return this.mpnManager.findSubscription(subscriptionId);\n      },\n      \n      /*\n       * Subscribes to the given Remote Adapter status item, so that, when the status is \"disconnected\",\n       * the client is forced to reconnect after the given reconnect delay.\n       * Also, if the Metadata Adapter is disconnected and the server sends the given CONERR code, \n       * the client reconnects after the given delay instead of going to DISCONNECTED state.\n       */\n      handleRemoteAdapterStatus: function(metadataErrorCode, dataAdapterName, statusItemName, reconnectMaxDelay) {\n          /* Adding properties to connectionOptions, they will be propagated to Master engine */\n          this.connectionOptions.installRemoteAdapterStatusObserver(metadataErrorCode, dataAdapterName, statusItemName, reconnectMaxDelay);\n          var adapterSub = new Subscription(\"MERGE\", statusItemName, [\"status\"]);\n          adapterSub.setDataAdapter(dataAdapterName);\n          adapterSub.setRequestedSnapshot(\"yes\");\n          var that = this;\n          adapterSub.addListener({\n              // preserve the name of the method as it is called by the dispatcher\n              \"onItemUpdate\": function(updateInfo) {\n                  var status = updateInfo.getValue(\"status\");\n                  console.log(\"STATUS\", status);\n                  if (status && status != \"connected\") {\n                      var eh = that.getEngineHandler();\n                      if (eh) {\n                          eh.callDisconnectAndReconnect();\n                      }\n                  }\n              }\n          });\n          Executor.addTimedTask(this.subscribe, 0, this, [adapterSub]);\n      }\n\n  };\n\n  /*\n   * TEST-ONLY METHOD.\n   * Enable WS if disabled.\n   */\n  LightstreamerClient[\"__restoreWs\"] = WebSocketConnection.restoreClass;\n  LightstreamerClient[\"__disableWs\"] = WebSocketConnection.disableClass;\n\n  /*\n   * TEST-ONLY METHOD.\n   */\n  LightstreamerClient[\"__handleError5\"] = Constants.handleError5;\n\n  /**\n   * This is a dummy constructor not to be used in any case.\n   * @constructor\n   *\n   * @exports ClientListener\n   * @class Interface to be implemented to listen to {@link LightstreamerClient} events\n   * comprehending notifications of connection activity and errors.\n   * <BR>Events for these listeners are executed asynchronously with respect to the code\n   * that generates them. This means that, upon reception of an event, it is possible that\n   * the current state of the client has changed furtherly.\n   * <BR>Note that it is not necessary to implement all of the interface methods for\n   * the listener to be successfully passed to the {@link LightstreamerClient#addListener}\n   * method.\nSTART_NODE_JSDOC_EXCLUDE\n   * <BR>A ClientListener implementation is distributed together with the library:\n   * {@link StatusWidget}.\nEND_NODE_JSDOC_EXCLUDE\n   */\n  function ClientListener() {\n\n  };\n\n  ClientListener.prototype = {\n      /**\n       * Event handler that is called when the Server notifies a refusal on the\n       * client attempt to open a new connection or the interruption of a\n       * streaming connection. In both cases, the {@link ClientListener#onStatusChange}\n       * event handler has already been invoked with a \"DISCONNECTED\" status and\n       * no recovery attempt has been performed. By setting a custom handler, however,\n       * it is possible to override this and perform custom recovery actions.\n       *\n       * @param {Number} errorCode The error code. It can be one of the\n       * following:\n       * <ul>\n       * <li>1 - user/password check failed</li>\n       * <li>2 - requested Adapter Set not available</li>\n       * <li>7 - licensed maximum number of sessions reached\n       * (this can only happen with some licenses)</li>\n       * <li>8 - configured maximum number of sessions reached</li>\n       * <li>9 - configured maximum server load reached</li>\n       * <li>10 - new sessions temporarily blocked</li>\n       * <li>11 - streaming is not available because of Server license\n       * restrictions (this can only happen with special licenses)</li>\n       * <li>21 - a bind request has unexpectedly reached a wrong Server instance, which suggests that a routing issue may be in place</li>\n       * <li>30-41 - the current connection or the whole session has been closed\n       * by external agents; the possible cause may be:\n       * <ul>\n       * <li>The session was closed on the Server side (via software or by\n       * the administrator) (32) or through a client \"destroy\" request (31);</li>\n       * <li>The Metadata Adapter imposes limits on the overall open sessions\n       * for the current user and has requested the closure of the current session\n       * upon opening of a new session for the same user\nSTART_NODE_JSDOC_EXCLUDE\n       * on a different browser window\nEND_NODE_JSDOC_EXCLUDE\n       * (35);</li>\n       * <li>An unexpected error occurred on the Server while the session was in\n       * activity (33, 34);</li>\n       * <li>An unknown or unexpected cause; any code different from the ones\n       * identified in the above cases could be issued.</li>\n       * </ul>\n       * A detailed description for the specific cause is currently not supplied\n       * (i.e. errorMessage is null in this case).</li>\n       * <li>60 - this version of the client is not allowed by the current license terms.</li>\n       * <li>61 - there was an error in the parsing of the server response thus the client cannot continue with the current session.</li>\n       * <li>66 - an unexpected exception was thrown by the Metadata Adapter while authorizing the connection.</li>\n       * <li>68 - the Server could not open or continue with the session because of an internal error.</li>\n       * <li>71 - this kind of client is not allowed by the current license terms.</li>\n       * <li>&lt;= 0 - the Metadata Adapter has refused the user connection;\n       * the code value is dependent on the specific Metadata Adapter\n       * implementation</li>\n       * </ul>\n       * @param {String} errorMessage The description of the error as sent\n       * by the Server.\n       *\n       * @see ConnectionDetails#setAdapterSet\n       * @see ClientListener#onStatusChange\n       */\n      onServerError: function(errorCode, errorMessage) {\n\n      },\n\n      /**\n       * Event handler that receives a notification each time the LightstreamerClient\n       * status has changed. The status changes may be originated either by custom\n       * actions (e.g. by calling {@link LightstreamerClient#disconnect}) or by\n       * internal actions.\n       * <BR/><BR/>The normal cases are the following:\n       * <ul>\n       * <li>After issuing connect(), if the current status is \"DISCONNECTED*\", the\n       * client will switch to \"CONNECTING\" first and\n       * to \"CONNECTED:STREAM-SENSING\" as soon as the pre-flight request receives its\n       * answer.\n       * <BR>As soon as the new session is established, it will switch to\n       * \"CONNECTED:WS-STREAMING\" if the browser/environment permits WebSockets;\n       * otherwise it will switch to \"CONNECTED:HTTP-STREAMING\" if the\n       * browser/environment permits streaming or to \"CONNECTED:HTTP-POLLING\"\n       * as a last resort.\n       * <BR>On the other hand if the status is already \"CONNECTED:*\" a\n       * switch to \"CONNECTING\" is usually not needed.</li>\n       * <li>After issuing disconnect(), the status will switch to \"DISCONNECTED\".</li>\n       * <li>In case of a server connection refusal, the status may switch from\n       * \"CONNECTING\" directly to \"DISCONNECTED\". After that, the\n       * {@link ClientListener#onServerError} event handler will be invoked.</li>\n       * </ul>\n       * <BR/>Possible special cases are the following:\n       * <ul>\n       * <li>In case of Server unavailability during streaming, the status may\n       * switch from \"CONNECTED:*-STREAMING\" to \"STALLED\" (see\n       * {@link ConnectionOptions#setStalledTimeout}).\n       * If the unavailability ceases, the status will switch back to\n       * \"\"CONNECTED:*-STREAMING\"\";\n       * otherwise, if the unavailability persists (see\n       * {@link ConnectionOptions#setReconnectTimeout}),\n       * the status will switch to \"DISCONNECTED:TRYING-RECOVERY\" and eventually to\n       * \"CONNECTED:*-STREAMING\".</li>\n       * <li>In case the connection or the whole session is forcibly closed\n       * by the Server, the status may switch from \"CONNECTED:*-STREAMING\"\n       * or \"CONNECTED:*-POLLING\" directly to \"DISCONNECTED\". After that, the\n       * {@link ClientListener#onServerError} event handler will be invoked.</li>\n       * <li>Depending on the setting in {@link ConnectionOptions#setSlowingEnabled},\n       * in case of slow update processing, the status may switch from\n       * \"CONNECTED:WS-STREAMING\" to \"CONNECTED:WS-POLLING\" or from\n       * \"CONNECTED:HTTP-STREAMING\" to \"CONNECTED:HTTP-POLLING\".</li>\n       * <li>If the status is \"CONNECTED:*-POLLING\" and any problem during an\n       * intermediate poll occurs, the status may switch to \"CONNECTING\" and\n       * eventually to \"CONNECTED:*-POLLING\". The same may hold for the\n       * \"CONNECTED:*-STREAMING\" case, when a rebind is needed.</li>\n       * <li>In case a forced transport was set through\n       * {@link ConnectionOptions#setForcedTransport}, only the related final\n       * status or statuses are possible. Note that if the transport is forced\n       * while a Session is active and this requires a reconnection, the status\n       * may do a preliminary switch to CONNECTED:STREAM-SENSING.</li>\n       * <li>In case of connection problems, the status may switch from any value\n       * to \"DISCONNECTED:WILL-RETRY\" (see {@link ConnectionOptions#setRetryDelay}),\n       * then to \"CONNECTING\" and a new attempt will start.\n       * However, in most cases, the client will try to recover the current session;\n       * hence, the \"DISCONNECTED:TRYING-RECOVERY\" status will be entered\n       * and the recovery attempt will start.</li>\n       * <li>In case of connection problems during a recovery attempt, the status may stay\n       * in \"DISCONNECTED:TRYING-RECOVERY\" for long time, while further attempts are made.\n       * On the other hand, if the connection is successful, the status will do\n       * a preliminary switch to CONNECTED:STREAM-SENSING. If the recovery is finally\n       * unsuccessful, the current session will be abandoned and the status\n       * will switch to \"DISCONNECTED:WILL-RETRY\" before the next attempts.</li>\nSTART_NODE_JSDOC_EXCLUDE\n       * <li>In case the local LightstreamerClient is exploiting the connection of a\n       * different LightstreamerClient (see {@link ConnectionSharing}) and such\n       * LightstreamerClient or its container window is disposed, the status will\n       * switch to \"DISCONNECTED:WILL-RETRY\" unless the current status is \"DISCONNECTED\".\n       * In the latter case it will remain \"DISCONNECTED\".</li>\nEND_NODE_JSDOC_EXCLUDE\n       * </ul>\n       *\n       * <BR>By setting a custom handler it is possible to perform\n       * actions related to connection and disconnection occurrences. Note that\n       * {@link LightstreamerClient#connect} and {@link LightstreamerClient#disconnect},\n       * as any other method, can be issued directly from within a handler.\n       *\n       * @param {String} chngStatus The new status. It can be one of the\n       * following values:\n       * <ul>\n       * <li>\"CONNECTING\" the client has started a connection attempt and is\n       * waiting for a Server answer.</li>\n       * <li>\"CONNECTED:STREAM-SENSING\" the client received a first response from\n       * the server and is now evaluating if a streaming connection is fully\n       * functional. </li>\n       * <li>\"CONNECTED:WS-STREAMING\" a streaming connection over WebSocket has\n       * been established.</li>\n       * <li>\"CONNECTED:HTTP-STREAMING\" a streaming connection over HTTP has\n       * been established.</li>\n       * <li>\"CONNECTED:WS-POLLING\" a polling connection over WebSocket has\n       * been started. Note that, unlike polling over HTTP, in this case only one\n       * connection is actually opened (see {@link ConnectionOptions#setSlowingEnabled}).\n       * </li>\n       * <li>\"CONNECTED:HTTP-POLLING\" a polling connection over HTTP has\n       * been started.</li>\n       * <li>\"STALLED\" a streaming session has been silent for a while,\n       * the status will eventually return to its previous CONNECTED:*-STREAMING\n       * status or will switch to \"DISCONNECTED:WILL-RETRY\" / \"DISCONNECTED:TRYING-RECOVERY\".</li>\n       * <li>\"DISCONNECTED:WILL-RETRY\" a connection or connection attempt has been\n       * closed; a new attempt will be performed (possibly after a timeout).</li>\n       * <li>\"DISCONNECTED:TRYING-RECOVERY\" a connection has been closed and\n       * the client has started a connection attempt and is waiting for a Server answer;\n       * if successful, the underlying session will be kept.</li>\n       * <li>\"DISCONNECTED\" a connection or connection attempt has been closed. The\n       * client will not connect anymore until a new {@link LightstreamerClient#connect}\n       * call is issued.</li>\n       * </ul>\n       *\n       * @see LightstreamerClient#connect\n       * @see LightstreamerClient#disconnect\n       * @see LightstreamerClient#getStatus\n       */\n      onStatusChange: function(chngStatus) {\n      },\n\n      /**\n       * Event handler that receives a notification each time  the value of a property of\n       * {@link LightstreamerClient#connectionDetails} or {@link LightstreamerClient#connectionOptions}\n       * is changed.\nSTART_NODE_JSDOC_EXCLUDE\n       * <BR>Properties of these objects can be modified by direct calls to them, but\n       * also by calls performed on other LightstreamerClient instances sharing the\n       * same connection and by server sent events.\nEND_NODE_JSDOC_EXCLUDE\n       *\n       * @param {String} the name of the changed property.\n       * <BR>Possible values are:\n       * <ul>\n       * <li>adapterSet</li>\n       * <li>serverAddress</li>\n       * <li>user</li>\n       * <li>password</li>\n       * <li>serverInstanceAddress</li>\n       * <li>serverSocketName</li>\n       * <li>sessionId</li>\n       * <li>contentLength</li>\n       * <li>idleTimeout</li>\n       * <li>keepaliveInterval</li>\n       * <li>maxBandwidth</li>\n       * <li>pollingInterval</li>\n       * <li>reconnectTimeout</li>\n       * <li>stalledTimeout</li>\n       * <li>retryDelay</li>\n       * <li>firstRetryMaxDelay</li>\n       * <li>slowingEnabled</li>\n       * <li>forcedTransport</li>\n       * <li>serverInstanceAddressIgnored</li>\n       * <li>cookieHandlingRequired</li>\n       * <li>reverseHeartbeatInterval</li>\n       * <li>earlyWSOpenEnabled</li>\n       * <li>httpExtraHeaders</li>\n       * <li>httpExtraHeadersOnSessionCreationOnly</li>\n       *\n       * </ul>\n       *\n       * @see LightstreamerClient#connectionDetails\n       * @see LightstreamerClient#connectionOptions\n       */\n      onPropertyChange: function(propertyName) {\n      },\n\n// START_NODE_JSDOC_EXCLUDE\n      /**\n       * Event handler that receives a notification in case a connection\n       * sharing is aborted.\n       * A connection sharing can only be aborted if one of the policies specified\n       * in the {@link ConnectionSharing} instance supplied to the\n       * {@link LightstreamerClient#enableSharing} method is \"ABORT\".\n       * <BR>If this event is fired the client will never be able to connect to\n       * the server unless a new call to enableSharing is issued.\n       */\n// END_NODE_JSDOC_EXCLUDE\n      onShareAbort: function() {\n\n      },\n\n      /**\n       * Event handler that receives a notification when the ClientListener instance\n       * is added to a LightstreamerClient through\n       * {@link LightstreamerClient#addListener}.\n       * This is the first event to be fired on the listener.\n       *\n       * @param {LightstreamerClient} lsClient the LightstreamerClient this\n       * instance was added to.\n       */\n      onListenStart: function(lsClient) {\n\n      },\n\n      /**\n       * Event handler that receives a notification when the ClientListener instance\n       * is removed from a LightstreamerClient through\n       * {@link LightstreamerClient#removeListener}.\n       * This is the last event to be fired on the listener.\n       *\n       * @param {LightstreamerClient} lsClient the LightstreamerClient this\n       * instance was removed from.\n       */\n      onListenEnd: function(lsClient) {\n\n      },\n\n// START_NODE_JSDOC_EXCLUDE\n      /**\n       * Notifies that the Server has sent a keepalive message because a streaming connection\n       * is in place and no update had been sent for the configured time\n       * (see {@link ConnectionOptions#setKeepaliveInterval}).\n       * However, note that the lack of both updates and keepalives is already managed by the library\n       * (see {@link ConnectionOptions#setReconnectTimeout} and {@link ConnectionOptions#setStalledTimeout}).\n       */\n// END_NODE_JSDOC_EXCLUDE\n      onServerKeepalive: function() {\n\n      }\n\n  };\n\n\n  /**\n   * This is a dummy constructor not to be used in any case.\n   * @constructor\n   *\n   * @exports ClientMessageListener\n   * @class Interface to be implemented to listen to {@link LightstreamerClient#sendMessage}\n   * events reporting a message processing outcome.\n   * <BR>Events for these listeners are executed asynchronously with respect to the code\n   * that generates them.\n   * <BR>Note that it is not necessary to implement all of the interface methods for\n   * the listener to be successfully passed to the {@link LightstreamerClient#sendMessage}\n   * method. On the other hand, if all of the handlers are implemented the library will\n   * ensure to call one and only one of them per message.\n   */\n  function ClientMessageListener() {\n\n  };\n\n  ClientMessageListener.prototype = {\n    /**\n     * Event handler that is called by Lightstreamer when any notifications\n     * of the processing outcome of the related message haven't been received\n     * yet and can no longer be received.\n     * Typically, this happens after the session has been closed.\n     * In this case, the client has no way of knowing the processing outcome\n     * and any outcome is possible.\n     *\n     * @param {String} originalMessage the message to which this notification\n     * is related.\n     * @param {boolean} sentOnNetwork true if the message was probably sent on the\n     * network, false otherwise.\n     * <BR>Event if the flag is true, it is not possible to infer whether the message\n     * actually reached the Lightstreamer Server or not.\n     */\n    onAbort: function(originalMessage,sentOnNetwork) {\n      return;\n    },\n\n    /**\n     * Event handler that is called by Lightstreamer when the related message\n     * has been processed by the Server but the processing has failed for any\n     * reason. The level of completion of the processing by the Metadata Adapter\n     * cannot be determined.\n     *\n     * @param {String} originalMessage the message to which this notification\n     * is related.\n     */\n    onError: function(originalMessage) {\n      return;\n    },\n\n    /**\n     * Event handler that is called by Lightstreamer to notify that the related\n     * message has been discarded by the Server. This means that the message\n     * has not reached the Metadata Adapter and the message next in the sequence\n     * is considered enabled for processing.\n     *\n     * @param {String} originalMessage the message to which this notification\n     * is related.\n     */\n    onDiscarded: function(originalMessage) {\n      return;\n    },\n\n    /**\n     * Event handler that is called by Lightstreamer when the related message\n     * has been processed by the Server but the expected processing outcome\n     * could not be achieved for any reason.\n     *\n     * @param {String} originalMessage the message to which this notification\n     * is related.\n     * @param {Number} code the error code sent by the Server. It can be one\n     * of the following:\n     * <ul>\n     * <li>&lt;= 0 - the Metadata Adapter has refused the message; the code\n     * value is dependent on the specific Metadata Adapter implementation.</li>\n     * </ul>\n     * @param {String} message the description of the error sent by the Server.\n     */\n    onDeny: function(originalMessage,code, message) {\n      return;\n    },\n\n    /**\n     * Event handler that is called by Lightstreamer when the related message\n     * has been processed by the Server with success.\n     *\n     * @param {String} originalMessage the message to which this notification\n     * is related.\n     */\n    onProcessed: function(originalMessage) {\n      return;\n    }\n  };\n\n  LightstreamerClient[\"addCookies\"] = LightstreamerClient.addCookies;\n  LightstreamerClient[\"getCookies\"] = LightstreamerClient.getCookies;\n  LightstreamerClient[\"setLoggerProvider\"] = LightstreamerClient.setLoggerProvider;\n  LightstreamerClient[\"LIB_NAME\"] = LightstreamerClient.LIB_NAME;\n  LightstreamerClient[\"LIB_VERSION\"] = LightstreamerClient.LIB_VERSION;\n  LightstreamerClient.prototype[\"connect\"] = LightstreamerClient.prototype.connect;\n  LightstreamerClient.prototype[\"disconnect\"] = LightstreamerClient.prototype.disconnect;\n  LightstreamerClient.prototype[\"getStatus\"] = LightstreamerClient.prototype.getStatus;\n  LightstreamerClient.prototype[\"sendMessage\"] = LightstreamerClient.prototype.sendMessage;\n  LightstreamerClient.prototype[\"getSubscriptions\"] = LightstreamerClient.prototype.getSubscriptions;\n  LightstreamerClient.prototype[\"subscribe\"] = LightstreamerClient.prototype.subscribe;\n  LightstreamerClient.prototype[\"unsubscribe\"] = LightstreamerClient.prototype.unsubscribe;\n  LightstreamerClient.prototype[\"addListener\"] = LightstreamerClient.prototype.addListener;\n  LightstreamerClient.prototype[\"removeListener\"] = LightstreamerClient.prototype.removeListener;\n  LightstreamerClient.prototype[\"getListeners\"] = LightstreamerClient.prototype.getListeners;\n  LightstreamerClient.prototype[\"registerForMpn\"] = LightstreamerClient.prototype.registerForMpn;\n  LightstreamerClient.prototype[\"subscribeMpn\"] = LightstreamerClient.prototype.subscribeMpn;\n  LightstreamerClient.prototype[\"unsubscribeMpn\"] = LightstreamerClient.prototype.unsubscribeMpn;\n  LightstreamerClient.prototype[\"unsubscribeMpnSubscriptions\"] = LightstreamerClient.prototype.unsubscribeMpnSubscriptions;\n  LightstreamerClient.prototype[\"findMpnSubscription\"] = LightstreamerClient.prototype.findMpnSubscription;\n  LightstreamerClient.prototype[\"getMpnSubscriptions\"] = LightstreamerClient.prototype.getMpnSubscriptions;\n  LightstreamerClient.prototype[\"handleRemoteAdapterStatus\"] = LightstreamerClient.prototype.handleRemoteAdapterStatus;\n\n  LightstreamerClient.prototype[\"enableSharing\"] = LightstreamerClient.prototype.enableSharing;\n  LightstreamerClient.prototype[\"isMaster\"] = LightstreamerClient.prototype.isMaster;\n\n  LightstreamerClient.prototype[\"unloadEvent\"] = LightstreamerClient.prototype.unloadEvent;\n  LightstreamerClient.prototype[\"preUnloadEvent\"] = LightstreamerClient.prototype.unloadEvent;\n\n\n  Inheritance(LightstreamerClient,EventDispatcher,false,true);\n  Inheritance(LightstreamerClient,Setter,true,true);\n  return LightstreamerClient;\n})();\n\n\n","var ws = require('faye-websocket');\nvar xhrc = require('xmlhttprequest-cookie');\nvar urlModule = require('url');\n\nexport default {\n    NodeWS: ws['Client'],\n    NodeXHR: xhrc['XMLHttpRequest'],\n    /**\n     * Extracts cookies from the internal cookie container with reference\n     * to a request that should use them.\n     *\n     * @param {String} _url url of the request to be issued\n     *\n     * @returns {Array} String values of the various cookies to be packed into\n     * a Cookie header, as though they had been received via Set-Cookie\n     */\n    getGlobalCookiesForNode: function(_url) {\n        var cookieArray = [];\n        if (xhrc) {\n            if (_url == null) {\n                var cookieJarContents = xhrc['CookieJar']['save']();\n                var splitArray = cookieJarContents.split(\"\\r\\n\");\n                splitArray.forEach(function(cookie, i, array) {\n                    if (cookie != '') {\n                        cookieArray.push(cookie);\n                    }\n                });\n            } else {\n                var url = urlModule.parse(_url);\n                // BEGIN ported from cookie_send in xmlhttprequest-cookie\n                var cookies = xhrc['CookieJar']['findFuzzy'](url.hostname, url.pathname);\n                for (var i = 0; i < cookies.length; i++) {\n                    if (cookies[i]['secure'] && url.protocol !== \"https:\")\n                        continue;\n                    if (cookies[i]['httponly'] && url.protocol.match(/^https?:$/i) === null)\n                        continue;\n                // END ported from cookie_send in xmlhttprequest-cookie\n                    cookieArray.push(cookies[i]);\n                }\n            }\n        }\n        return cookieArray;\n    },\n    /**\n     * Integrates the internal cookie container with cookies obtained by a request.\n     *\n     * @param {String} _url url of the request that produced the cookies\n     * @param {Array} cookies String values of the various Set-Cookie headers received\n     */\n    addGlobalCookiesForNode: function(_url, cookies) {\n        if (xhrc) {\n            // STEP 1: concatenate cookie definitions separating them by '\\r\\n'\n            // (this is a requirement of CookieJar.load used below)\n            var cookieDefs = '';\n            cookies.forEach(function(cookie, i, array) {\n                cookieDefs += \"\\r\\n\" + cookie;\n            });\n            // STEP 2: append cookie definitions to the cookie jar contents\n            if (cookieDefs.length > 0) {\n                var cookieJarContents = xhrc['CookieJar']['save']();\n                cookieJarContents += cookieDefs;\n                xhrc['CookieJar']['load'](cookieJarContents);\n            }\n        }\n    }\n};","import ASSERT from \"../../src-test/ASSERT\";\nimport LoggerManager from \"../../src-log/LoggerManager\";\n    \n    var log = LoggerManager.getLoggerProxy(\"assertions\");\n    \n    /**\n     * Assertion utilities.\n     * \n     * @since May 2018\n     */\n    var Assertions = {\n            assert: function(cond, msg) {\n                if (! cond) {\n                   this.fail(msg);\n                }\n            },\n            \n            assertNotNull: function(val, msg) {\n                if (val == null) {\n                    this.fail(msg);\n                }\n            },\n            \n            assertNull: function(val, msg) {\n                if (val != null) {\n                    this.fail(msg);\n                }\n            },\n            \n            assertEquals: function(a, b, msg) {\n                if (a !== b) {\n                    this.fail(msg + \": Expected \" + a + \" but found \" + b);\n                }\n            },\n            \n            implies: function(a, b, msg) {\n                this.assert(! a || b, msg);\n            },\n            \n            fail: function(msg) {\n                if (msg != null) {\n                    log.logError(msg);\n                }\n                ASSERT.fail();\n            },\n            \n            verifyOk: function(a, msg) {\n                if (! ASSERT.verifyOk(a)) {\n                    if (msg != null) {\n                        log.logError(msg);\n                    }\n                }\n            },\n            \n            verifyNotOk: function(a, msg) {\n                if (! ASSERT.verifyNotOk(a)) {\n                    if (msg != null) {\n                        log.logError(msg);\n                    }\n                }\n            },\n            \n            verifyValue: function(a, b, msg) {\n                if (! ASSERT.verifyValue(a, b, null)) {\n                    if (msg != null) {\n                        log.logError(msg);\n                    }\n                }\n            },\n            \n            verifyDiffValue: function(a, b, msg) {\n                if (! ASSERT.verifyDiffValue(a, b, null)) {\n                    if (msg != null) {\n                        log.logError(msg);\n                    }\n                }\n            }\n    };\n    \n    export default Assertions;\n","import SecondLevelSubscriptionListener from \"./subscriptions/SecondLevelSubscriptionListener\";\nimport ItemUpdate from \"./subscriptions/ItemUpdate\";\nimport ListDescriptor from \"./descriptors/ListDescriptor\";\nimport NameDescriptor from \"./descriptors/NameDescriptor\";\nimport Inheritance from \"../src-tool/Inheritance\";\nimport Setter from \"../src-tool/Setter\";\nimport Matrix from \"../src-tool/Matrix\";\nimport Executor from \"../src-tool/Executor\";\nimport Constants from \"./Constants\";\nimport EventDispatcher from \"../src-tool/EventDispatcher\";\nimport IllegalArgumentException from \"../src-tool/IllegalArgumentException\";\nimport IllegalStateException from \"../src-tool/IllegalStateException\";\nimport LoggerManager from \"../src-log/LoggerManager\";\nimport Utils from \"./Utils\";\nimport Assertions from \"./utils/Assertions\";\nimport Helpers from \"../src-tool/Helpers\";\nimport RealMaxFrequencyManager from \"./subscriptions/RealMaxFrequencyManager\";\nimport ValidationUtils from \"./utils/ValidationUtils\";\nimport ASSERT from \"../src-test/ASSERT\";\n\nexport default /*@__PURE__*/(function() {\n  var TABLE_OFF = 1;\n  var TABLE_WAITING = 2;\n  var TABLE_SUBSCRIBING = 3;\n  var TABLE_PUSHING = 4;\n  var TABLE_PAUSED = 5;\n  \n  var modeCheck = {\n      \"COMMAND\": true,\n      \"RAW\": true,\n      \"MERGE\": true,\n      \"DISTINCT\": true};\n  \n  \n  var SIMPLE = 1;\n  var METAPUSH = 2;\n  var MULTIMETAPUSH = 3;\n  \n  var UNCHANGED = Constants.UNCHANGED;\n  \n  var subscriptionsLogger = LoggerManager.getLoggerProxy(Constants.SUBSCRIPTIONS);\n  \n  var INVALID_MODE =  \"The given value is not a valid subscription mode. Admitted values are MERGE, DISTINCT, RAW, COMMAND\";\n  \n  var INVALID_SECOND_LEVEL_KEY = \"The received key value is not a valid name for an Item\";\n\n  var NO_ITEMS = \"Invalid Subscription, please specify an item list or item group\";\n  var NO_FIELDS = \"Invalid Subscription, please specify a field list or field schema\";\n  \n  var IS_ALIVE = \"Cannot modify an active Subscription, please unsubscribe before applying any change\";\n  var NOT_ALIVE = \"Subscription is not active\";\n  \n  var ILLEGAL_FREQ_EXC = \"Can't change the frequency from/to 'unfiltered' or to null while the Subscription is active\";\n  \n  var NUMERIC_DISTINCT_ONLY = \"Numeric values are only allowed when the subscription mode is DISTINCT\";\n  var RAW_NO_SNAPSHOT = \"Snapshot is not permitted if RAW was specified as mode\";\n  var REQ_SNAP_EXC = \"The given value is not valid for this setting; use null, 'yes', 'no' or a positive number instead\";\n  \n  var NO_SUB_SCHEMA_NOR_LIST = \"The second level of this Subscription was not initiated\";\n \n  var NO_SECOND_LEVEL = \"Second level field list is only available on COMMAND Subscriptions\";\n  var NO_COMMAND = \"This method can only be used on COMMAND subscriptions\";\n\n  function sortFun(a,b) {\n    return a-b;\n  }\n  \n\n  /**\n   * Creates an object to be used to describe a Subscription that is going\n   * to be subscribed to through Lightstreamer Server.\n   * The object can be supplied to {@link LightstreamerClient#subscribe} and\n   * {@link LightstreamerClient#unsubscribe}, in order to bring the Subscription to\n   * \"active\" or back to \"inactive\" state.\n   * <BR>Note that all of the methods used to describe the subscription to the server\n   * can only be called while the instance is in the \"inactive\" state; the only\n   * exception is {@link Subscription#setRequestedMaxFrequency}.\n   * @constructor\n   * \n   * @exports Subscription\n   * \n   * @throws {IllegalArgumentException} If no or invalid subscription mode is \n   * passed.\n   * @throws {IllegalArgumentException} If the list of items is specified while\n   * the list of fields is not, or viceversa.\n   * @throws {IllegalArgumentException} If the specified \"Item List\" or \"Field List\"\n   * is not valid; see {@link Subscription#setItems} and {@link Subscription#setFields} for details.\n   *\n   * @param {String} subscriptionMode the subscription mode for the\n   * items, required by Lightstreamer Server. Permitted values are:\n   * <ul>\n   * <li>MERGE</li>\n   * <li>DISTINCT</li>\n   * <li>RAW</li>\n   * <li>COMMAND</li>\n   * </ul>\n   * \n   * @param {String|String[]} [items] an array of Strings containing a list of items to\n   * be subscribed to through the server. In case of a single-item subscription the String\n   * containing the item name can be passed in place of the array; both of the \n   * following examples represent a valid subscription:\n   * <BR><code>new Subscription(mode,\"item1\",fieldList);</code>\n   * <BR><code>new Subscription(mode,[\"item1\",\"item2\"],fieldList);</code>\n   * <BR>It is also possible to pass null (or nothing) and specify the\n   * \"Item List\" or \"Item Group\" later through {@link Subscription#setItems} and\n   * {@link Subscription#setItemGroup}. In this case the fields parameter must not be specified.\n   \n   * \n   * @param {String[]} [fields] An array of Strings containing a list of fields \n   * for the items to be subscribed to through Lightstreamer Server.\n   * <BR>It is also possible to pass null (or nothing) and specify the\n   * \"Field List\" or \"Field Schema\" later through {@link Subscription#setFields} and\n   * {@link Subscription#setFieldSchema}. In this case the items parameter must not be specified.\n   *\n   * @class Class representing a Subscription to be submitted to a Lightstreamer\n   * Server. It contains subscription details and the listeners needed to process the\n   * real-time data. \n   * <BR>After the creation, a Subscription object is in the \"inactive\"\n   * state. When a Subscription object is subscribed to on a {@link LightstreamerClient} \n   * object, through the {@link LightstreamerClient#subscribe} method, its state \n   * becomes \"active\". This means that the client activates a subscription to the \n   * required items through Lightstreamer Server and the Subscription object begins \n   * to receive real-time events.\n   * \n   * <BR>A Subscritpion can be configured to use either an Item Group or an Item List to \n   * specify the items to be subscribed to and using either a Field Schema or Field List\n   * to specify the fields.\n   * <BR>\"Item Group\" and \"Item List\" are defined as follows:\n   * <ul>\n   * <li>\"Item Group\": an Item Group is a String identifier representing a list of items.\n   * Such Item Group has to be expanded into a list of items by the getItems method of the\n   * MetadataProvider of the associated Adapter Set. When using an Item Group, items in the \n   * subscription are identified by their 1-based index within the group.\n   * <BR>It is possible to configure the Subscription to use an \"Item Group\" using the {@link Subscription#setItemGroup}\n   * method.\n   * </li> \n   * <li>\"Item List\": an Item List is an array of Strings each one representing an item.\n   * For the Item List to be correctly interpreted a LiteralBasedProvider or a MetadataProvider\n   * with a compatible implementation of getItems has to be configured in the associated Adapter Set.\n   * <BR>Note that no item in the list can be empty, can contain spaces or can \n   * be a number. \n   * <BR>When using an Item List, items in the subscription are identified by their name or by\n   * their 1-based index within the list.\n   * <BR>It is possible to configure the Subscription to use an \"Item List\" using the {@link Subscription#setItems}\n   * method or by specifying it in the constructor.\n   * </li> \n   * </ul>\n   * <BR>\"Field Schema\" and \"Field List\" are defined as follows:\n   * <ul>\n   * <li>\"Field Schema\": a Field Schema is a String identifier representing a list of fields.\n   * Such Field Schema has to be expanded into a list of fields by the getFields method of the\n   * MetadataProvider of the associated Adapter Set. When using a Field Schema, fields in the \n   * subscription are identified by their 1-based index within the schema.\n   * <BR>It is possible to configure the Subscription to use a \"Field Schema\" using the {@link Subscription#setFieldSchema}\n   * method.\n   * </li>\n   * <li>\"Field List\": a Field List is an array of Strings each one representing a field.\n   * For the Field List to be correctly interpreted a LiteralBasedProvider or a MetadataProvider\n   * with a compatible implementation of getFields has to be configured in the associated Adapter Set.\n   * <BR>Note that no field in the list can be empty or can contain spaces. \n   * <BR>When using a Field List, fields in the subscription are identified by their name or by\n   * their 1-based index within the list.\n   * <BR>It is possible to configure the Subscription to use a \"Field List\" using the {@link Subscription#setFields}\n   * method or by specifying it in the constructor.\n   * </li> \n   * </ul>\n   */\n  var Subscription = function(subscriptionMode, items, fields) {\n\n    //admitted calls:\n    //mode, item, fields\n    //mode, items, fields\n    //mode\n    \n    this._callSuperConstructor(Subscription);\n    \n    subscriptionMode = new String(subscriptionMode).toUpperCase();\n    if (!subscriptionMode || !modeCheck[subscriptionMode]) {\n      throw new IllegalArgumentException(INVALID_MODE);\n    }\n    this._mode = subscriptionMode;\n    \n    this.itemList = null;\n    this.itemGroup = null;\n    this.itemDescriptor = null;\n\n    this.fieldList = null;\n    this.fieldSchema = null;\n    this.fieldDescriptor = null;\n    \n    //DEFAULT: yes if mode is MERGE, DISTINCT, or COMMAND; null if mode is RAW \n    this.isRequiredSnapshot = subscriptionMode === \"RAW\" ? null : \"yes\";\n    this.requestedMaxFrequency = null;\n    this.requestedBufferSize = null;\n    this._start = null;\n    this._end = null;\n    this._selector = null;\n    this.dataAdapter = null;\n    \n    this.tableNumber = null;\n   \n    this.requestParams = null;\n    \n    /*\n     * The real max frequency, i.e. the argument of a CONF message.\n     */\n    this.realMaxFrequency = new RealMaxFrequencyManager.Frequency(null);\n    /*\n     * An instance of RealMaxFrequencyManager.\n     */\n    this.realMaxFrequencyManager = null;\n    \n/////////////////\n  \n    this.oldValuesByItem = new Matrix(); \n    \n    this.oldValuesByKey = new Matrix(); \n    \n/////////////////    \n    \n    this.handler = null;\n\n    this.tablePhaseType = TABLE_OFF; \n    this.tablePhase = 0;  \n    this._id = null;\n\n    this.onCount = 0;\n    this.sCount = 0;\n    \n    this.setBehavior(this._mode == Constants.COMMAND ? METAPUSH : SIMPLE);\n    \n/////////////////To manage Metapush\n   \n    this.commandCode = null;\n    this.keyCode = null;\n    \n/////////////////To manage MultiMetapush\n \n    this.underDataAdapter = null;\n    this.subTables = new Matrix();\n    \n    this.subFieldList = null;\n    this.subFieldSchema = null;\n    this.subFieldDescriptor = null;\n    \n    //completely useless (may directly use the constant)\n    //I save it here so that I can modifiy it to DISTINCT in the SubscriptionUnusualEvents test.\n    this.subMode = Constants.MERGE;\n\n/////////////////Setup   \n    if (items) {\n      if (!fields || !Helpers.isArray(fields)) {\n        throw new IllegalArgumentException(ValidationUtils.NO_VALID_FIELDS);\n      }\n      \n      \n      if (Helpers.isArray(items)) {\n        //list of items\n        this.setItems(items);\n      } else {\n        this.setItems([items]);\n      }\n      \n      this.setFields(fields);\n      \n    } else if (fields) {\n      throw new IllegalArgumentException(ValidationUtils.YES_FIELDS_NO_ITEMS);\n    }\n    \n  };\n  \n  Subscription.prototype = {\n      \n    toString: function() {\n      return [\"[\",\"Subscription\",this.tablePhaseType,this.tablePhase,this._id,this.tableNumber,\"]\"].join(\"|\");\n    },\n    \n//table status events    \n    \n    cleanData: function() {\n      //called at the end of a pushing life (onRemove and onPause), empties structures that will be reinited on the onSubmission\n      this.tableNumber = null;\n      \n      this.oldValuesByItem = new Matrix(); \n      this.oldValuesByKey = new Matrix(); \n      this.snapshotByItem = null;\n      \n      //resets the schema size\n      this.fieldDescriptor.setSize(0);\n      this.itemDescriptor.setSize(0);\n      \n      \n      if (this.behavior == MULTIMETAPUSH) {\n        this.fieldDescriptor.setSubDescriptor(null);\n        this.subTables = new Matrix();\n      }\n\n      subscriptionsLogger.logDebug(\"Subscription reset\",this);\n    },\n    \n    onAdd: function(_id, nGen, handler) {\n      this.notAliveCheck();\n      if (!this.itemDescriptor) {\n        throw new IllegalArgumentException(NO_ITEMS);\n      }\n      if (!this.fieldDescriptor) {\n        throw new IllegalArgumentException(NO_FIELDS);\n      }\n      \n      \n      this.tablePhaseType = TABLE_PAUSED;\n      this._id = _id;\n      this.handler = handler;\n          \n      this.onCount++;\n    //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n      Assertions.verifyValue(this.onCount,1,\"Wrong count while adding\");\n    //>>excludeEnd(\"debugExclude\");\n      \n\n      subscriptionsLogger.logInfo(\"Subscription entered the active state\",this);\n      \n      return true;\n    },\n    \n    onSubmission: function() {\n      this.tablePhaseType = TABLE_WAITING;\n\n      subscriptionsLogger.logDebug(\"Subscription waiting to be sent to server\",this);\n    },\n    \n    onTableNumber: function(tableNum) {\n          this.tableNumber = tableNum;\n          this.tablePhaseType = TABLE_SUBSCRIBING;\n          \n          subscriptionsLogger.logDebug(\"Subscription queued to be sent to server\",this);        \n    },\n    \n    onPause: function() {\n      //called after an onSessionEnd, remove session related data (eg received push...)\n      var unsub = this.isPushing();\n      \n      this.tablePhaseType = TABLE_PAUSED;\n      \n      this.cleanData();\n      \n      if (unsub) {\n        this.onEndPush();\n      }\n       \n      subscriptionsLogger.logDebug(\"Subscription is now on hold\",this);\n    },\n    \n    onRemove: function() {\n      this.isAliveCheck();\n      \n      var unsub = this.isPushing();\n      \n      this.tablePhaseType = TABLE_OFF; \n      this._id = null;\n      delete(this.requestParams);\n      \n      if (this.behavior == MULTIMETAPUSH) {\n        this.removeSubTables();\n      }\n      \n      this.cleanData();\n      \n      this.onCount--;\n    //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n      Assertions.verifyValue(this.onCount,0, \"Wrong count while removing\");\n    //>>excludeEnd(\"debugExclude\");\n      if (unsub) {\n        this.onEndPush();\n      }\n      \n      this.handler = null;\n      \n      subscriptionsLogger.logDebug(\"Subscription exits the active status; it can now be modified\",this);\n      \n    },\n\n    onStartPush: function(kPos,cPos,itms,flds) {\n      this.tablePhaseType = TABLE_PUSHING;\n      \n      this.sCount++;\n    //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n      Assertions.verifyValue(this.sCount,1, \"Wrong count starting push\");\n    //>>excludeEnd(\"debugExclude\");\n      subscriptionsLogger.logInfo(\"Subscription is now subscribed to\",this);\n      \n      if (this.behavior == MULTIMETAPUSH) {\n        this.fieldDescriptor.setSubDescriptor(this.subFieldDescriptor);\n      }\n      \n      if (this.fieldSchema && this.behavior != SIMPLE) {\n        this.setServerSentMetapushFields(cPos, kPos);\n      }\n      \n      this.itemDescriptor.setSize(itms);\n      this.fieldDescriptor.setSize(flds);\n      \n      this.snapshotByItem = [];\n      for (var i = 1; i <= itms; i++) {\n        this.snapshotByItem[i] = new SnapshotManager(this);  \n      }\n      \n      //notify table start\n      this.dispatchEvent(\"onSubscription\");\n      \n    },\n    \n    onStopPush: function() {\n      //onEndPush sends the unsubscription notifications\n    },\n    \n    onEndPush: function() {\n      \n      this.sCount--;\n    //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n      Assertions.verifyValue(this.sCount,0, \"Wrong count ending push\");\n    //>>excludeEnd(\"debugExclude\");\n      subscriptionsLogger.logInfo(\"Subscription is not subscribed to anymore\",this);\n      \n      //notify table end\n      this.dispatchEvent(\"onUnsubscription\");\n        \n    },\n    \n    removeSubTables: function() {\n      var that = this;\n      this.subTables.forEachElement(function(el,item,key) {\n        that.removeSubTable(item,key);\n      });\n    },\n    \n    removeItemSubTables: function(_item) {\n      var that = this;\n      this.subTables.forEachElementInRow(function(el,item,key) {\n        that.removeSubTable(item,key);\n      });\n    },\n    \n    getTableNumber: function() {\n      return this.tableNumber;\n    },\n    \n    getTablePhase: function() {\n      return this.tablePhase;\n    },\n    \n    getRequestParams: function() {\n      this.generateRequest();\n      return this.requestParams;\n    },\n\n    /*private*/ generateMaxFrequencyParam: function() {\n      if (this.requestedMaxFrequency != null) {\n        var rmf = this.requestedMaxFrequency;\n        return {\"LS_requested_max_frequency\": rmf};\n      }\n      return {};\n    },\n    \n    /*private*/ generateRequest: function() {\n      \n      var req = {\n          \"LS_mode\": this._mode,\n          \"LS_group\": encodeURIComponent(this.itemDescriptor.getComposedString()),\n          \"LS_schema\": encodeURIComponent(this.fieldDescriptor.getComposedString())\n      };\n      \n      if (this.dataAdapter != null) {\n        req[\"LS_data_adapter\"]= encodeURIComponent(this.dataAdapter);\n      }\n    \n      if (this._selector != null) {\n        req[\"LS_selector\"]= encodeURIComponent(this._selector);\n      }\n  \n      if (this._start != null) {\n        req[\"LS_start\"]=this._start;\n      }\n      if (this._end != null) {\n        req[\"LS_end\"]=this._end;\n      }\n      if (this.isRequiredSnapshot != null) {\n        req[\"LS_snapshot\"]= this.isRequiredSnapshot === \"yes\" ? \"true\" : (this.isRequiredSnapshot === \"no\" ? \"false\" : this.isRequiredSnapshot);\n      }\n      \n      //LS_requested_max_frequency\n      Utils.extendObj(req,this.generateMaxFrequencyParam());\n\n      \n      if (this.requestedBufferSize != null) {\n        var rbs = this.requestedBufferSize;\n        if (rbs == \"unlimited\" || rbs > 0) {\n          req[\"LS_requested_buffer_size\"]=rbs;\n        }\n      }\n      \n      subscriptionsLogger.logDebug(\"Subscription request generated\",this);\n      \n      this.requestParams = req;\n      \n      return this.requestParams;\n    },\n    \n    setSchemaReadMetapushFields: function() {\n      if (this._mode != Constants.COMMAND || this.fieldList == null) {\n        return;\n      }\n      \n      this.commandCode = this.fieldList.getPos(\"command\"); \n      this.keyCode = this.fieldList.getPos(\"key\");\n      \n      if (!this.commandCode || !this.keyCode) {\n        throw new IllegalArgumentException(\"A field list for a COMMAND subscription must contain the key and command fields\");\n      }\n      \n    },\n   \n    setServerSentMetapushFields: function(commandPos, keyPos) {\n      subscriptionsLogger.logDebug(\"Received position of COMMAND and KEY fields from server\",this,commandPos,keyPos);\n      \n      this.commandCode = commandPos; \n      this.keyCode = keyPos;\n    },\n    \n    getSubscriptionId: function() {\n      return this._id;\n    },\n    \n    notAliveCheck: function() {\n      if (this.isActive()) {\n        throw new IllegalStateException(IS_ALIVE);\n      }\n    },\n    \n    isAliveCheck: function() {\n      if (!this.isActive()) {\n        throw new IllegalStateException(NOT_ALIVE);\n      }\n    },\n    \n    secondLevelCheck: function() {\n      if (this._mode != Constants.COMMAND) {\n        throw new IllegalStateException(NO_SECOND_LEVEL);\n      }\n    },\n    \n    commandCheck: function() {\n      if (this._mode != Constants.COMMAND) {\n        throw new IllegalStateException(NO_COMMAND);\n      }\n    },\n    \n//////////////////phases, see https://docs.google.com/a/lightstreamer.com/drawings/d/1SsbEMF78re0ASAgByUhy5EQeKWjTG9FUkGR4zMGhtSc/edit?hl=en_US\n    \n    isOff: function() {\n      return this.tablePhaseType == TABLE_OFF;\n    },\n    isWaiting: function() {\n      return this.tablePhaseType == TABLE_WAITING;\n    },\n    isSubscribing: function() {\n      return this.tablePhaseType == TABLE_SUBSCRIBING;\n    },\n    isPushing: function() {\n      return this.tablePhaseType == TABLE_PUSHING;\n    },\n    isPaused: function() {\n      return this.tablePhaseType == TABLE_PAUSED;\n    },\n    \n  \n    /**  \n     * Inquiry method that checks if the Subscription is currently \"active\" or not.\n     * Most of the Subscription properties cannot be modified if a Subscription is \"active\".\n     * <BR>The status of a Subscription is changed to \"active\" through the  \n     * {@link LightstreamerClient#subscribe} method and back to \"inactive\" through the\n     * {@link LightstreamerClient#unsubscribe} one.\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can be called at any time.</p>\n     * \n     * @return {boolean} true/false if the Subscription is \"active\" or not.\n     * \n     * @see LightstreamerClient#subscribe\n     * @see LightstreamerClient#unsubscribe\n     */\n    isActive: function() {\n      return this.tablePhaseType != TABLE_OFF;\n    },\n    \n    /**  \n     * Inquiry method that checks if the Subscription is currently subscribed to\n     * through the server or not.\n     * <BR>This flag is switched to true by server sent Subscription events, and \n     * back to false in case of client disconnection, \n     * {@link LightstreamerClient#unsubscribe} calls and server sent unsubscription\n     * events. \n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can be called at any time.</p>\n     * \n     * @return {boolean} true/false if the Subscription is subscribed to\n     * through the server or not.\n     */\n    isSubscribed: function() {\n      return this.isPushing(); \n    },\n   \n    /**\n     * Setter method that sets the \"Item List\" to be subscribed to through \n     * Lightstreamer Server.\n     * <BR>Any call to this method will override any \"Item List\" or \"Item Group\"\n     * previously specified.\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can only be called while the Subscription\n     * instance is in its \"inactive\" state.</p>\n     * \n     * @throws {IllegalArgumentException} if the given object is not an array.\n     * @throws {IllegalArgumentException} if any of the item names in the \"Item List\"\n     * contains a space or is a number or is empty/null.\n     * @throws {IllegalStateException} if the Subscription is currently \n     * \"active\".\n     * \n     * @param {String[]} items An array of Strings containing an \"Item List\" to\n     * be subscribed to through the server. \n     */\n    setItems: function(items) {\n      this.notAliveCheck();\n      \n      ValidationUtils.checkItemNames(items,\"An item\");\n      \n      this.itemList = items == null ? null : new ListDescriptor(items);\n      this.itemGroup = null;\n      this.itemDescriptor = this.itemList; \n\n    },\n    \n    /**\n     * Inquiry method that can be used to read the \"Item List\" specified for this\n     * Subscription.\n     * <BR>Note that if a single item was specified in the constructor, this method\n     * will return an array of length 1 containing such item.\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can only be called if the Subscription has\n     * been initialized with an \"Item List\".\n     * </p>\n     * \n     * @throws {IllegalStateException} if the Subscription was initialized\n     * with an \"Item Group\" or was not initialized at all.\n     * \n     * @return {String[]} the \"Item List\" to be subscribed to through the server. \n     */\n    getItems: function() {\n      if (!this.itemList) {\n        if (this.itemGroup) {\n          throw new IllegalStateException(ValidationUtils.USE_GET_ITEM_GROUP);\n        } else  {\n          throw new IllegalStateException(ValidationUtils.NO_GROUP_NOR_LIST);\n        }\n      }\n      return this.itemList.getOriginal();\n    },\n    \n    /**\n     * Setter method that sets the \"Item Group\" to be subscribed to through \n     * Lightstreamer Server.\n     * <BR>Any call to this method will override any \"Item List\" or \"Item Group\"\n     * previously specified.\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can only be called while the Subscription\n     * instance is in its \"inactive\" state.</p>\n     * \n     * @throws {IllegalStateException} if the Subscription is currently \n     * \"active\".\n     * \n     * @param {String} groupName A String to be expanded into an item list by the\n     * Metadata Adapter. \n     */\n    setItemGroup: function(groupName) {\n      this.notAliveCheck();\n      \n      this.itemList = null;\n      this.itemGroup = groupName == null ? null : new NameDescriptor(groupName);\n      this.itemDescriptor = this.itemGroup;\n    },\n\n    /**\n     * Inquiry method that can be used to read the item group specified for this\n     * Subscription.\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can only be called if the Subscription has\n     * been initialized using an \"Item Group\"\n     * </p>\n     *\n     * @throws {IllegalStateException} if the Subscription was initialized\n     * with an \"Item List\" or was not initialized at all.\n     * \n     * @return {String} the \"Item Group\" to be subscribed to through the server. \n     */\n    getItemGroup: function() {\n      if (!this.itemGroup) {\n        if (this.itemList) {\n          throw new IllegalStateException(ValidationUtils.USE_GET_ITEMS);\n        } else {\n          throw new IllegalStateException(ValidationUtils.NO_GROUP_NOR_LIST);\n        }\n      }\n      return this.itemGroup.getOriginal();\n    },\n    \n    /**\n     * Setter method that sets the \"Field List\" to be subscribed to through \n     * Lightstreamer Server.\n     * <BR>Any call to this method will override any \"Field List\" or \"Field Schema\"\n     * previously specified.\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can only be called while the Subscription\n     * instance is in its \"inactive\" state.</p>\n     * \n     * @throws {IllegalArgumentException} if the given object is not an array.\n     * @throws {IllegalArgumentException} if any of the field names in the list\n     * contains a space or is empty/null.\n     * @throws {IllegalStateException} if the Subscription is currently \n     * \"active\".\n     * \n     * @param {String[]} fields An array of Strings containing a list of fields to\n     * be subscribed to through the server. \n     */\n    setFields: function(fields) {\n      this.notAliveCheck();\n      \n      ValidationUtils.checkFieldNames(fields,\"A field\");\n      \n      this.fieldList =  fields == null ? null : new ListDescriptor(fields);\n      this.fieldSchema = null;\n      this.fieldDescriptor = this.fieldList;\n      \n      this.setSchemaReadMetapushFields();\n      \n    },\n\n    /**\n     * Inquiry method that can be used to read the \"Field List\" specified for this\n     * Subscription.\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can only be called if the Subscription has\n     * been initialized using a \"Field List\". \n     * </p>\n     * \n     * @throws {IllegalStateException} if the Subscription was initialized\n     * with a \"Field Schema\" or was not initialized at all.\n     * \n     * @return {String[]} the \"Field List\" to be subscribed to through the server. \n     */\n    getFields: function() {\n      if (!this.fieldList) {\n        if (this.fieldSchema) {\n          throw new IllegalStateException(ValidationUtils.USE_GET_FIELD_SCHEMA);\n        } else {\n          throw new IllegalStateException(ValidationUtils.NO_SCHEMA_NOR_LIST);\n        }\n      }\n      return this.fieldList.getOriginal();\n    },\n    \n    /**\n     * Setter method that sets the \"Field Schema\" to be subscribed to through \n     * Lightstreamer Server.\n     * <BR>Any call to this method will override any \"Field List\" or \"Field Schema\"\n     * previously specified.\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can only be called while the Subscription\n     * instance is in its \"inactive\" state.</p>\n     * \n     * @throws {IllegalStateException} if the Subscription is currently \n     * \"active\".\n     * \n     * @param {String} schemaName A String to be expanded into a field list by the\n     * Metadata Adapter. \n     */\n    setFieldSchema: function(schemaName) {\n      this.notAliveCheck();\n      \n      this.fieldList = null;\n      this.fieldSchema = schemaName == null ? null : new NameDescriptor(schemaName);\n      this.fieldDescriptor = this.fieldSchema;\n    },\n\n    /**\n     * Inquiry method that can be used to read the field schema specified for this\n     * Subscription.\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can only be called if the Subscription has\n     * been initialized using a \"Field Schema\" \n     * </p>\n     * \n     * @throws {IllegalStateException} if the Subscription was initialized\n     * with a \"Field List\" or was not initialized at all.\n     * \n     * @return {String} the \"Field Schema\" to be subscribed to through the server. \n     */\n    getFieldSchema: function() {\n      if (!this.fieldSchema) {\n        if (this.fieldList) {\n          throw new IllegalStateException(ValidationUtils.USE_GET_FIELDS);\n        } else {\n          throw new IllegalStateException(ValidationUtils.NO_SCHEMA_NOR_LIST);\n        }\n      }\n      return this.fieldSchema.getOriginal();\n    },\n    \n    /**\n     * Inquiry method that can be used to read the mode specified for this\n     * Subscription.\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can be called at any time.</p>\n     * \n     * @return {String} the Subscription mode specified in the constructor.\n     */\n    getMode: function() {\n      return this._mode;\n    },\n   \n    /**\n     * Setter method that sets the name of the Data Adapter\n     * (within the Adapter Set used by the current session)\n     * that supplies all the items for this Subscription.\n     * <BR>The Data Adapter name is configured on the server side through\n     * the \"name\" attribute of the \"data_provider\" element, in the\n     * \"adapters.xml\" file that defines the Adapter Set (a missing attribute\n     * configures the \"DEFAULT\" name).\n     * <BR>Note that if more than one Data Adapter is needed to supply all the\n     * items in a set of items, then it is not possible to group all the\n     * items of the set in a single Subscription. Multiple Subscriptions\n     * have to be defined.\n     *\n     * <p class=\"default-value\"><b>Default value:</b> The default Data Adapter for the Adapter Set,\n     * configured as \"DEFAULT\" on the Server.</p>\n     *\n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can only be called while the Subscription\n     * instance is in its \"inactive\" state.</p>\n     * \n     * @throws {IllegalStateException} if the Subscription is currently \n     * \"active\".\n     *\n     * @param {String} dataAdapter the name of the Data Adapter. A null value \n     * is equivalent to the \"DEFAULT\" name.\n     *  \n     * @see ConnectionDetails#setAdapterSet\n     */\n    setDataAdapter: function(dataAdapter) {\n      this.notAliveCheck();\n      \n      this.dataAdapter = dataAdapter;\n      subscriptionsLogger.logDebug(\"Adapter Set assigned\",this,dataAdapter);\n    },\n    \n    /**\n     * Inquiry method that can be used to read the name of the Data Adapter \n     * specified for this Subscription through {@link Subscription#setDataAdapter}.\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can be called at any time.</p>\n     * \n     * @return {String} the name of the Data Adapter; returns null if no name\n     * has been configured, so that the \"DEFAULT\" Adapter Set is used.\n     */\n    getDataAdapter: function() {\n      return this.dataAdapter;\n    },\n    \n    /**\n     * Setter method that sets the selector name for all the items in the\n     * Subscription. The selector is a filter on the updates received. It is\n     * executed on the Server and implemented by the Metadata Adapter.\n     *\n     * <p class=\"default-value\"><b>Default value:</b> null (no selector).</p>\n     *\n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can only be called while the Subscription\n     * instance is in its \"inactive\" state.</p>\n     * \n     * @throws {IllegalStateException} if the Subscription is currently \n     * \"active\".\n     *\n     * @param {String} selector name of a selector, to be recognized by the\n     * Metadata Adapter, or null to unset the selector.\n     */\n    setSelector: function(selector) {\n      this.notAliveCheck();\n      \n      this._selector = selector;\n      subscriptionsLogger.logDebug(\"Selector assigned\",this,selector);\n    },\n    \n    /**\n     * Inquiry method that can be used to read the selctor name  \n     * specified for this Subscription through {@link Subscription#setSelector}.\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can be called at any time.</p>\n     * \n     * @return {String} the name of the selector.\n     */\n    getSelector: function() {\n      return this._selector;\n    },\n      \n    /**\n     * Setter method that sets the maximum update frequency to be requested to\n     * Lightstreamer Server for all the items in the Subscription. It can\n     * be used only if the Subscription mode is MERGE, DISTINCT or\n     * COMMAND (in the latter case, the frequency limitation applies to the\n     * UPDATE events for each single key). For Subscriptions with two-level behavior\n     * (see {@link Subscription#setCommandSecondLevelFields} and {@link Subscription#setCommandSecondLevelFieldSchema})\n     * , the specified frequency limit applies to both first-level and second-level items. <BR>\n     * Note that frequency limits on the items can also be set on the\n     * server side and this request can only be issued in order to furtherly\n     * reduce the frequency, not to rise it beyond these limits. <BR>\n     * This method can also be used to request unfiltered dispatching\n     * for the items in the Subscription. However, unfiltered dispatching\n     * requests may be refused if any frequency limit is posed on the server\n     * side for some item.\n     *\n     * <p class=\"edition-note\"><B>Edition Note:</B> A further global frequency limit could also\n\t * be imposed by the Server, depending on Edition and License Type; this specific limit also applies to RAW mode\n\t * and to unfiltered dispatching.\n\t * To know what features are enabled by your license, please see the License tab of the\n\t * Monitoring Dashboard (by default, available at /dashboard).</p>\n     *\n     * <p class=\"default-value\"><b>Default value:</b> null, meaning to lean on the Server default based on the subscription\n     * mode. This consists, for all modes, in not applying any frequency \n     * limit to the subscription (the same as \"unlimited\"); see the \"General Concepts\"\n     * document for further details.</p>\n     *\n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can can be called at any time with some\n     * differences based on the Subscription status:\n     * <ul>\n     * <li>If the Subscription instance is in its \"inactive\" state then\n     * this method can be called at will.</li>\n     * <li>If the Subscription instance is in its \"active\" state then the method\n     * can still be called unless the current value is \"unfiltered\" or the\n     * supplied value is \"unfiltered\" or null.\n     * If the Subscription instance is in its \"active\" state and the\n     * connection to the server is currently open, then a request\n     * to change the frequency of the Subscription on the fly is sent to the server.</li>\n     * </ul>\n     * </p>\n     * \n     * @throws {IllegalStateException} if the Subscription is currently \n     * \"active\" and the current value of this property is \"unfiltered\".\n     * @throws {IllegalStateException} if the Subscription is currently \n     * \"active\" and the given parameter is null or \"unfiltered\".\n     * @throws {IllegalArgumentException} if the specified value is not\n     * null nor one of the special \"unlimited\" and \"unfiltered\" values nor\n     * a valid positive number.\n     *\n     * @param {Number} freq A decimal number, representing the maximum update frequency (expressed in updates\n     * per second) for each item in the Subscription; for instance, with a setting\n     * of 0.5, for each single item, no more than one update every 2 seconds\n     * will be received. If the string \"unlimited\" is supplied, then no frequency\n     * limit is requested. It is also possible to supply the string \n     * \"unfiltered\", to ask for unfiltered dispatching, if it is allowed for the \n     * items, or a null value to stick to the Server default (which currently\n     * corresponds to \"unlimited\").\n     * The check for the string constants is case insensitive.\n     */\n    setRequestedMaxFrequency: function(freq) {\n      //can be:\n      //null -> do not send to the server\n      //unfiltered or unlimited\n      //>0 double\n      \n      if (freq) {\n        freq = new String(freq);\n        freq = freq.toLowerCase();\n      }\n      \n      var orig = this.requestedMaxFrequency;\n      if (this.isActive()) {\n        if (!freq && freq != 0) {\n          throw new IllegalStateException(ILLEGAL_FREQ_EXC);\n        } else if (freq == \"unfiltered\" || this.requestedMaxFrequency == \"unfiltered\") {\n          throw new IllegalStateException(ILLEGAL_FREQ_EXC);\n        }\n      }\n      \n      if (!freq && freq != 0) {\n        this.requestedMaxFrequency = null;\n      } else {\n      \n        if (freq == \"unfiltered\" || freq == \"unlimited\") {\n          this.requestedMaxFrequency = freq;\n        } else {\n          try {\n            this.requestedMaxFrequency = this.checkPositiveNumber(freq,false,true) ;\n          } catch(_e) {\n            throw new IllegalArgumentException(ValidationUtils.MAX_FREQ_EXC);\n          }\n        }\n      }\n\n\n      \n      \n      if ((this.isWaiting() || this.isSubscribing() || this.isPushing()) && String(orig) != String(this.requestedMaxFrequency)) {\n\n        //the value changes at runtime, we need to regenerate the request\n        //this.generateRequest();\n\n        //we've already sent the subscription request to the engine,\n        //send a new request to contain the frequency change\n        this.handler.updateSubscriptionParams(this,this.generateMaxFrequencyParam());\n        \n        if (this.behavior == MULTIMETAPUSH) {\n          var that = this;\n          this.subTables.forEachElement(function(el,row,col) {\n            //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n              Assertions.verifyOk(that.isPushing(), \"Table not pushing\");\n            //>>excludeEnd(\"debugExclude\");\n              el.setRequestedMaxFrequency(that.requestedMaxFrequency);\n          });\n        } // if not alive we cannot have subtables...\n        \n      }\n      \n      subscriptionsLogger.logDebug(\"Requested Max Frequency assigned\",this,this.requestedMaxFrequency);\n    },\n    \n    /**\n     * Inquiry method that can be used to read the max frequency, configured\n     * through {@link Subscription#setRequestedMaxFrequency}, to be requested to the \n     * Server for this Subscription.\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can be called at any time.</p>\n     * \n     * @return {String} A decimal number, representing the max frequency to be requested to the server\n     * (expressed in updates per second), or the strings \"unlimited\" or \"unfiltered\", or null.\n     */\n    getRequestedMaxFrequency: function() {\n      return this.requestedMaxFrequency == null ? null : String(this.requestedMaxFrequency);\n    },\n  \n    /**\n     * Setter method that sets the length to be requested to Lightstreamer\n     * Server for the internal queueing buffers for the items in the Subscription.\n     * A Queueing buffer is used by the Server to accumulate a burst\n     * of updates for an item, so that they can all be sent to the client,\n     * despite of bandwidth or frequency limits. It can be used only when the\n     * subscription mode is MERGE or DISTINCT and unfiltered dispatching has\n     * not been requested. Note that the Server may pose an upper limit on the\n     * size of its internal buffers.\n     *\n     * <p class=\"default-value\"><b>Default value:</b> null, meaning to lean\n     * on the Server default based on the subscription mode. This means that\n     * the buffer size will be 1 for MERGE subscriptions and \"unlimited\" for\n     * DISTINCT subscriptions. See the \"General Concepts\" document for further details.</p>\n     *\n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can only be called while the Subscription\n     * instance is in its \"inactive\" state.</p>\n     * \n     * @throws {IllegalStateException} if the Subscription is currently \n     * \"active\".\n     * @throws {IllegalArgumentException} if the specified value is not\n     * null nor  \"unlimited\" nor a valid positive integer number.\n     *\n     * @param {Number} size The length of the internal queueing buffers to be\n     * used in the Server. If the string \"unlimited\" is supplied, then no buffer\n     * size limit is requested (the check is case insensitive). It is also possible\n     * to supply a null value to stick to the Server default (which currently\n     * depends on the subscription mode).\n     *\n     * @see Subscription#setRequestedMaxFrequency\n     */\n    setRequestedBufferSize: function(size) {\n      this.notAliveCheck();\n      \n      //can be\n      //null -> do not send to the server\n      //unlimited\n      //>0 integer\n      \n      if (!size && size != 0) {\n        this.requestedBufferSize = null;\n      } else {\n        size = new String(size);\n        size = size.toLowerCase();\n        if (size == \"unlimited\") {\n          this.requestedBufferSize = size;\n        } else {\n          try {\n            this.requestedBufferSize = this.checkPositiveNumber(size);\n          } catch(_e) {\n            throw new IllegalArgumentException(ValidationUtils.MAX_BUF_EXC);\n          }\n        }\n      }\n      \n      subscriptionsLogger.logDebug(\"Requested Buffer Size assigned\",this,this.requestedBufferSize);\n    },\n    \n    /**\n     * Inquiry method that can be used to read the buffer size, configured though\n     * {@link Subscription#setRequestedBufferSize}, to be requested to the Server for\n     * this Subscription.\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can be called at any time.</p>\n     * \n     * @return {String} the buffer size to be requested to the server.\n     */\n    getRequestedBufferSize: function() {\n      return this.requestedBufferSize == null ? null : String(this.requestedBufferSize);\n    },\n  \n  \n    /**\n     * Setter method that enables/disables snapshot delivery request for the\n     * items in the Subscription. The snapshot can be requested only if the\n     * Subscription mode is MERGE, DISTINCT or COMMAND.\n     *\n     * <p class=\"default-value\"><b>Default value:</b> \"yes\" if the Subscription mode is not \"RAW\",\n     * null otherwise.</p>\n     *\n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can only be called while the Subscription\n     * instance is in its \"inactive\" state.</p>\n     * \n     * @throws {IllegalStateException} if the Subscription is currently \n     * \"active\".\n     * @throws {IllegalArgumentException} if the specified value is not\n     * \"yes\" nor \"no\" nor null nor a valid integer positive number.\n     * @throws {IllegalArgumentException} if the specified value is not\n     * compatible with the mode of the Subscription: \n     * <ul>\n     *  <li>In case of a RAW Subscription only null is a valid value;</li>\n     *  <li>In case of a non-DISTINCT Subscription only null \"yes\" and \"no\" are\n     *  valid values.</li>\n     * </ul>\n     *\n     * @param {String} required \"yes\"/\"no\" to request/not request snapshot\n     * delivery (the check is case insensitive). If the Subscription mode is \n     * DISTINCT, instead of \"yes\", it is also possible to supply a number, \n     * to specify the requested length of the snapshot (though the length of \n     * the received snapshot may be less than requested, because of insufficient \n     * data or server side limits);\n     * passing \"yes\"  means that the snapshot length should be determined\n     * only by the Server. Null is also a valid value; if specified no snapshot \n     * preference will be sent to the server that will decide itself whether\n     * or not to send any snapshot. \n     * \n     * @see ItemUpdate#isSnapshot\n     */\n    setRequestedSnapshot: function(required) {\n      this.notAliveCheck();\n\n      if (!required && required != 0) {\n        //null - admitted for all modes\n        this.isRequiredSnapshot = null;\n        \n      } else {\n        required = new String(required);\n        required = required.toLowerCase();\n        \n        if (required == \"no\") {  \n          //the string no - admitted for all modes\n          this.isRequiredSnapshot = required;\n        \n        } else {\n          if (this._mode == Constants.RAW) {\n            throw new IllegalStateException(RAW_NO_SNAPSHOT);\n          }\n          \n          if (required == \"yes\") {\n            //the string yes - admitted for MERGE, DISTINCT, COMMAND modes\n            this.isRequiredSnapshot = required;\n            \n          } else if (!isNaN(required)) {\n            if (this._mode != Constants.DISTINCT) {\n              //THROW\n              throw new IllegalStateException(NUMERIC_DISTINCT_ONLY);\n            }\n            \n            //a String to be parsed as a >0 int - admitted for DISTINCT mode\n            try {\n              this.isRequiredSnapshot = this.checkPositiveNumber(required);\n            } catch(_e) {\n              throw new IllegalArgumentException(REQ_SNAP_EXC);\n            }\n          \n          }  else {\n            throw new IllegalArgumentException(REQ_SNAP_EXC);\n          }\n          \n        }\n        \n      }\n      \n      subscriptionsLogger.logDebug(\"Snapshot Required assigned\",this,this.isRequiredSnapshot);\n    },\n    \n    /**\n     * Inquiry method that can be used to read the snapshot preferences, configured\n     * through {@link Subscription#setRequestedSnapshot}, to be requested to the Server for\n     * this Subscription.\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can be called at any time.</p>\n     * \n     * @return {String} the snapshot preference to be requested to the server.\n     */\n    getRequestedSnapshot: function() {\n      return this.isRequiredSnapshot;\n    },\n    \n    /**\n     * Setter method that sets the \"Field List\" to be subscribed to through \n     * Lightstreamer Server for the second-level items. It can only be used on\n     * COMMAND Subscriptions.\n     * <BR>Any call to this method will override any \"Field List\" or \"Field Schema\"\n     * previously specified for the second-level.\n     * <BR>Calling this method enables the two-level behavior:\n     * <BR>in synthesis, each time a new key is received on the COMMAND Subscription, \n     * the key value is treated as an Item name and an underlying Subscription for\n     * this Item is created and subscribed to automatically, to feed fields specified\n     * by this method. This mono-item Subscription is specified through an \"Item List\"\n     * containing only the Item name received. As a consequence, all the conditions\n     * provided for subscriptions through Item Lists have to be satisfied. The item is \n     * subscribed to in \"MERGE\" mode, with snapshot request and with the same maximum\n     * frequency setting as for the first-level items (including the \"unfiltered\" \n     * case). All other Subscription properties are left as the default. When the \n     * key is deleted by a DELETE command on the first-level Subscription, the \n     * associated second-level Subscription is also unsubscribed from. \n     * <BR>Specifying null as parameter will disable the two-level behavior.\n     *       \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can only be called while the Subscription\n     * instance is in its \"inactive\" state.</p>\n     * \n     * @throws {IllegalArgumentException} if the given object is not null nor \n     * an array.\n     * @throws {IllegalArgumentException} if any of the field names in the \"Field List\"\n     * contains a space or is empty/null.\n     * @throws {IllegalStateException} if the Subscription is currently \n     * \"active\".\n     * @throws {IllegalStateException} if the Subscription mode is not \"COMMAND\".\n     * \n     * @param {String[]} fields An array of Strings containing a list of fields to\n     * be subscribed to through the server.\n     * <BR>Ensure that no name conflict is generated between first-level and second-level\n     * fields. In case of conflict, the second-level field will not be accessible\n     * by name, but only by position.\n     * \n     * @see Subscription#setCommandSecondLevelFieldSchema\n     */\n    setCommandSecondLevelFields: function(fields) {\n      this.notAliveCheck();\n      this.secondLevelCheck();\n      \n      ValidationUtils.checkFieldNames(fields,\"A field\");\n      \n      this.subFieldList = fields == null ? null : new ListDescriptor(fields);\n      this.subFieldSchema = null;\n      this.subFieldDescriptor = this.subFieldList;\n      \n      this.prepareSecondLevel();\n      \n    },\n    \n    /**\n     * Inquiry method that can be used to read the \"Field List\" specified for \n     * second-level Subscriptions.\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can only be called if the second-level of\n     * this Subscription has been initialized using a \"Field List\"  \n     * </p>\n     * \n     * @throws {IllegalStateException} if the Subscription was initialized\n     * with a field schema or was not initialized at all.\n     * \n     * @return {String[]} the list of fields to be subscribed to through the server. \n     */\n    getCommandSecondLevelFields: function() {\n      if (!this.subFieldList) {\n        if (this.subFieldSchema) {\n          throw new IllegalStateException(\"The second level of this Subscription was initiated using a field schema, use getCommandSecondLevelFieldSchema instead of using getCommandSecondLevelFields\");\n        } else {\n          throw new IllegalStateException(NO_SUB_SCHEMA_NOR_LIST);\n        }\n      }\n      return this.subFieldList.getOriginal();\n    },\n    \n    /**\n     * Setter method that sets the \"Field Schema\" to be subscribed to through \n     * Lightstreamer Server for the second-level items. It can only be used on\n     * COMMAND Subscriptions.\n     * <BR>Any call to this method will override any \"Field List\" or \"Field Schema\"\n     * previously specified for the second-level.\n     * <BR>Calling this method enables the two-level behavior:\n     * <BR>in synthesis, each time a new key is received on the COMMAND Subscription, \n     * the key value is treated as an Item name and an underlying Subscription for\n     * this Item is created and subscribed to automatically, to feed fields specified\n     * by this method. This mono-item Subscription is specified through an \"Item List\"\n     * containing only the Item name received. As a consequence, all the conditions\n     * provided for subscriptions through Item Lists have to be satisfied. The item is \n     * subscribed to in \"MERGE\" mode, with snapshot request and with the same maximum\n     * frequency setting as for the first-level items (including the \"unfiltered\" \n     * case). All other Subscription properties are left as the default. When the \n     * key is deleted by a DELETE command on the first-level Subscription, the \n     * associated second-level Subscription is also unsubscribed from. \n     * <BR>Specify null as parameter will disable the two-level behavior.\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can only be called while the Subscription\n     * instance is in its \"inactive\" state.</p>\n     * \n     * @throws {IllegalStateException} if the Subscription is currently \n     * \"active\".\n     * @throws {IllegalStateException} if the Subscription mode is not \"COMMAND\".\n     * \n     * @param {String} schemaName A String to be expanded into a field list by the\n     * Metadata Adapter. \n     * \n     * @see Subscription#setCommandSecondLevelFields\n     */\n    setCommandSecondLevelFieldSchema: function(schemaName) {\n      this.notAliveCheck();\n      this.secondLevelCheck();\n      \n      this.subFieldList = null;\n      this.subFieldSchema = schemaName == null ? null : new NameDescriptor(schemaName);\n      this.subFieldDescriptor = this.subFieldSchema;\n      \n      this.prepareSecondLevel();\n      \n    },\n    \n    /**\n     * Inquiry method that can be used to read the \"Field Schema\" specified for \n     * second-level Subscriptions.\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can only be called if the second-level of\n     * this Subscription has been initialized using a \"Field Schema\".\n     * </p>\n     * \n     * @throws {IllegalStateException} if the Subscription was initialized\n     * with a \"Field List\" or was not initialized at all.\n     * \n     * @return {String} the \"Field Schema\" to be subscribed to through the server. \n     */\n    getCommandSecondLevelFieldSchema: function() {\n      if (!this.subFieldSchema) {\n        if (this.subFieldList) {\n          throw new IllegalStateException(\"The second level of this Subscription was initiated using a field list, use getCommandSecondLevelFields instead of using getCommandSecondLevelFieldSchema\");\n        } else {\n          throw new IllegalStateException(NO_SUB_SCHEMA_NOR_LIST);\n        }\n      }\n      return this.subFieldSchema.getOriginal();\n    },\n    \n    /**\n     * Setter method that sets the name of the second-level Data Adapter (within \n     * the Adapter Set used by the current session) that supplies all the \n     * second-level items.\n     * All the possible second-level items should be supplied in \"MERGE\" mode \n     * with snapshot available. \n     * The Data Adapter name is configured on the server side through the \n     * \"name\" attribute of the &lt;data_provider&gt; element, in the \"adapters.xml\" \n     * file that defines the Adapter Set (a missing attribute configures the \n     * \"DEFAULT\" name).\n     * \n     * <p class=\"default-value\"><b>Default value:</b> The default Data Adapter for the Adapter Set,\n     * configured as \"DEFAULT\" on the Server.</p>\n     *\n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can only be called while the Subscription\n     * instance is in its \"inactive\" state.</p>\n     *\n     * @throws {IllegalStateException} if the Subscription is currently \n     * \"active\".\n     * @throws {IllegalStateException} if the Subscription mode is not \"COMMAND\".\n     *\n     * @param {String} dataAdapter the name of the Data Adapter. A null value \n     * is equivalent to the \"DEFAULT\" name.\n     *  \n     * @see Subscription#setCommandSecondLevelFields\n     * @see Subscription#setCommandSecondLevelFieldSchema\n     */\n    setCommandSecondLevelDataAdapter: function(dataAdapter) {\n      this.notAliveCheck();\n      this.secondLevelCheck();\n      \n      this.underDataAdapter = dataAdapter;\n      subscriptionsLogger.logDebug(\"Second level Data Adapter Set assigned\",this,dataAdapter);\n    },\n    \n    /**\n     * Inquiry method that can be used to read the second-level Data \n     * Adapter name configured through {@link Subscription#setCommandSecondLevelDataAdapter}.\n     *  \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can be called at any time.</p>\n     * \n     * @return {String} the name of the second-level Data Adapter.\n     */\n    getCommandSecondLevelDataAdapter : function() {\n      return this.underDataAdapter;\n    },\n    \n    /**\n     * Returns the latest value received for the specified item/field pair.\n     * <BR>It is suggested to consume real-time data by implementing and adding\n     * a proper {@link SubscriptionListener} rather than probing this method.\n     * In case of COMMAND Subscriptions, the value returned by this\n     * method may be misleading, as in COMMAND mode all the keys received, being\n     * part of the same item, will overwrite each other; for COMMAND Subscriptions,\n     * use {@link Subscription#getCommandValue} instead.\n     * <BR>Note that internal data is cleared when the Subscription is \n     * unsubscribed from. \n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can be called at any time; if called \n     * to retrieve a value that has not been received yet, then it will return null. \n     * </p>\n     * \n     * @throws {IllegalArgumentException} if an invalid item name or field\n     * name is specified or if the specified item position or field position is\n     * out of bounds.\n     * \n     * @param {String} itemIdentifier a String representing an item in the \n     * configured item list or a Number representing the 1-based position of the item\n     * in the specified item group. (In case an item list was specified, passing \n     * the item position is also possible).\n     * \n     * @param {String} fieldIdentifier a String representing a field in the \n     * configured field list or a Number representing the 1-based position of the field\n     * in the specified field schema. (In case a field list was specified, passing \n     * the field position is also possible).\n     * \n     * @return {String} the current value for the specified field of the specified item\n     * (possibly null), or null if no value has been received yet.\n     */\n    getValue: function(itemIdentifier, fieldIdentifier) {\n      return this.oldValuesByItem.get(this.toItemPos(itemIdentifier),this.toFieldPos(fieldIdentifier));\n    },\n    \n    /**\n     * Returns the latest value received for the specified item/key/field combination.\n     * This method can only be used if the Subscription mode is COMMAND.\n     * Subscriptions with two-level behavior are also supported, hence the specified\n     * field can be either a first-level or a second-level one.\n     * <BR>It is suggested to consume real-time data by implementing and adding\n     * a proper {@link SubscriptionListener} rather than probing this method.\n     * <BR>Note that internal data is cleared when the Subscription is \n     * unsubscribed from. \n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can be called at any time; if called \n     * to retrieve a value that has not been received yet, then it will return null.\n     * </p>\n     * \n     * @throws {IllegalArgumentException} if an invalid item name or field\n     * name is specified or if the specified item position or field position is\n     * out of bounds.\n     * @throws {IllegalStateException} if the Subscription mode is not \n     * COMMAND.\n     * \n     * @param {String} itemIdentifier a String representing an item in the \n     * configured item list or a Number representing the 1-based position of the item\n     * in the specified item group. (In case an item list was specified, passing \n     * the item position is also possible).\n     * \n     * @param {String} keyValue a String containing the value of a key received\n     * on the COMMAND subscription.\n     * \n     * @param {String} fieldIdentifier a String representing a field in the \n     * configured field list or a Number representing the 1-based position of the field\n     * in the specified field schema. (In case a field list was specified, passing\n     * the field position is also possible).\n     * \n     * @return {String} the current value for the specified field of the specified\n     * key within the specified item (possibly null), or null if the specified\n     * key has not been added yet (note that it might have been added and eventually deleted).\n     */\n    getCommandValue: function(itemIdentifier, keyValue, fieldIdentifier) {\n      this.commandCheck();\n     \n      return this.oldValuesByKey.get(this.toItemPos(itemIdentifier)+\" \"+keyValue,this.toFieldPos(fieldIdentifier,true));\n    },  \n    \n    /**\n     * Returns the position of the \"key\" field in a COMMAND Subscription.\n     * <BR>This method can only be used if the Subscription mode is COMMAND\n     * and the Subscription was initialized using a \"Field Schema\".\n     *  \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can be called at any time.</p>\n     * \n     * @throws {IllegalStateException} if the Subscription mode is not \n     * COMMAND or if the {@link SubscriptionListener#onSubscription} event for this Subscription\n     * was not yet fired.\n     * \n     * @return {Number} the 1-based position of the \"key\" field within the \"Field Schema\".\n     */\n    getKeyPosition: function() {\n      this.commandCheck();\n      \n      if (!this.fieldSchema && this.fieldList) {\n        throw new IllegalStateException(\"This Subscription was initiated using a field list, key field is always 'key'\");\n      }\n      \n      if (this.keyCode == null) {\n        throw new IllegalStateException(\"The position of the key field is currently unknown\");\n      }\n      \n      return this.keyCode;\n    },\n    \n    /**\n     * Returns the position of the \"command\" field in a COMMAND Subscription.\n     * <BR>This method can only be used if the Subscription mode is COMMAND\n     * and the Subscription was initialized using a \"Field Schema\".\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> This method can be called at any time.</p>\n     * \n     * @throws {IllegalStateException} if the Subscription mode is not \n     * COMMAND or if the {@link SubscriptionListener#onSubscription} event for this Subscription\n     * was not yet fired.\n     * \n     * @return {Number} the 1-based position of the \"command\" field within the \"Field Schema\".\n     */\n    getCommandPosition: function() {\n      this.commandCheck();\n\n      if (!this.fieldSchema && this.fieldList) {\n        throw new IllegalStateException(\"This Subscription was initiated using a field list, command field is always 'command'\");\n      }\n      \n      if (this.commandCode == null) {\n        throw new IllegalStateException(\"The position of the command field is currently unknown\");\n      }\n      \n      return this.commandCode;\n    },\n    \n    /*private*/ toFieldPos: function(fieldNameOrPos,full) {\n      var res = this.toPos(fieldNameOrPos,this.fieldDescriptor,full);\n      if (res === null) {\n        throw new IllegalArgumentException(\"the specified field does not exist\");\n      } else if (res === false) {\n        throw new IllegalArgumentException(\"the specified field position is out of bounds\");\n      }\n      \n      return res; \n    },\n    \n    /*private*/toItemPos: function(itemNameOrPos) {\n      var res = this.toPos(itemNameOrPos,this.itemDescriptor);\n      if (res === null) {\n        throw new IllegalArgumentException(\"the specified item does not exist\");\n      } else if (res === false) {\n        throw new IllegalArgumentException(\"the specified item position is out of bounds\");\n      } \n      return res;\n    },\n    \n    /*private*/ toPos: function(nameOrPos,descriptor,full) {\n      var pos = (isNaN(nameOrPos) ? descriptor.getPos(nameOrPos) : nameOrPos);\n      if (pos == null) {\n        return null;\n      } else if (pos <= 0 || pos > (full ? descriptor.getFullSize() : descriptor.getSize())) {\n        return false;\n      }\n      \n      return pos;\n    },\n    \n    \n    prepareSecondLevel: function() {\n      if (this.subFieldDescriptor == null) {\n        //disable second level\n        this.setBehavior(METAPUSH);\n        \n      } else {\n        //enable second level\n        this.setBehavior(MULTIMETAPUSH);\n      }\n    },\n\n    endOfSnapshot: function(_item) {\n      var _name = this.itemDescriptor.getName(_item);\n      \n      Assertions.assertNotNull(this.snapshotByItem[_item], \"Item index out of range\");\n      this.snapshotByItem[_item].endOfSnapshot();\n      this.dispatchEvent(\"onEndOfSnapshot\",[_name,_item]);\n    },\n    \n    clearSnapshot: function(_item) {\n      var _name = this.itemDescriptor.getName(_item);\n      \n      if (this.behavior == METAPUSH) {\n        //delete key-status\n        this.oldValuesByKey = new Matrix();\n      } else if (this.behavior == MULTIMETAPUSH) {\n        //delete key-status\n        this.oldValuesByKey = new Matrix();\n        //unsubscribe subtables\n        this.removeItemSubTables(_item);\n      }\n      this.dispatchEvent(\"onClearSnapshot\",[_name,_item]);\n      \n    },\n    \n    lostUpdates: function(_item,lostUpdates,optKeyVal) {\n      var _name = this.itemDescriptor.getName(_item);\n      \n      this.dispatchEvent(\"onItemLostUpdates\",[_name,_item,lostUpdates]);\n    },\n    \n    sonLostUpdates: function(relKey,lostUpdates) {\n      this.dispatchEvent(\"onCommandSecondLevelItemLostUpdates\",[lostUpdates,relKey]);\n    },\n    \n    serverDeny: function(flag,msg) {\n      this.dispatchEvent(\"onSubscriptionError\",[flag,msg]);\n    },\n    \n    sonServerDeny: function(code,msg,relKey) {\n      this.dispatchEvent(\"onCommandSecondLevelSubscriptionError\",[code,msg,relKey]);\n    },\n    \n    update: function(args,snap,fromMultison) {\n    //>>excludeStart(\"debugExclude\", pragmas.debugExclude);  \n      Assertions.verifyValue(TABLE_PUSHING,this.tablePhaseType, \"Wrong table phase\");\n    //>>excludeEnd(\"debugExclude\");\n      // number of the item of the current update\n      var _item = args[1];\n      \n      Assertions.assertNotNull(this.snapshotByItem[_item], \"Item index out of range\");\n      this.snapshotByItem[_item].update();\n      var isSnapshot = this.snapshotByItem[_item].isSnapshot();\n      \n      //OLD for METAPUSH (old is the new value)\n      //for item|key and not for per item.\n      var _key = new String(_item);\n      \n      if (this.behavior != SIMPLE) {\n        //handle metapush update\n        //WARNING, args is modified by the method\n        _key = this.organizeMPUpdate(args,_item,fromMultison);\n       \n        //args enters UNCHANGED by item exits UNCHANGED by key\n        //oldValuesByItem is updated with new values\n        \n      } \n      \n      if (this.behavior == MULTIMETAPUSH && !fromMultison) {\n        // multi table,\n        // here the logic of subscriptions and unregistration is managed\n        // here we do not enter if the update is generated by a son as such\n        // update all carry as UPDATE command\n        this.handleMultiTableSubscriptions(args); \n      }\n      \n      if (this.behavior == SIMPLE) {\n        this.updateStructure(this.oldValuesByItem,_item,args,true);\n      } else {\n        this.updateStructure(this.oldValuesByKey,_key,args,true);\n        \n        //organizeMPUpdate has already updated the oldValuesByItem array\n      }\n      var updateObj =  new ItemUpdate(this.itemDescriptor.getName(_item), _item, this.fieldDescriptor, isSnapshot, args);\n      this.dispatchEvent(\"onItemUpdate\",[updateObj]);\n \n      if (this.oldValuesByKey.get(_key,this.commandCode) == \"DELETE\") {\n        this.oldValuesByKey.delRow(_key);\n      }\n      \n    },\n    \n    updateStructure: function(struct,_key,args, fillInUnchanged) {\n      var len = args.length - 2;\n      var _field = 1;\n      var fieldInArgs = 2;\n      args.unchangedMap = {};\n      for (; _field <= len; _field++, fieldInArgs++) {\n        \n        if (args[fieldInArgs] !== UNCHANGED) {\n          struct.insert(args[fieldInArgs], _key, _field);\n        } else if (fillInUnchanged) {\n          args[fieldInArgs] = struct.get(_key,_field);\n          args.unchangedMap[fieldInArgs] = true;\n        }\n        \n      }\n    },\n    \n    \n/////////////METAPUSH    \n    \n    organizeMPUpdate: function(args,_item,fromMultison) {\n      \n      var item_key;\n      if ((typeof args[this.keyCode + 1] == \"undefined\")||(typeof args[this.commandCode + 1] == \"undefined\")) {\n        subscriptionsLogger.logWarn(\"key and/or command position not correctly configured\");\n        return null;\n      }\n      \n      // the server unchanged are not covered yet, so I need to evaluate what value I need\n      if (args[this.keyCode + 1] == UNCHANGED) {\n        //unchanged, so take the old value\n        item_key = _item + \" \" + this.oldValuesByItem.get(_item,this.keyCode);\n      } else {\n        //take the new value\n        item_key = _item + \" \" + args[this.keyCode + 1];\n      }\n      \n      // I cover unchanged item with unchanged key and prepare old item for the next round\n      // only makes sense for COMMAND updates, multimetapush child updates\n      // are already organized by single key\n      if (!fromMultison) {\n        args.changedFields = [];\n      \n        for (var i = 2; i < args.length; i++) {\n          if (args[i] && args[i] == UNCHANGED) {\n            //if unchanged on server take old _item\n            args[i] = this.oldValuesByItem.get(_item,(i - 1));\n          } else {\n            //copy on old _item the new value\n            this.oldValuesByItem.insert(args[i],_item,(i - 1));\n          }\n          \n          if (args[i] == this.oldValuesByKey.get(item_key,(i - 1))) {\n            // if server value = old key, overwrite server value with unchanged value\n            args[i] = UNCHANGED;\n          } else {\n            args.changedFields.push(i-1);\n          }\n        }\n      \n      \n        if (this.behavior == MULTIMETAPUSH) {\n          var newL = this.getFullSchemaSize() + 2;\n          if(newL > args.length) {\n            // I received an update on the table in COMMAND.\n            // since this update does not have the fields of the\n            // subtable MERGE, I extend the update with unchanged ones.\n           \n            for (var i = args.length; i < newL; i++) {\n              args[i] = UNCHANGED;\n            }\n          }\n        }\n        \n      } else {\n        \n        // the update of a child has the same key as item|key which certainly hasn't changed\n        args[this.keyCode + 1] = UNCHANGED;\n        // the command probably hasn't changed either:\n        if (args[this.commandCode + 1] == this.oldValuesByKey.get(item_key,this.commandCode)) {\n          args[this.commandCode + 1] = UNCHANGED;\n        } else {\n          args.changedFields.push(this.commandCode);\n          args.changedFields.sort(sortFun);\n        }\n      }\n      return item_key;\n    },\n    \n    \n//////////MULTI-METAPUSH    \n    \n    handleMultiTableSubscriptions: function(args) {\n      // manage the logic of subscriptions and unregistration\n      var _item = args[1];\n      var _key = (args[this.keyCode + 1] == UNCHANGED) ? this.oldValuesByItem.get(_item,this.keyCode) : args[this.keyCode + 1];\n      var itemCommand = args[this.commandCode + 1];\n      \n      var subTableExists = this.hasSubTable(_item,_key);\n      if (itemCommand == \"DELETE\") {\n        if (subTableExists) {\n          this.removeSubTable(_item,_key);\n        }\n      } else if (!subTableExists) {\n        this.addSubTable(_item,_key);\n      }\n    },\n    \n    makeSubTable: function(parentSubscription) {\n      this.subTableFlag = true;\n      this.realMaxFrequencyManager = new RealMaxFrequencyManager.SecondLevelMultiMetaPushRealMaxFrequencyManager(this, parentSubscription);\n    },\n    \n    isSubTable: function() {\n      //do not abuse\n      return this.subTableFlag;\n    },\n    \n    hasSubTable: function(_item,_key) {\n      return this.subTables.get(_item,_key) !== null;\n    },\n    \n    removeSubTable: function(_item,_key) {\n      this.handler.removeATable(this.subTables.get(_item,_key));\n      this.subTables.del(_item,_key);\n      this.realMaxFrequencyManager.onDeleteSecondLevelSubscription();\n    },\n    \n    addSubTable: function(_item,_key) {\n      var st = new Subscription(this.subMode);\n      st.makeSubTable(this);\n            \n      try {\n        st.setItems([_key]);\n        this.subTables.insert(st,_item,_key);\n      } catch(e) {\n        this.dispatchEvent(\"onCommandSecondLevelSubscriptionError\", [14, INVALID_SECOND_LEVEL_KEY, _key]);\n        return;\n      }\n      \n      if (this.subFieldList) {\n        st.setFields(this.subFieldList.getOriginal());\n      } else {\n        st.setFieldSchema(this.subFieldSchema.getOriginal());\n      }\n      \n      st.setDataAdapter(this.underDataAdapter);\n      st.setRequestedSnapshot(\"yes\");\n      st.requestedMaxFrequency = this.requestedMaxFrequency;\n      \n\n      var subList = new SecondLevelSubscriptionListener(this,_item,_key);\n      st.addListener(subList);\n            \n      this.handler.addATable(st);\n    },\n    \n    setSecondLevelSchemaSize: function(size) {\n      this.subFieldDescriptor.setSize(size);\n    },\n    \n    getMainSchemaSize: function() {\n      return this.fieldDescriptor.getSize();\n    },\n    \n    getFullSchemaSize: function() {\n      return this.fieldDescriptor.getFullSize();\n    },\n    \n    getKeyPos: function() {\n      return this.keyCode;\n    },\n    \n    getCommandPos: function() {\n      return this.commandCode;\n    },\n    \n    /**\n     * Adds a listener that will receive events from the Subscription \n     * instance.\n     * <BR>The same listener can be added to several different Subscription \n     * instances.\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> a listener can be added at any time.</p>\n     * \n     * @param {SubscriptionListener} listener An object that will receive the events\n     * as shown in the {@link SubscriptionListener} interface.\n     * <BR>Note that the given instance does not have to implement all of the \n     * methods of the SubscriptionListener interface. In fact it may also \n     * implement none of the interface methods and still be considered a valid \n     * listener. In the latter case it will obviously receive no events.\n     */\n    addListener: function(listener) {\n      this._callSuperMethod(Subscription,\"addListener\",[listener]);\n    },\n    \n    /**\n     * Removes a listener from the Subscription instance so that it\n     * will not receive events anymore.\n     * \n     * <p class=\"lifecycle\"><b>Lifecycle:</b> a listener can be removed at any time.</p>\n     * \n     * @param {SubscriptionListener} listener The listener to be removed.\n     */\n    removeListener: function(listener) {\n      this._callSuperMethod(Subscription,\"removeListener\",[listener]);\n    },\n    \n    /**\n     * Returns an array containing the {@link SubscriptionListener} instances that\n     * were added to this client.\n     * \n     * @return {SubscriptionListener[]} an Array containing the listeners that were added to this client.\n     * Listeners added multiple times are included multiple times in the array.\n     */\n    getListeners: function() {\n      return this._callSuperMethod(Subscription,\"getListeners\");\n    },\n    \n    setBehavior: function(behavior) {\n        this.behavior = behavior;\n        switch (behavior) {\n        case SIMPLE:\n        case METAPUSH:\n            this.realMaxFrequencyManager = new RealMaxFrequencyManager.FlatPushRealMaxFrequencyManager(this);\n            break;\n            \n        case MULTIMETAPUSH:\n            this.realMaxFrequencyManager = new RealMaxFrequencyManager.FirstLevelMultiMetaPushRealMaxFrequencyManager(this);\n            break;\n            \n        default:\n            ASSERT.verifyOk(false);\n        }\n    },\n    \n    /**\n     * Changes the real max frequency of this subscription.\n     * <br>If there is a change, the method SubscriptionListener.onRealMaxFrequency is triggered.\n     * <br>The method SubscriptionListener.onRealMaxFrequency is also triggered if there is a new maximum\n     * among the item frequencies of a two-level command subscription.\n     */\n    configure: function(frequency) {\n        this.realMaxFrequencyManager.configure(frequency);\n    }\n\n  };\n  \n  /*\n   * Detects whether the current update is a snapshot according to the rules in the following table.\n   * <pre>\n+--------------------+-------+----------+----------+---------+---------+-------+-------+-------+\n|                    | r1    | r2       | r3       | r4      | r5      | r6    | r7    | r8    |\n+--------------------+-------+----------+----------+---------+---------+-------+-------+-------+\n| snapshot requested | false | true     | true     | true    | true    | true  | true  | true  |\n+--------------------+-------+----------+----------+---------+---------+-------+-------+-------+\n| mode               | -     | DISTINCT | DISTINCT | COMMAND | COMMAND | MERGE | MERGE | RAW   |\n+--------------------+-------+----------+----------+---------+---------+-------+-------+-------+\n| first update       | -     | -        | -        | -       | -       | false | true  | -     |\n+--------------------+-------+----------+----------+---------+---------+-------+-------+-------+\n| EOS received       | -     | false    | true     | false   | true    | -     | -     | -     |\n+--------------------+-------+----------+----------+---------+---------+-------+-------+-------+\n| isSnapshot()       | false | true     | false    | true    | false   | false | true  | error |\n+--------------------+-------+----------+----------+---------+---------+-------+-------+-------+\n   * </pre>\n   */\n  function SnapshotManager(subscription) {\n      this.firstUpdate = true;\n      this.eosReceived = false;\n      this.state = SnapshotManagerState.NO_UPDATE_RECEIVED;\n      this.subscription = subscription;\n  }\n  \n  /**\n   * Notifies the manager that a new update is available.\n   */\n  SnapshotManager.prototype.update = function() {\n      if (this.state == SnapshotManagerState.NO_UPDATE_RECEIVED) {\n          this.state = SnapshotManagerState.ONE_UPDATE_RECEIVED;\n          \n      } else if (this.state == SnapshotManagerState.ONE_UPDATE_RECEIVED) {\n          this.state = SnapshotManagerState.MORE_THAN_ONE_UPDATE_RECEIVED;\n          this.firstUpdate = false;\n      }\n  }\n  \n  /**\n   * Notifies the manager that the message EOS has arrived.\n   */\n  SnapshotManager.prototype.endOfSnapshot = function() {\n      this.eosReceived = true;\n  }\n  \n  /**\n   * Returns true if the user has requested the snapshot.\n   */\n  SnapshotManager.prototype.snapshotRequested = function() {\n      return this.subscription.isRequiredSnapshot != null && this.subscription.isRequiredSnapshot != \"no\";\n  }\n  \n  /**\n   * Returns true if the current update is a snapshot.\n   */\n  SnapshotManager.prototype.isSnapshot = function() {\n      if (! this.snapshotRequested()) {\n          // r1\n          return false;\n          \n      } else if (Constants.MERGE == this.subscription._mode) {\n          // r6, r7\n          return this.firstUpdate;\n          \n      } else if (Constants.COMMAND == this.subscription._mode || Constants.DISTINCT == this.subscription._mode) {\n          // r2, r3, r4, r5\n          return ! this.eosReceived;\n          \n      } else {\n          // r8\n          // should never happen\n          return false;\n      }\n  }\n  \n  /*\n   * Control states of {@link SnapshotManager}.\n   */\n  var SnapshotManagerState = {\n          NO_UPDATE_RECEIVED: 0,\n          ONE_UPDATE_RECEIVED: 1,\n          MORE_THAN_ONE_UPDATE_RECEIVED: 2\n  };\n  \n  Subscription.prototype[\"isActive\"] = Subscription.prototype.isActive;\n  Subscription.prototype[\"isSubscribed\"] = Subscription.prototype.isSubscribed;\n  Subscription.prototype[\"setItems\"] = Subscription.prototype.setItems;\n  Subscription.prototype[\"getItems\"] = Subscription.prototype.getItems;\n  Subscription.prototype[\"setItemGroup\"] = Subscription.prototype.setItemGroup;\n  Subscription.prototype[\"getItemGroup\"] = Subscription.prototype.getItemGroup;\n  Subscription.prototype[\"setFields\"] = Subscription.prototype.setFields;\n  Subscription.prototype[\"getFields\"] = Subscription.prototype.getFields;\n  Subscription.prototype[\"setFieldSchema\"] = Subscription.prototype.setFieldSchema;\n  Subscription.prototype[\"getFieldSchema\"] = Subscription.prototype.getFieldSchema;\n  Subscription.prototype[\"getMode\"] = Subscription.prototype.getMode;\n  Subscription.prototype[\"setDataAdapter\"] = Subscription.prototype.setDataAdapter;\n  Subscription.prototype[\"getDataAdapter\"] = Subscription.prototype.getDataAdapter;\n  Subscription.prototype[\"setSelector\"] = Subscription.prototype.setSelector;\n  Subscription.prototype[\"getSelector\"] = Subscription.prototype.getSelector;\n  Subscription.prototype[\"setRequestedMaxFrequency\"] = Subscription.prototype.setRequestedMaxFrequency;\n  Subscription.prototype[\"getRequestedMaxFrequency\"] = Subscription.prototype.getRequestedMaxFrequency;\n  Subscription.prototype[\"setRequestedBufferSize\"] = Subscription.prototype.setRequestedBufferSize;\n  Subscription.prototype[\"getRequestedBufferSize\"] = Subscription.prototype.getRequestedBufferSize;\n  Subscription.prototype[\"setRequestedSnapshot\"] = Subscription.prototype.setRequestedSnapshot;\n  Subscription.prototype[\"getRequestedSnapshot\"] = Subscription.prototype.getRequestedSnapshot;\n  Subscription.prototype[\"setCommandSecondLevelFields\"] = Subscription.prototype.setCommandSecondLevelFields;\n  Subscription.prototype[\"getCommandSecondLevelFields\"] = Subscription.prototype.getCommandSecondLevelFields;\n  Subscription.prototype[\"setCommandSecondLevelFieldSchema\"] = Subscription.prototype.setCommandSecondLevelFieldSchema;\n  Subscription.prototype[\"getCommandSecondLevelFieldSchema\"] = Subscription.prototype.getCommandSecondLevelFieldSchema;\n  Subscription.prototype[\"setCommandSecondLevelDataAdapter\"] = Subscription.prototype.setCommandSecondLevelDataAdapter;\n  Subscription.prototype[\"getCommandSecondLevelDataAdapter\"] = Subscription.prototype.getCommandSecondLevelDataAdapter;\n  Subscription.prototype[\"getValue\"] = Subscription.prototype.getValue;\n  Subscription.prototype[\"getCommandValue\"] = Subscription.prototype.getCommandValue;\n  Subscription.prototype[\"getKeyPosition\"] = Subscription.prototype.getKeyPosition;\n  Subscription.prototype[\"getCommandPosition\"] = Subscription.prototype.getCommandPosition;\n  Subscription.prototype[\"addListener\"] = Subscription.prototype.addListener;\n  Subscription.prototype[\"removeListener\"] = Subscription.prototype.removeListener;\n  Subscription.prototype[\"getListeners\"] = Subscription.prototype.getListeners;\n  \n  Inheritance(Subscription,EventDispatcher,false,true);\n  Inheritance(Subscription,Setter,true,true);\n  return Subscription;\n})();\n  \n\n","/*\n  Copyright (c) Lightstreamer Srl\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\nimport Executor from \"./Executor\";\nimport List from \"./List\";\nimport Inheritance from \"./Inheritance\";\n\nexport default /*@__PURE__*/(function() {\n  //var actionsLogger = LoggerManager.getLoggerProxy(LoggerManager.ACTIONS);   \n  \n  /**\n   * This constructor simply calls the {@link EventDispatcher#initDispatcher initDispatcher} method. This class is supposed \n   * to be extended using {@link module:Inheritance} extension.\n   * It can be either light extended or fully extended. When light extension is performed\n   * the {@link EventDispatcher#initDispatcher initDispatcher} method should be called in the extended class constructor.\n   * @constructor\n   * \n   * @exports EventDispatcher\n   * @class Class to be extended by classes requiring multiple listeners support.\n   * The dispatcher can act in two different ways, either synchronously (all listeners are triggered\n   * before the dispatching method exits) or asynchonously (all the listeners are triggered only when \n   * the currently running code has been executed).<br/>  \n   * When extending this class is a good idea to also prepare an empty fake class to act as interface \n   * to keep track of the events that will be generated.\n   * \n   *\n   * \n   * \n   * @example\n   * //using light extension\n   * define([\"Inheritance\",\"EventDispatcher\"],function(Inheritance,EventDispatcher) {\n   *   \n   *   var MyClass = function() {\n   *     this.initDispatcher();\n   *     //do stuff\n   *   }\n   *   \n   *   MyClass.prototype = {\n   *     foo: function() {\n   *       //still doing stuff\n   *       \n   *       //send an eventName event to the listeners (their eventName method will be called)\n   *       this.dispatchEvent(\"eventName\",[paramForHandlers,otherParamForHandlers]);\n   *       \n   *       //do more stuff\n   *     }\n   *   };\n   *   \n   *   Inheritance(MyClass,EventDispatcher,true);\n   *   return MyClass;\n   * });\n   * \n   * define([],function() {\n   *   \n   *   var MyClassListener = function() {\n   *     //do stuff\n   *   }\n   *   \n   *   MyClassListener = {\n   *     eventName: function(param1,param2) {\n   *       //handle event\n   *     }\n   *   };\n   *   \n   *   return MyClassListener;\n   * });\n   */\n  var EventDispatcher = function() {\n    this.initDispatcher();\n  };\n  \n  EventDispatcher.prototype = {\n      \n      /**\n       * Initializes the required internal structures and configures the dispatcher \n       * for sending asynchronous events.\n       * <br/>If called more than once it will reset the status of the instance.\n       * <br/>This method MUST be called at least once before event dispatching can \n       * be exploited, otherwise most methods will fail either silently or with unexpected\n       * exceptions as no init-checks are performed by them.\n       * @protected\n       * \n       * @see EventDispatcher#useSynchEvents\n       */\n      initDispatcher: function() {\n        this.theListeners = new AsymList();\n        this.synchEvents = false;\n      },\n      \n      /**\n       * Adds a listener and fires the onListenStart event to it sending itself as only parameter.\n       * Note that the onListenStart event is only fired on the involved listener not on previously\n       * registered listeners.\n       * \n       * @param {EventDispatcherListener} aListener a listener to receive events notifications. The listener does not need\n       * to implement all of the possible events: missing events will not be fired on it.\n       */\n      addListener: function(aListener) {\n        if (aListener && !this.theListeners.contains(aListener)) {\n          var obj = {handler:aListener,listening:true};\n          this.theListeners.add(obj);\n          this.dispatchToOneListener(\"onListenStart\",[this],obj,true);\n        }\n      },\n      \n      /**\n       * Removes a listener and fires the onListenEnd event to it sending itself as only parameter.\n       * Note that the onListenEnd event is only fired on the involved listener not on previously\n       * registered listeners.\n       * \n       * @param {EventDispatcherListener} aListener the listener to be removed.\n       */\n      removeListener: function(aListener) {\n        if (!aListener) {\n          return;\n        }\n        \n        var obj = this.theListeners.remove(aListener);\n        if (obj) {\n          this.dispatchToOneListener(\"onListenEnd\",[this],obj,true);\n        }\n      },\n      \n      /**\n       * Returns an array containing the currently active listeners.\n       * \n       * @returns {Array.<EventDispatcherListener>} an array of listeners.\n       */\n      getListeners: function() {\n        return this.theListeners.asArray();\n      },\n      \n      /**\n       * Configures the EventDispatcher to send either synchronous or asynchronous events.\n       * <br/>Synchronous events are fired on listeners before the {@link EventDispatcher#dispatchEvent} call\n       * of the related event is returned.\n       * </br>Asynchronous events are fired after the current code block is completed and possibly\n       * after more code blocks are executed. Can be considered as if the calls are performed \n       * inside setTimeout with timeout 0.\n       * \n       * @param {Boolean} [useSynch=false] true to fire events synchronously, any other value to fire them\n       * asynchronously.\n       * \n       * @see EventDispatcher#initDispatcher\n       */\n      useSynchEvents: function(useSynch) {\n        this.synchEvents = useSynch === true;\n      },\n\n      /**\n       * @private \n       * @param evt\n       * @param params\n       * @param listener\n       * @param forced\n       */\n      dispatchToOneListener: function(evt,params,listener,forced) {\n        if (this.synchEvents) {\n          this.dispatchToOneListenerExecution(evt,params,listener,true);\n        } else {\n          Executor.addTimedTask(this.dispatchToOneListenerExecution,0,this,[evt,params,listener,forced]);\n        }\n      },\n      \n      /**\n       * @private\n       * @param evt\n       * @param params\n       * @param listener\n       * @param forced\n       */\n      dispatchToOneListenerExecution: function(evt,params,listener,forced) {\n        if (listener && listener.handler[evt] && (forced || listener.listening)) {\n          try {\n            //if we don't distinguish the two cases we will have problems on IE\n            if (params) {\n              listener.handler[evt].apply(listener.handler,params);\n            } else {\n              listener.handler[evt].apply(listener.handler);\n            }\n          } catch(_e) {\n            //actionsLogger.logError(\"An error occurred while executing an event on a listener\",evt,_e);\n          }\n        }\n      },\n      \n      /**\n       * Fires an event on all the listeners.\n       * @param {String} evt The name of the event to be fired. A method with this name will be called on the listeners. \n       * @param {Array} [params] An array of objects to be used as parameters for the functions handling the event.\n       * @see EventDispatcher#useSynchEvents\n       */\n      dispatchEvent: function(evt,params) {\n        /*if (actionsLogger.isDebugLogEnabled()) {\n          actionsLogger.logDebug(\"Dispatching event on listeners\",evt);\n        }*/\n        \n        var that = this;\n        this.theListeners.forEach(function(el) {\n          that.dispatchToOneListener(evt,params,el,false);\n        });\n      }\n  };\n\n  //closure compiler exports\n  EventDispatcher.prototype[\"initDispatcher\"] = EventDispatcher.prototype.initDispatcher;\n  EventDispatcher.prototype[\"addListener\"] = EventDispatcher.prototype.addListener;\n  EventDispatcher.prototype[\"removeListener\"] = EventDispatcher.prototype.removeListener;\n  EventDispatcher.prototype[\"getListeners\"] = EventDispatcher.prototype.getListeners;\n  EventDispatcher.prototype[\"useSynchEvents\"] = EventDispatcher.prototype.useSynchEvents;\n  EventDispatcher.prototype[\"dispatchEvent\"] = EventDispatcher.prototype.dispatchEvent;\n  \n  /**\n   * extend the List class to power up the remove method:\n   * as we get from outside object but we want to wrap them\n   * before adding to the list we need a way to remove\n   * the wrapped object given the original one\n   * we also change the return value\n   * @private\n   */\n  var AsymList = function() {\n    this._callSuperConstructor(AsymList);\n  };\n  AsymList.prototype = {\n    remove: function(remEl) {\n      var i = this.find(remEl);\n      if (i < 0) {\n        return false;\n      }\n      var toRet = this.data[i];\n      toRet.listening = false;\n      this.data.splice(i,1);\n      return toRet;\n    },\n    find: function(el) {\n      for (var i=0; i<this.data.length; i++) {\n        if (this.data[i].handler == el) {\n          return i;\n        }\n      }\n      return -1;\n    },\n    asArray: function() {\n      var toRet = [];\n      this.forEach(function(aListener) {\n        toRet.push(aListener.handler);\n      });\n      return toRet;\n    }\n  };\n  Inheritance(AsymList,List);\n  \n  /**\n   * This constructor does nothing\n   * @constructor\n   *\n   * @exports EventDispatcherListener\n   * @class Simple interface to be implemented to listen for the default {@link EventDispatcher} events.\n   * Note that there is no need to implement all of the methods as if an event method is missing it is \n   * simply not fired.  \n   */\n  var EventDispatcherListener = function() {\n    \n  };\n  EventDispatcherListener.prototype = {\n      /**\n       * Event that is fired when a listener is added to an {@link EventDispatcher} through {@link EventDispatcher#addListener}\n       * @param {EventDispatcher} dispatcher the dispatcher that fired the event.\n       */\n      onListenStart: function(dispatcher) {\n        \n      },\n      /**\n       * Event that is fired when a listener is removed from an {@link EventDispatcher} through {@link EventDispatcher#removeListener}\n       * @param {EventDispatcher} dispatcher the dispatcher that fired the event.\n       */\n      onListenEnd: function(dispatcher) {\n        \n      }\n  };\n  \n  \n  return EventDispatcher;\n})(); \n  \n","import LoggerManager from \"../../src-log/LoggerManager\";\nimport BrowserDetection from \"../../src-tool/BrowserDetection\";\nimport Helpers from \"../../src-tool/Helpers\";\nimport Constants from \"../Constants\";\n\n  var MAD_LIMIT = BrowserDetection.isProbablyFX(1.5,true) ? 10 : 50;\n  \n  //we know that the problem arises on FX<1.6. for other browsers we keep the control but we wait a lot more before showing the message\n  var madLimit = MAD_LIMIT;\n  var madCreates = 0;\n  var lastTime = 0;\n  var firstTime = 0;\n  \n  var oldMadCreates = null;\n  var oldLastTime = null;\n  var oldFirstTime = null;\n  \n  var sessionLogger = LoggerManager.getLoggerProxy(Constants.SESSION);\n\n\n  var MadTester = {\n    \n    /*public*/ init: function() {\n      madLimit = MAD_LIMIT;\n      madCreates = 0;\n      lastTime = 0;\n      firstTime = 0;\n      oldMadCreates = null;\n      oldLastTime = null;\n      oldFirstTime = null;\n    },\n    \n    /*public*/ incMadTest: function() {\n      //save data for possible rollback\n      oldMadCreates = madCreates;\n      oldLastTime = lastTime;\n      oldFirstTime = firstTime;\n      \n      var nowTime = Helpers.getTimeStamp();\n      \n      if (!firstTime) {\n        //first request\n        firstTime = nowTime;\n      }\n      \n      if ((nowTime - firstTime) >= 60000) {\n        //more than 1 minute from the previous test, reset\n        madCreates = 0;\n        firstTime = nowTime;\n      }\n      \n      if (lastTime && (nowTime - lastTime) < 1000) {\n        //not enough time between create_session requests, inc\n        madCreates++;    \n      }\n  \n      lastTime = nowTime;\n    },\n    \n    /*public*/ rollbackLastMadTest: function() {\n      if (oldLastTime != lastTime) {\n        madCreates = oldMadCreates;\n        lastTime = oldLastTime;\n        firstTime = oldFirstTime;\n      }\n    },\n  \n    /*public*/ canMakeRequest: function() {\n      if (lastTime == 0) {\n        // first step. I let it go ...\n        return true;\n      } else if (!madLimit) {\n        // message already given. Return false and declare the client mad\n        return false;\n      } else if (madCreates >= madLimit) {\n        sessionLogger.logError(\"It has been detected that the JavaScript engine of this browser is not respecting the timeouts in setTimeout method calls. The Client has been disconnected from the Server in order to avoid reconnection loops. To try again, just refresh the page.\");\n        madLimit = 0;\n        return false;\n      }\n      \n      return true;\n    }\n  };\n\n  export default MadTester;\n\n","import BrowserDetection from \"./BrowserDetection\";\nimport EnvironmentStatus from \"./EnvironmentStatus\";\nimport Environment from \"./Environment\";\n\nexport default /*@__PURE__*/(function() {\n    //Environment.browserDocumentOrDie();\n  \n    //about:blank causes entry in history on chrome (from the second iFrame on...)\n    //null prevents IE from attaching\n    //since chrome 33 using null causes a request to be sent by chrome, luckily the history issue seems solved now\n    var DEFAULT_SRC = BrowserDetection.isProbablyAWebkit() && BrowserDetection.isProbablyChrome(32,true) ? null : \"about:blank\";\n\n    var handledFrames = {}; \n    \n    var IFrameHandler = {\n      \n      /**\n       * Creates an invisible iFrame and returns its window if possible.\n       * @param {String} name the name to assing to the iFrame's page\n       * @param {String} [src] the path to be used to populate the iFrame. If not specified\n       * about:blank or null will be used.\n       * @returns {Window} the window inside the iFrame or null if the iFrame wasn't\n       * generated or if the window is not accessible\n       */\n      createFrame: function(name,src) {\n        if (!Environment.isBrowserDocument()) {\n          return null;\n        }\n        var bodyEl = document.getElementsByTagName(\"BODY\")[0];\n        if (!bodyEl) {\n          return null;\n        }\n        \n        //if we already have this frame generated what should I do? \n        //if (handledFrames[name]) {\n        \n        src = src || DEFAULT_SRC;\n        \n        var iFrame = document.createElement(\"iframe\");       \n        \n        iFrame.style.visibility = \"hidden\";\n        iFrame.style.height = \"0px\";\n        iFrame.style.width = \"0px\";\n        iFrame.style.display=\"none\";\n        \n        iFrame.name = name;\n        iFrame.id = name;\n        \n        if (BrowserDetection.isProbablyIE() || BrowserDetection.isProbablyOldOpera()) {\n          // on IE6 setting src after attaching the iFrame on an https page the browser may\n          // give a non-secure alert. Some opera versions replicates the issue \n          iFrame.src = src;\n          bodyEl.appendChild(iFrame);\n        } else {\n          // setting the src before attaching the iFrame to the page has issues on firefox\n          // the set src is ignored and a different page may be loaded (if this is a reload and an iFrame was\n          // generated with a different url on the previous life of the page). Hopefully the issue is now solved.\n          bodyEl.appendChild(iFrame);\n          iFrame.src = src;\n        }\n         \n        try {\n          if (iFrame.contentWindow) {\n            try {\n              iFrame.contentWindow.name = name;\n            } catch(e) {\n              //looks like this setting is not important; moreover Opera 10 may throw an exception here \n              //even if iFrame.contentWindow is valid         \n            }\n            handledFrames[name] = iFrame.contentWindow;\n            return handledFrames[name];\n            \n          } else if (document.frames && document.frames[name]) {\n            handledFrames[name] = document.frames[name];\n            return handledFrames[name];\n            \n          } else {\n            return null;\n          }\n        } catch(_e) {\n          return null;\n        }\n        \n      },\n      \n      /**\n       * Get a previously created iFrame window or creates a new one.\n       * @param {String} name the name for the iFrame. \n       * @param {Boolean} [createIfNull] if true and a previously created\n       * iFrame with the specified name does not exists a new one will\n       * be created\n       * @param {String} [src] in case a new iFrame needs to be created\n       * this will be the src assigned to it.\n       * @returns {Window} the window inside the iFrame or null if the iFrame wasn't\n       * generated or if the window is not accessible\n       */\n      getFrameWindow: function(name,createIfNull,src) {\n        if (createIfNull && !handledFrames[name]) {\n          this.createFrame(name,src);\n        }\n        \n        return handledFrames[name] || null;\n      },\n      \n      /**\n       * Deletes the specified iFrame.\n       * @param {String} name the name of the iFrame to be deleted. \n       */\n      disposeFrame: function(name) {\n        if (handledFrames[name]) {\n          try {\n             document.getElementsByTagName(\"BODY\")[0].removeChild(document.getElementById(name));\n          } catch(_e) {\n            //don't know how to recover from here: we do nothing\n          }\n          delete(handledFrames[name]);\n         }\n       },\n      \n      /**\n       * Deletes all the generated iFrames\n       */ \n      removeFrames: function() {\n        for (var name in handledFrames) {\n          try {\n            document.getElementsByTagName(\"BODY\")[0].removeChild(document.getElementById(name));\n          } catch (_e) {\n          //we've seen IE7 passing from here\n          }\n        }\n        \n        handledFrames = {};\n      }\n      \n    };\n    \n    IFrameHandler[\"createFrame\"] = IFrameHandler.createFrame;\n    IFrameHandler[\"getFrameWindow\"] = IFrameHandler.getFrameWindow;\n    IFrameHandler[\"disposeFrame\"] = IFrameHandler.disposeFrame;\n    IFrameHandler[\"removeFrames\"] = IFrameHandler.removeFrames;\n    \n    \n    EnvironmentStatus.addUnloadHandler(IFrameHandler.removeFrames);\n    return IFrameHandler;\n})();\n  \n","/*\n  Copyright (c) Lightstreamer Srl\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\nimport Executor from \"./Executor\";\n\nexport default /*@__PURE__*/(function() {\n  var TOUCH_TIMEOUT = 5000;\n  /**\n   * This constructor simply calls the {@link Dismissable#initTouches initTouches} method. This abstract class is supposed \n   * to be extended using {@link module:Inheritance} extension.\n   * It can be either light extended or fully extended. When light extension is performed\n   * the {@link Dismissable#initTouches initTouches} method should be called in the extended class constructor.\n   * <br/>For this class to properly work the {@link Dismissable#clean clean} method that releases the resources needs to be implemented.\n   * @constructor\n   * \n   * @exports Dismissable\n   * @class Abstract class. Instances of extended classes can be used to keep track of the uses of a certain resources that can then be trashed \n   * after a timeout once it is no more used by anyone.\n   */\n  var Dismissable = function() {\n    this.initTouches();\n  };\n  \n  Dismissable.prototype = {\n    \n      /**\n       * Abstract method that needs to be implemented to clean the used resources. This method is called internally after\n       * a timeout when all of the uses ( i.e. calls to {@link Dismissable#touch touch} ) were dismissed (using {@link Dismissable#dismiss dismiss}).\n       * @abstract\n       */\n      clean: function() {}, \n      \n      /**\n       * Method to be called to initialize the use of the Dismissable features.\n       * If not called {@link Dismissable#touch touch} and {@link Dismissable#dismiss dismiss} calls will fail. Ideally this method\n       * should be called in the constructor.\n       * @protected\n       *\n       * @param {Number} timeout the time in ms to wait after all the uses were dismissed before actually clean the resources.\n       * If a new call to {@link Dismissable#touch touch} is performed before the timeout is expired the clean is postponed until the \n       * touches count is back to 0 again. If not specified 5000 (5 seconds) is used.\n       */\n      initTouches: function(timeout) {\n        this.inUse = 0;\n        this.touchPhase = 0;\n        this.timeout = timeout || TOUCH_TIMEOUT;\n      },\n      \n      /**\n       * @private\n       */\n      verifyTouches: function(ph) {\n        if (ph == this.touchPhase && this.inUse <= 0) {\n          this.clean();\n        }\n      },\n      \n      /**\n       * Method to be called to declare that this instance is not in use anymore by some component. \n       * This method should only be called once per each previous {@link Dismissable#touch touch} call or the resource may be \n       * dismissed while some piece of code still needs it.\n       */\n      dismiss: function() {\n        this.inUse--;\n        \n        if (this.inUse <= 0) {\n          Executor.addTimedTask(this.verifyTouches,this.timeout,this,[this.touchPhase]);\n        }\n      },\n      \n      /**\n       * Method to be called to declare that this instance is in use by some component. Per each\n       * touch call a {@link Dismissable#dismiss dismiss} call should be called at some point or the resources will \n       * never be released.\n       */\n      touch: function() {\n        this.touchPhase++;\n        if (this.inUse < 0){\n          this.inUse=0;\n        }\n        this.inUse++;\n      }\n      \n      \n  };\n  \n  //closure compiler exports\n  Dismissable.prototype[\"touch\"] = Dismissable.prototype.touch;\n  Dismissable.prototype[\"dismiss\"] = Dismissable.prototype.dismiss;\n  Dismissable.prototype[\"clean\"] = Dismissable.prototype.clean;\n  Dismissable.prototype[\"initTouches\"] = Dismissable.prototype.initTouches;\n  \n  return Dismissable;\n})();\n  \n  \n","/**\n * @since January 2018\n */\n\n    \n    /**\n     * Converts a string containing sequences as {@code %<hex digit><hex digit>} into a new string \n     * where such sequences are transformed in UTF-8 encoded characters. <br> \n     * For example the string \"a%C3%A8\" is converted to \"aè\" because the sequence 'C3 A8' is \n     * the UTF-8 encoding of the character 'è'.\n     */\n    export default {unquote: decodeURIComponent};\n","/*\n  Copyright (c) Lightstreamer Srl\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nexport default /*@__PURE__*/(function() { \n  /**\n   * Creates a Matrix instance; if specified the matrix is initialized with the given object.\n   * @constructor\n   * \n   * @param {Object} inputMatrix the matrix to initialize this object with.\n   * \n   * @exports Matrix\n   * @class Very simple object-backed bi-dimensional Matrix implementation.\n   */\n  var Matrix = function(inputMatrix) {\n    /**\n     * @private\n     */\n    this.matrix = inputMatrix || {};\n  };\n  \n  \n  Matrix.prototype = {\n    /**\n     * Inserts an element in the matrix. If another element is already present in the\n     * specified position it is overwritten.\n     * \n     * @param insObject {Object} the element to be added.\n     * @param row {String|Number} the row in the matrix where the element is placed.\n     * @param column {String|Number} the column in the row where the element is placed.\n     */ \n    insert: function(insObject,row,column) {\n      if (!(row in this.matrix)) {\n        this.matrix[row] = {};\n      }\n      this.matrix[row][column] = insObject;\n    },\n    \n    /**\n     * Gets the element at the specified position in the matrix. If the position is empty null is returned.\n     * @param row {String|Number} the row in the matrix where the element is located.\n     * @param column {String|Number} the column in the row where the element is located.\n     * @returns {Object} the element at the specified location or null.\n     */\n    get: function(row,column) {\n      if (row in this.matrix && column in this.matrix[row]) {\n        return this.matrix[row][column];\n      }\n      return null;\n    },\n    /**\n     * Removes the element at the specified position in the matrix.\n     * @param row {String|Number} the row in the matrix where the element is located.\n     * @param column {String|Number} the column in the row where the element is located.\n     */\n    del: function(row, column) {\n      if (!row in this.matrix) {\n        return;\n      }\n      if (column in this.matrix[row]) {\n        delete this.matrix[row][column];\n      }\n        \n      for (var i in this.matrix[row]) {\n        //at least a cell in the row\n        return;\n      }\n      //row is empty, get rid of it\n      delete this.matrix[row];\n    },\n    /**\n     * Inserts a full row in the matrix. If another row is already present in the\n     * specified position it is overwritten.\n     *  \n     * @param insRow {Object} the row to be added.\n     * @param row {String|Number} the row position.\n     */\n    insertRow: function(insRow, row) {\n      this.matrix[row] = insRow;\n    },\n    /**\n     * @deprecated\n     */\n    getRow: function(row) {\n      if (row in this.matrix) {\n        return this.matrix[row];\n      }\n      return null;\n    },\n    /**\n     * Removes the row at the specified position in the matrix.\n     * @param row {String|Number} the row position.\n     */\n    delRow: function(row) {\n      if (row in this.matrix) {\n        delete this.matrix[row];\n      }\n    },\n    \n    /**\n     * @deprecated\n     */\n    getEntireMatrix: function() {\n      return this.matrix;\n    },\n    \n    /**\n     * Verify if there are elements in the grid\n     * @returns true if the matrix is empty, false otherwise\n     */\n    isEmpty: function() {\n      for (var row in this.matrix) {\n        return false;\n      }\n      return true;\n    },\n   \n    /**\n     * Executes a given callback passing each element of the Matrix. The callback\n     * receives the element together with its coordinates.<br/>  \n     * Callbacks are executed synchronously before the method returns: calling \n     * insert or delete methods during callback execution may result in \n     * a wrong iteration.\n     * \n     * @param {ForEachCallback} callback The callback to be called.\n     */\n    forEachElement: function(callback) {\n      for (var row in this.matrix) {\n        this.forEachElementInRow(row,callback);\n      }\n      \n      /*this.forEachRow(function(row) {\n        that.forEachElementInRow(row,callback);\n      });*/\n    },\n    \n    /**\n     * Executes a given callback passing the key of each row containing at least one element.\n     * @param {RowsCallback} callback The callback to be called. \n     */\n    forEachRow: function(callback) {\n      for (var row in this.matrix) {\n        callback(row);\n      }\n    },\n    \n    /**\n     * Executes a given callback passing each element of the specified row. The callback\n     * receives the element together with its coordinates.<br/>  \n     * Callbacks are executed synchronously before the method returns: calling \n     * insert or delete methods during callback execution may result in \n     * a wrong iteration.\n     * \n     * @param {ForEachCallback} callback The callback to be called.\n     */\n    forEachElementInRow: function(row,callback) {\n      var rowElements = this.matrix[row];\n      for (var col in rowElements) {\n        callback(rowElements[col],row,col);\n      }\n    }\n    \n  };\n  \n  /**\n   * Callback for {@link Matrix#forEachElement} and {@link Matrix#forEachElementInRow}\n   * @callback ForEachCallback\n   * @param {Object} value the element.\n   * @param {String|Number} row the row where the element is located\n   * @return {String|Number} col the column in the row where the element is located \n   */\n  \n  /**\n   * Callback for {@link Matrix#forEachRow}\n   * @callback RowsCallback\n   * @param {String|Number} row a non-empty row in the Matrix.\n   */\n  \n  Matrix.prototype[\"insert\"] = Matrix.prototype.insert; \n  Matrix.prototype[\"get\"] = Matrix.prototype.get;\n  Matrix.prototype[\"del\"] = Matrix.prototype.del;\n  Matrix.prototype[\"insertRow\"] = Matrix.prototype.insertRow;\n  Matrix.prototype[\"getRow\"] = Matrix.prototype.getRow;\n  Matrix.prototype[\"delRow\"] = Matrix.prototype.delRow;\n  Matrix.prototype[\"getEntireMatrix\"] = Matrix.prototype.getEntireMatrix;\n  Matrix.prototype[\"forEachElement\"] = Matrix.prototype.forEachElement; \n  Matrix.prototype[\"forEachElementInRow\"] = Matrix.prototype.forEachElementInRow;\n  Matrix.prototype[\"forEachRow\"] = Matrix.prototype.forEachRow;\n  Matrix.prototype[\"isEmpty\"] = Matrix.prototype.isEmpty; \n  \n  \n  return Matrix;\n})();\n  \n  ","import Helpers from \"../../src-tool/Helpers\";\nimport IllegalArgumentException from \"../../src-tool/IllegalArgumentException\";\n    \n    var NO_VALID_ARRAY = \"Please specifiy a valid array\";\n    var NO_EMPTY = \" name cannot be empty\";\n    var NO_SPACE = \" name cannot contain spaces\";\n    var NO_NUMBER = \" name cannot be a number\";\n    \n    function checkItemNames(_array, head) {\n        if (!Helpers.isArray(_array)) {\n            throw new IllegalArgumentException(NO_VALID_ARRAY);\n        }\n        for (var i = 0; i < _array.length; i++) {\n            if (!_array[i]) {\n                throw new IllegalArgumentException(head+NO_EMPTY);\n\n            } else if (_array[i].indexOf(\" \") > -1) {\n                // An item name cannot contain spaces\n                throw new IllegalArgumentException(head+NO_SPACE);\n\n            } else if (!isNaN(_array[i])) {\n                // An item name cannot be a number\n                throw new IllegalArgumentException(head+NO_NUMBER);\n            }\n        }\n    }\n\n    function checkFieldNames(_array, head) {\n        if (!Helpers.isArray(_array)) {\n            throw new IllegalArgumentException(NO_VALID_ARRAY);\n        }\n        for (var i = 0; i < _array.length; i++) {\n            if (!_array[i]) {\n                throw new IllegalArgumentException(head+NO_EMPTY);\n\n            } else if (_array[i].indexOf(\" \") > -1) {\n                // A field name cannot contain spaces\n                throw new IllegalArgumentException(head+NO_SPACE);\n            }\n        }\n    }\n      \n    export default {\n        checkItemNames: checkItemNames,\n        checkFieldNames: checkFieldNames,\n        NO_SCHEMA_NOR_LIST: \"The field list/field schema of this Subscription was not initiated\",\n        NO_GROUP_NOR_LIST: \"The item list/item group of this Subscription was not initiated\",\n        USE_GET_ITEM_GROUP: \"This Subscription was initiated using an item group, use getItemGroup instead of using getItems\",\n        USE_GET_ITEMS: \"This Subscription was initiated using an item list, use getItems instead of using getItemGroup\",\n        USE_GET_FIELD_SCHEMA: \"This Subscription was initiated using a field schema, use getFieldSchema instead of using getFields\",\n        USE_GET_FIELDS: \"This Subscription was initiated using a field list, use getFields instead of using getFieldSchema\",\n        MAX_BUF_EXC: \"The given value is not valid for this setting; use null, 'unlimited' or a positive number instead\",\n        MAX_FREQ_EXC: \"The given value is not valid for this setting; use null, 'unlimited', 'unfiltered' or a positive number instead\",\n        YES_FIELDS_NO_ITEMS: \"Please specify a valid item or item list\",\n        NO_VALID_FIELDS: \"Please specify a valid field list\"\n    };\n","/*\n  Copyright (c) Lightstreamer Srl\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\nexport default /*@__PURE__*/(function() {\n  /**\n   * @private\n   */\n  var logLevel = {\n    \"FATAL\": 5,\n    \"ERROR\": 4,\n    \"WARN\": 3,\n    \"INFO\": 2,\n    \"DEBUG\": 1\n  };\n  \n  /*\n  bring around numbers instead of names?\n  var logNames = {\n      5: \"FATAL\",\n      4: \"ERROR\",\n      3: \"WARN\",\n      2: \"INFO\",\n      1: \"DEBUG\"\n  }*/\n\n  /**\n   * @exports SimpleLogLevels\n   */\n  var SimpleLogLevels = {\n    /**\n     * Coupling log level names with priority.\n     * @static\n     *\n     * @param {String} level the level to be converted into priority. Admitted values are \n     * \"FATAL\" (5), \"ERROR\" (4),  \"WARN\" (3), \"INFO\" (2), \"DEBUG\" (1). \n     * @returns {Number} a numeric level representing the priority of the specified log level.\n     * if an invalid level is specified 0 is returned.\n     */\n    priority: function(level) {\n      return logLevel[level] || 0;\n    }\n    /*\n    name: function(level) {\n      logNames[level];\n    }  \n    */\n  };\n  \n  SimpleLogLevels[\"priority\"] = SimpleLogLevels.priority;\n  //SimpleLogLevels[\"name\"] = SimpleLogLevels.name;\n  \n  return SimpleLogLevels;\n})();\n    \n  \n  ","/*\n  Copyright (c) Lightstreamer Srl\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\nimport SimpleLogLevels from \"./SimpleLogLevels\";\n\nexport default /*@__PURE__*/(function() {\n  /**\n   * This is an abstract class; no instances of this class should be created.\n   * @constructor\n   * \n   * @param {String} level The threshold level at which the SimpleLogAppender is created.\n   * It should be one of \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\" and \"FATAL\". If not\n   * or wrongly specified INFO is assumed.\n   * @param {String} category The category this appender should listen to.\n   * If not specified the appender will get log for every available category.\n   * \n   * @exports SimpleLogAppender\n   * @class Abstract class serving as a base class for appender classes for the {@link SimpleLoggerProvider}.\n   * An instance of an appender class can be added\n   * to a {@link SimpleLoggerProvider} instance in order to consume log lines.\n   * <br/>Various classes that extend LogAppender and that consume the log lines\n   * in various ways are provided. The definition of custom appender\n   * implementations is supported through the usage of Inheritance from the utility-toolkit.\n   */\n  var SimpleLogAppender = function(level,category) {\n \n    /**\n     * @private\n     */\n    this.myLevel = SimpleLogLevels.priority(level) ? level : \"INFO\";\n    \n    /**\n     * @private\n     */\n    this.catFilter = category || \"*\";\n    \n    /**\n     * @private\n     */\n    this.myLoggerProvider = null;\n\n  };\n\n  SimpleLogAppender.prototype = {\n      \n    /**\n     * Called by SimpleLoggerProvider to notify itself to a newly added appender.\n     * @param {SimpleLoggerProvider} loggerProvider the SimpleLoggerProvider instance handling this appender. \n     */\n    setLoggerProvider: function(loggerProvider) {\n      if (loggerProvider && loggerProvider.getLogger && loggerProvider.forceLogLevelUpdate) {\n        this.myLoggerProvider = loggerProvider;\n      }\n    },\n    \n    /**\n     * This implementation is empty. \n     * This is the method that is supposedly written by subclasses to publish log messages\n     * \n     * @param {String} category the logger category that produced the given message.\n     * @param {String} level the logging level of the given message. It should be one of DEBUG INFO WARN ERROR FATAL.\n     * @param {String} mex the message to be logged. It could be a String instance, an Error instance or any other\n     * object, provided that it has a toString method.\n     * @param {String} header a header for the message\n     */\n    log: function(category, level, mex, header) {\n      \n    },\n    \n    /**\n     * Utility method that can be used by subclasses to join various info in a single line.\n     * The message will be composed this way:  category + \" | \" + level + \" | \" + header + \" | \" + mex\n     * @protected \n     * @param {String} category the message category\n     * @param {String} level the message level\n     * @param {String} mex the message itself\n     * @param {String} header a custom header\n     * @returns {String}\n     */\n    composeLine: function(category, level, mex, header) {\n      return category + \" | \" + level + \" | \" + header + \" | \" + mex;\n    },\n     \n    /**\n     * Inquiry method that returns the current threshold level of this SimpleLogAppender \n     * instance. \n     * \n     * @return {String} the level of this SimpleLogAppender instance. \n     * It will be one of \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\" and \"FATAL\".\n     */\n    getLevel: function() {\n      return this.myLevel; \n    },\n    \n    /**\n     * Setter method that changes the current threshold level of this \n     * SimpleLogAppender instance. \n     * The filter can be changed at any time and will affect subsequent log lines\n     *\n     * @param {String} [level] The new level for this SimpleLogAppender instance. \n     * It should be one of \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\" and \"FATAL\". If not or wrongly\n     * specified INFO will be used. \n     */\n    setLevel: function(level) {\n      level = SimpleLogLevels.priority(level) ? level : \"INFO\";\n      this.myLevel = level; \n      if ( this.myLoggerProvider != null ) {\n        this.myLoggerProvider.forceLogLevelUpdate();\n      }\n    },\n    \n    /**\n     * Inquiry method that returns the category for this SimpleLogAppender instance. \n     * A SimpleLogAppender only receives log lines from the {@link Logger}\n     * associated to the returned category, unless\n     * \"*\" is returned, in which case it receives log from all loggers.\n     * \n     * @return {String} The category of this SimpleLogAppender instance, or \"*\".\n     */\n    getCategoryFilter: function() {\n      return this.catFilter; \n    },\n    \n    /**\n     * Setter method that changes the current category of this \n     * SimpleLogAppender instance. \n     * <br/>This SimpleLogAppender will only receive log lines from the {@link Logger}\n     * associated to the specified category, unless\n     * \"*\" is specified, in which case it will receive log from all loggers.\n     * <br/>the filter can be changed at any time and will affect subsequent log lines.\n     * \n     * @param {String} [category] the new category for this SimpleLogAppender, or \"*\". \n     * If not specified \"*\" is assumed\n     */\n    setCategoryFilter: function(category) {\n      this.catFilter = category || \"*\"; \n    }\n  }; \n  \n  //google closure exports\n  SimpleLogAppender.prototype[\"log\"] = SimpleLogAppender.prototype.log;\n  SimpleLogAppender.prototype[\"setLoggerProvider\"] = SimpleLogAppender.prototype.setLoggerProvider;\n  SimpleLogAppender.prototype[\"composeLine\"] = SimpleLogAppender.prototype.composeLine;\n  SimpleLogAppender.prototype[\"getLevel\"] = SimpleLogAppender.prototype.getLevel;\n  SimpleLogAppender.prototype[\"setLevel\"] = SimpleLogAppender.prototype.setLevel;\n  SimpleLogAppender.prototype[\"getCategoryFilter\"] = SimpleLogAppender.prototype.getCategoryFilter;\n  SimpleLogAppender.prototype[\"setCategoryFilter\"] = SimpleLogAppender.prototype.setCategoryFilter;\n  \n  \n  return SimpleLogAppender;\n})();\n","/*\n  Copyright (c) Lightstreamer Srl\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\nimport Inheritance from \"../src-tool/Inheritance\";\nimport SimpleLogAppender from \"./SimpleLogAppender\";\nimport SimpleLogLevels from \"./SimpleLogLevels\";\n\nexport default /*@__PURE__*/(function() {\n  /**\n   * Constructor for BufferAppender.\n   * @constructor\n   * \n   * @param {String} level The threshold level at which the SimpleLogAppender is created.\n   * It should be one of \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\" and \"FATAL\". If not\n   * or wrongly specified INFO is assumed.\n   * @param {String} category The category this appender should listen to.\n   * If not specified the appender will get log for every available category.\n   * See {@link SimpleLogAppender#setCategoryFilter}.\n   * @param {Number} size The maximum number of log messages stored in the internal buffer. \n   * If 0 or no value is passed, unlimited is assumed.\n   * \n   * @exports BufferAppender\n   * @class BufferAppender extends SimpleLogAppender and implements an internal buffer \n   * store for log messages. The messages can be extracted from the buffer when needed.\n   * The buffer size can be limited or unlimited. If limited it is implemented as \n   * a FIFO queue. \n   *\n   * @extends SimpleLogAppender\n   */\n  var BufferAppender = function(level, category, size) {\n\n    this._callSuperConstructor(BufferAppender, [level, category]);\n  \n    //Buffer size\n    if ( !size || size < 0 ) {\n      this.historyDim = 0;\n    } else {\n      this.historyDim = size;\n    }\n\n    //first element in the buffer\n    this.first = 0;\n\n    //last element\n    this.last = -1;\n\n    //the buffer\n    this.buffer = {};\n    \n  };\n\n  BufferAppender.prototype = {\n      \n    /**\n     * Operation method that resets the buffer making it empty.\n     */\n    reset: function() {\n      this.first = 0;\n      this.last = -1;\n      this.buffer = {};\n    },\n\n    /**\n     * Retrieve log messages from the buffer.\n     * The extracted messages are then removed from the internal buffer.\n     *\n     * @param {String} [sep] separator string between the log messages in the result string. If null or not specified \"\\n\" is used.\n     * \n     * @return {String} a concatenated string of all the log messages that have been retrieved.\n     */\n    extractLog: function(sep) {\n      var res = this.getLog(null,sep);\n      this.reset();\n      return res;\n    },\n    \n    /**\n     * Retrieve log messages from the buffer.\n     * The extracted messages are NOT removed from the internal buffer.\n     *\n     * @param {Number} [maxRows] the number of log lines to be retrieved. If not specified all the available lines are retrieved.\n     * @param {String} [sep] separator string between the log messages in the result string. If not specified \"\\n\" is used.\n     * @param {String} [level] the level of the log to be retrieved.\n     * \n     * @return {String} a concatenated string of all the log messages that have been retrieved.\n     */\n    getLog: function(maxRows, sep, level) {\n      var i;\n      var _dump = \"\";\n        \n      level = level || \"DEBUG\";\n        \n      if (!maxRows) {\n        i = this.first;\n      } else {   \n        i = this.last - maxRows + 1;      \n        if (i < this.first) {\n          i = this.first;\n        }\n      }\n       \n      sep = sep || \"\\n\";\n      \n      var priority = SimpleLogLevels.priority(level);\n      while (i <= this.last) {\n        \n         if ( SimpleLogLevels.priority(this.buffer[i].level) >= priority ) {\n          _dump += this.buffer[i].mex;\n        }\n        _dump += sep;\n        i++;\n      }\n\n      return _dump;\n    },\n    \n    /**\n     * Add a log message in the internal buffer.\n     * \n     * @param {String} category the logger category that produced the given message.\n     * @param {String} level the logging level of the given message. It should be one of DEBUG INFO WARN ERROR FATAL.\n     * @param {String} mex the message to be logged. It could be a String instance, an Error instance or any other\n     * object, provided that it has a toString method.\n     * @param {String} header a header for the message\n     */\n    log: function(category, level, mex, header) {\n      var i = ++this.last;\n      \n      if ( this.historyDim != 0 && i >= this.historyDim ) {\n        this.buffer[this.first] = null;\n        this.first++;\n      }\n      \n      mex = this.composeLine(category, level, mex, header);\n      this.buffer[i] = {\n          level: level,\n          mex: mex\n      };\n\n    },\n    \n    /**\n     * Gets the number of buffered lines\n     * @returns {Number} the number of buffered lines\n     */\n    getLength: function() {\n      return this.last-this.first+1;\n    }\n    \n  \n\n  };\n  \n  BufferAppender.prototype[\"reset\"] = BufferAppender.prototype.reset;\n  BufferAppender.prototype[\"getLog\"] = BufferAppender.prototype.getLog;\n  BufferAppender.prototype[\"extractLog\"] = BufferAppender.prototype.extractLog;\n  BufferAppender.prototype[\"log\"] = BufferAppender.prototype.log;\n  BufferAppender.prototype[\"getLength\"] = BufferAppender.prototype.getLength;\n  \n  Inheritance(BufferAppender, SimpleLogAppender);\n  return BufferAppender;\n})();  \n","import Inheritance from \"../src-tool/Inheritance\";\nimport BufferAppender from \"../src-log/BufferAppender\";\nimport Executor from \"../src-tool/Executor\";\nimport IllegalArgumentException from \"../src-tool/IllegalArgumentException\";\n\nexport default /*@__PURE__*/(function() {\n  /**\n   * Constructor for RemoteAppender.\n   * @constructor\n   * \n   * @exports RemoteAppender\n   * \n   * @throws {IllegalArgumentException} if the LightstreamerClient parameter is missing\n   * \n   * @param {String} level The threshold level at which the RemoteAppender is created.\n   * It should be one of \"WARN\", \"ERROR\" and \"FATAL\".\n   * The use for \"DEBUG\" and \"INFO\" levels is not supported on this appender.\n   * @param {String} category The category this appender should listen to.\n   * See {@link SimpleLogAppender#setCategoryFilter}.\n   * @param {LightstreamerClient} lsClient An instance of LightstreamerClient object used to send \n   * log messages back to the server.\n   * \n   * @class RemoteAppender extends SimpleLogAppender and implements the publishing \n   * of log messages by sending them back to Lightstreamer Server.\n   * The Server will log the messages through its \"LightstreamerLogger.webclient\" logger\n   * at DEBUG level.\n   * <BR>Note that the delivery of some log messages to the Server may fail.\n   * \n   * @extends SimpleLogAppender\n   */\n  var RemoteAppender = function(level, category, lsClient) {\n    this._callSuperConstructor(RemoteAppender, [level, category, 10]);\n        \n    this.waiting = false;\n    \n    if (!lsClient) {\n      throw new IllegalArgumentException(\"a LightstreamerClient instance is necessary for a RemoteAppender to work.\");\n    }\n    \n    this._client = lsClient;\n  };\n  \n  \n  RemoteAppender.prototype = {\n\n  \n    /**\n     * Publish a log message by sending it to Lightstreamer server by LightstreamerClient object.\n     * Specific layout: 'LS_log1=HH:mm:ss.ccc - category : message'.\n     * \n     * @param category The logger category that produced the given message.\n     * @param level The logging level of the given message. It should be one of DEBUG INFO WARN ERROR FATAL\n     * constants values. \n     * @param mex The message to be logged. It could be a String instance, an Error instance or any other\n     * object, provided that it has a toString method.\n     * \n     */\n    log: function(category, level, mex, header) {\n      this._callSuperMethod(RemoteAppender,\"log\",[category, level, mex, header]);\n      this._flush(true);\n    },\n    \n    /**\n     * @private \n     */\n    _flush: function(syncCall) {\n      if (this.getLength() <= 0) {\n        return;\n      }\n      \n      if (this._client.getStatus().indexOf(\"CONNECTED\") == 0) {\n        var sendObj = this.extractLogForNetwork();\n\n        if (this._client.sendLog(sendObj)) {\n          this.reset();\n          this.waiting = false;\n          return;\n        }\n      } \n      \n      if (!this.waiting || !syncCall) {\n        this.waiting = true;\n        Executor.addTimedTask(this._flush,2000,this);\n      }\n    },\n    \n    extractLogForNetwork: function(maxRows,sepBefore) {\n      var orig = this._callSuperMethod(RemoteAppender,\"extractLog\",[\"LS_log\"]);\n      orig = orig.split(\"LS_log\");\n      \n      var sepBefore = \"LS_log\";\n      var dump = {};\n      for (var i=0; i<orig.length; i++) {\n        if (orig[i].length == 0) {\n          continue;\n        }\n        var name = sepBefore+(i+1);\n        dump[name] = encodeURIComponent(orig[i].replace(/[\\n\\r\\f]/g,\"||\"));\n      }\n      \n      return dump;\n    },\n    \n    \n    /**\n     * Disabled\n     */\n    extractLog: function() {\n      return null;\n    }\n  };\n\n  RemoteAppender.prototype[\"extractLog\"] = RemoteAppender.prototype.extractLog;\n  RemoteAppender.prototype[\"log\"] = RemoteAppender.prototype.log;\n  \n  Inheritance(RemoteAppender, BufferAppender,false,true);\n  return RemoteAppender;\n})();\n\n","/*\n  Copyright (c) Lightstreamer Srl\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\nimport Inheritance from \"../src-tool/Inheritance\";\nimport SimpleLogAppender from \"./SimpleLogAppender\";\nimport IllegalStateException from \"../src-tool/IllegalStateException\";\n\nexport default /*@__PURE__*/(function() {\n  /**\n   * Constructor for ConsoleAppender.\n   * @constructor\n   * \n   * @throws {IllegalStateException} if the environment does not have any console object \n   * or if such console is currently inaccessible. \n   * \n   * @param {String} level The threshold level at which the SimpleLogAppender is created.\n   * It should be one of \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\" and \"FATAL\". If not\n   * or wrongly specified INFO is assumed.\n   * @param {String} category The category this appender should listen to.\n   * If not specified the appender will get log for every available category.\n   * See {@link SimpleLogAppender#setCategoryFilter}.\n   * \n   * @exports ConsoleAppender\n   * @class ConsoleAppender extends SimpleLogAppender printing messages\n   * on the console.\n   * \n   * @extends SimpleLogAppender\n   */\n  var ConsoleAppender = function(level, category) {\n    if (typeof console == \"undefined\") {\n      throw new IllegalStateException(\"This appender can't work if a console is not available. Enable the Browser console if possible or change appender.\");\n    }\n    \n    this._callSuperConstructor(ConsoleAppender, [level, category]);\n  };\n\n \n  ConsoleAppender.prototype = {\n\n    /**\n     * Publish a log message on the console. \n     * \n     * @param {String} category the logger category that produced the given message.\n     * @param {String} level the logging level of the given message. It should be one of DEBUG INFO WARN ERROR FATAL.\n     * @param {String} mex the message to be logged. It could be a String instance, an Error instance or any other\n     * object, provided that it has a toString method.\n     * @param {String} header a header for the message\n     * \n     */\n    log: function(category, level, mex, header) {\n      mex = this.composeLine(category, level, mex, header);\n      switch(level) {\n        case \"DEBUG\": \n          if (console.debug) {\n            console.debug(mex);\n            return;\n          }\n          break;\n        case \"INFO\": \n          if (console.info) {\n            console.info(mex);\n            return;\n          }\n          break;\n        case \"WARN\": \n          if (console.warn) {\n            console.warn(mex);\n            return;\n          }\n          //do not break\n        default: //FATAL || ERROR\n          if (console.error) {\n            console.error(mex);\n            return;\n          }\n      };\n      console.log(mex);\n    }\n  };\n  \n  //c�losure compile exports\n  ConsoleAppender.prototype[\"log\"] = ConsoleAppender.prototype.log;  \n  \n  Inheritance(ConsoleAppender, SimpleLogAppender);\n  return ConsoleAppender;\n})();\n","/*\n  Copyright (c) Lightstreamer Srl\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\nimport Inheritance from \"../src-tool/Inheritance\";\nimport SimpleLogAppender from \"./SimpleLogAppender\";\n\nexport default /*@__PURE__*/(function() {\n  /**\n   * Callback for {@link FunctionAppender}\n   * @callback FunctionLogConsumer\n   * @param {String} message the log message to be consumed. If a more detailed insight\n   * on the message details is required it is suggested to implement a custom {@link SimpleLogAppender}. \n   */\n  \n  /**\n   * Constructor for FunctionAppender.\n   * @constructor\n   * \n   * @param {String} level The threshold level at which the SimpleLogAppender is created.\n   * It should be one of \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\" and \"FATAL\". If not\n   * or wrongly specified INFO is assumed.\n   * @param {String} category The category this appender should listen to.\n   * If not specified the appender will get log for every available category.\n   * See {@link SimpleLogAppender#setCategoryFilter}.\n   * @param {FunctionLogConsumer} functionToCall a well defined function to call passing log messages.\n   * The function will be invoked with a single String argument. If a more detailed insight\n   * on the message details is required it is suggested to implement a custom SimpleLogAppender. \n   * @param {Object} [objectToApplyTo] an instance of object to apply the functionToCall to.\n   * \n   * @exports FunctionAppender\n   * @class FunctionAppender extends SimpleLogAppender and implements the publishing \n   * of log messages by invocation of a custom function.\n   *\n   * @extends SimpleLogAppender\n   */\n  var FunctionAppender = function(level, category, functionToCall, objectToApplyTo) {\n    this._callSuperConstructor(FunctionAppender, [level, category]);\n          \n    this.functionToCall = functionToCall;\n    this.objectToApplyTo = objectToApplyTo || null;\n  };\n\n    \n  FunctionAppender.prototype = {\n   \n    /**\n     * Publish a log message by calling the specified function.\n     * \n     * @param {String} category the logger category that produced the given message.\n     * @param {String} level the logging level of the given message. It should be one of DEBUG INFO WARN ERROR FATAL.\n     * @param {String} mex the message to be logged. It could be a String instance, an Error instance or any other\n     * object, provided that it has a toString method.\n     * @param {String} header a header for the message\n     * \n     */\n    log: function(category, level, mex, header) {\n      var toCall = this.functionToCall;\n        \n      if (toCall.apply) {\n        var _line = this.composeLine(category, level, mex, header);\n        try {\n          toCall.apply(this.objectToApplyTo, [_line]);\n        } catch(_e) {\n          // Nothing to do.\n        }\n      } //else no way to call it, btw it should never be the case as all the supported browser have the apply method\n    }\n  };\n  \n  FunctionAppender.prototype[\"log\"] = FunctionAppender.prototype.log;  \n\n  Inheritance(FunctionAppender, SimpleLogAppender); \n  return FunctionAppender;\n})();\n","/*\n  Copyright (c) Lightstreamer Srl\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\nimport SimpleLogLevels from \"./SimpleLogLevels\";\n\nexport default /*@__PURE__*/(function() {\n  /**\n   * Constructor for SimpleLogger.\n   * @constructor\n   *\n   * @param provider A SimpleLoggerProvider object instance used to dispatch the log messages\n   * produced by this Logger instance.\n   * @param category A category name for the Logger instance.\n   * \n   * @exports SimpleLogger\n   * @class {@link Logger} implementation returned by the {@link SimpleLoggerProvider}.\n   * @extends Logger\n   */\n  var SimpleLogger = function(provider, category) {\n    \n    this.logProvider = provider;\n    this.category = category;\n    \n    this.minLevel = \"DEBUG\";\n  };\n  \n  SimpleLogger.prototype = {\n      \n    /**\n     * Receives log messages at FATAL level.\n     * \n     * @param {String} message The message to be logged.  \n     * @param {Error} [exception] An Exception instance related to the current log message.\n     * \n     * @see LoggerProvider\n     */\n    fatal: function(mex,exception) {\n      if ( this.isFatalEnabled() ) {\n        this.logProvider.dispatchLog(this.category, \"FATAL\", mex);\n      }\n      return;\n    },    \n    \n    /**\n     * Checks if this Logger is enabled for the FATAL level. \n     * The method should return true if this Logger is enabled for FATAL events, \n     * false otherwise.\n     * <BR>This property is intended to let the library save computational cost by suppressing the generation of\n     * log FATAL statements. However, even if the method returns false, FATAL log \n     * lines may still be received by the {@link SimpleLogger#fatal} method\n     * and should be ignored by the Logger implementation. \n     * \n     * @return {boolean} true if FATAL logging is enabled, false otherwise\n     */\n    isFatalEnabled: function() {\n      return (SimpleLogLevels.priority(\"FATAL\")>=SimpleLogLevels.priority(this.minLevel));\n    },\n    \n    /**\n     * Receives log messages at ERROR level.\n     * \n     * @param {String} message The message to be logged.  \n     * @param {Error} [exception] An Exception instance related to the current log message.\n     */\n    error: function(mex,exception) {\n      if ( this.isErrorEnabled() ) {\n        this.logProvider.dispatchLog(this.category, \"ERROR\", mex);\n      }\n      return;\n    },    \n      \n    /**\n     * Checks if this Logger is enabled for the ERROR level. \n     * The method should return true if this Logger is enabled for ERROR events, \n     * false otherwise.\n     * <BR>This property is intended to let the library save computational cost by suppressing the generation of\n     * log ERROR statements. However, even if the method returns false, ERROR log \n     * lines may still be received by the {@link SimpleLogger#error} method\n     * and should be ignored by the Logger implementation. \n     * \n     * @return {boolean} true if ERROR logging is enabled, false otherwise\n     */\n    isErrorEnabled: function() {\n      return (SimpleLogLevels.priority(\"ERROR\")>=SimpleLogLevels.priority(this.minLevel));\n    },\n    \n    /**\n     * Receives log messages at WARN level.\n     * \n     * @param {String} message The message to be logged.  \n     * @param {Error} [exception] An Exception instance related to the current log message.\n     */\n    warn: function(mex,exception) {\n      if ( this.isWarnEnabled() ) {\n        this.logProvider.dispatchLog(this.category, \"WARN\", mex);\n      }  \n      return;\n    },    \n      \n    /**\n     * Checks if this Logger is enabled for the WARN level. \n     * The method should return true if this Logger is enabled for WARN events, \n     * false otherwise.\n     * <BR>This property is intended to let the library save computational cost by suppressing the generation of\n     * log WARN statements. However, even if the method returns false, WARN log \n     * lines may still be received by the {@link SimpleLogger#warn} method\n     * and should be ignored by the Logger implementation. \n     * \n     * @return {boolean} true if WARN logging is enabled, false otherwise\n     */\n    isWarnEnabled: function() {\n      return (SimpleLogLevels.priority(\"WARN\")>=SimpleLogLevels.priority(this.minLevel));\n    },\n    \n    /**\n     * Receives log messages at INFO level.\n     * \n     * @param {String} message The message to be logged.  \n     * @param {Error} [exception] An Exception instance related to the current log message.\n     */\n    info: function(mex,exception) {\n      if ( this.isInfoEnabled() ) {\n        this.logProvider.dispatchLog(this.category, \"INFO\", mex);\n      }\n      return;\n    },    \n    \n    /**\n     * Checks if this Logger is enabled for the INFO level. \n     * The method should return true if this Logger is enabled for INFO events, \n     * false otherwise.\n     * <BR>This property is intended to let the library save computational cost by suppressing the generation of\n     * log INFO statements. However, even if the method returns false, INFO log \n     * lines may still be received by the {@link SimpleLogger#info} method\n     * and should be ignored by the Logger implementation. \n     * \n     * @return {boolean} true if INFO logging is enabled, false otherwise\n     */\n    isInfoEnabled: function() {\n      return (SimpleLogLevels.priority(\"INFO\")>=SimpleLogLevels.priority(this.minLevel));\n    },\n    \n    /**\n     * Receives log messages at DEBUG level.\n     * \n     * @param {String} message The message to be logged.  \n     * @param {Error} [exception] An Exception instance related to the current log message.\n     */\n    debug: function(mex,exception) {\n      if ( this.isDebugEnabled() ) {\n        this.logProvider.dispatchLog(this.category, \"DEBUG\", mex);\n      }\n      return;\n    },    \n    \n    /**\n     * Checks if this Logger is enabled for the DEBUG level. \n     * The method should return true if this Logger is enabled for DEBUG events, \n     * false otherwise.\n     * <BR>This property is intended to let the library save computational cost by suppressing the generation of\n     * log DEBUG statements. However, even if the method returns false, DEBUG log \n     * lines may still be received by the {@link SimpleLogger#debug} method\n     * and should be ignored by the Logger implementation. \n     * \n     * @return {boolean} true if DEBUG logging is enabled, false otherwise\n     */\n    isDebugEnabled: function() {\n      return (SimpleLogLevels.priority(\"DEBUG\")>=SimpleLogLevels.priority(this.minLevel));\n    },\n    \n    /**\n     * Call by SimpleLoggerProvider to configure the minimum log level enabled.\n     *\n     * @param {String} [level] log level enabled, if missing or if a not expected value is used\n     * \"DEBUG\" is assumed\n     */\n    setLevel: function(level) {\n      this.minLevel = SimpleLogLevels.priority(level) ? level : \"DEBUG\"; \n    }\n  };\n  \n  //google closure exports\n  SimpleLogger.prototype[\"fatal\"] = SimpleLogger.prototype.fatal;\n  SimpleLogger.prototype[\"isFatalEnabled\"] = SimpleLogger.prototype.isFatalEnabled;\n  SimpleLogger.prototype[\"error\"] = SimpleLogger.prototype.error;\n  SimpleLogger.prototype[\"isErrorEnabled\"] = SimpleLogger.prototype.isErrorEnabled;\n  SimpleLogger.prototype[\"warn\"] = SimpleLogger.prototype.warn;\n  SimpleLogger.prototype[\"isWarnEnabled\"] = SimpleLogger.prototype.isWarnEnabled;\n  SimpleLogger.prototype[\"info\"] = SimpleLogger.prototype.info;\n  SimpleLogger.prototype[\"isInfoEnabled\"] = SimpleLogger.prototype.isInfoEnabled;\n  SimpleLogger.prototype[\"debug\"] = SimpleLogger.prototype.debug;\n  SimpleLogger.prototype[\"isDebugEnabled\"] = SimpleLogger.prototype.isDebugEnabled;\n  SimpleLogger.prototype[\"setLevel\"] = SimpleLogger.prototype.setLevel;\n  \n\n  \n  return SimpleLogger;\n})();\n\n","/*\n  Copyright (c) Lightstreamer Srl\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\nimport SimpleLogger from \"./SimpleLogger\";\nimport SimpleLogLevels from \"./SimpleLogLevels\";\n\nexport default /*@__PURE__*/(function() {\n  /**\n   * @private\n   */\n  function logHeader() {\n    var _line = (typeof window != \"undefined\") ? (window.name + \" \") : \"\";\n    var i = 0;\n    var now = new Date();\n    \n    i = now.getHours();\n    if ( i < 10 ) {\n      _line += \"0\";\n    }\n    _line += i;\n    _line += \":\";\n    \n    i = now.getMinutes();\n    if ( i < 10 ) {\n      _line += \"0\";\n    }\n    _line += i;\n    _line += \":\";\n         \n    i = now.getSeconds();\n    if ( i < 10 ) {\n      _line += \"0\";\n    }\n    _line += i;\n    _line += \",\";\n    \n    _line += now.getMilliseconds();\n    \n    return _line;\n  };  \n  \n  /**\n   * Empty constructor for SimpleLoggerProvider. \n   * @constructor\n   *\n   * @exports SimpleLoggerProvider\n   * \n   * @class SimpleLoggerProvider implementation that can be used to consume logging\n   * from the {@link module:LoggerManager}. \n   * To enable client logging, an instance of this class has to be created and supplied through the\n   * {@link module:LoggerManager.setLoggerProvider} method before any log can be \n   * consumed.\n   * <br/>In order to determine how to consume the log, one or multiple \"appenders\"\n   * can be supplied to this object, through {@link SimpleLoggerProvider#addLoggerAppender}.\n   * The {@link Logger} instances created by this LoggerProvider for the various log categories\n   * will forward the log lines to the appenders, based on the appender preferences configured.\n   * Category and level filters are available and can be configured on each appender.\n   * <br/>Several appender classes are distributed with the library in \n   * order to enable custom code to consume the log in different ways:\n   * {@link ConsoleAppender}, {@link AlertAppender},\n   * {@link DOMAppender}, {@link FunctionAppender} and {@link BufferAppender}.  \n   * <BR>\n   * <BR>The SimpleLoggerProvider is available for the implementation of custom logging;\n   * just invoke the {@link LoggerProvider#getLogger} method to get {@link Logger}\n   * objects for custom categories, then invoke the various methods available on the\n   * loggers to produce log messages to be handled by the configured appenders.\n   *\n   * @extends LoggerProvider\n   */\n  var SimpleLoggerProvider = function() { ////extend EventDispatcher?\n\n    this.appenders = [];\n    this.logInstances = {};\n  };\n  \n  \n  SimpleLoggerProvider.prototype = {\n     \n    /**\n     * @private\n     */     \n     minPriority: function() { // @return {Number} min log level supported by the appenders;\n      var min = 100;\n      var champion = 0;\n      if (this.appenders.length > 0) {\n        for (var i=0; i<this.appenders.length; i++) {\n          if ( SimpleLogLevels.priority(this.appenders[i].getLevel()) < min ) {\n            min = SimpleLogLevels.priority(this.appenders[i].getLevel());\n            champion = i;\n          }\n        }\n        \n        return this.appenders[champion].getLevel();\n      } else {\n        return null;\n      }\n    },\n    \n    /**\n     * @private\n     */     \n    setLoggerLevel: function(level) {\n      for (var key in this.logInstances) {\n        this.logInstances[key].setLevel(level);\n      }\n    },\n    \n    /**\n     * @private\n     */\n    checkCategoryFilter: function(_appender, category) { //Check the filter categories for a loggerAppender. \n      var appenderFilter;\n      var allAppenderCategories=[];\n      \n      if (_appender.getCategoryFilter() === \"*\") {\n        return true;\n      } else {\n        appenderFilter = _appender.getCategoryFilter();\n        allAppenderCategories = appenderFilter.split(\" \");\n        for (var i=0; i<allAppenderCategories.length; i++) {\n          if (allAppenderCategories[i] == category) {\n            return true;\n          }\n        }\n        \n        return false;\n      }\n    },\n    \n    /**\n     * Adds a {@link SimpleLogAppender} to this SimpleLoggerProvider instance. Such appender \n     * will receive log lines from the Logger instances generated by this SimpleLoggerProvider instance. \n     * The appender defines a category and a threshold level, \n     * so that it will receive only the log lines with a level equal to or greater\n     * than the threshold and only from the Logger associated with the requested category.\n     *\n     * <br/>Appenders can be added at any time; any loggers already created\n     * by this SimpleLoggerProvider instance will start using the new appender.\n     * Until the first appender is added, all log will be discarded.\n     * \n     * @param {SimpleLogAppender} logAppender An instance of SimpleLogAppender that will consume\n     * the log.\n     */ \n    addLoggerAppender: function(logAppender) {\n      if ( logAppender && logAppender.log && logAppender.getLevel ) {\n        this.appenders.push(logAppender);\n        if ( logAppender.setLoggerProvider ) {\n          logAppender.setLoggerProvider(this);\n        }\n      }\n      this.setLoggerLevel(this.minPriority());\n    },\n    \n    /**\n     * Removes a {@link SimpleLogAppender} from this SimpleLoggerProvider instance.\n     * <br/>Appenders can be removed at any time.\n     *\n     * @param {SimpleLogAppender} logAppender An instance of SimpleLogAppender that was previously \n     * added to this SimpleLoggerProvider instance.\n     * \n     * @see SimpleLoggerProvider#addLoggerAppender\n     */\n    removeLoggerAppender: function(logAppender) {\n      for (var i=0; i<this.appenders.length; i++) {\n        if ( this.appenders[i] === logAppender) {\n          this.appenders.splice(i,1);\n          this.setLoggerLevel(this.minPriority());\n          return;\n        }\n      }\n    },\n    \n    \n    /** \n     * @private\n     */\n    forceLogLevelUpdate: function() {\n      //Force update of log level of all loggers upon the min level of all log appernders.\n      //Used by logAppenders instances when a setLevel operation has been performed. \n      this.setLoggerLevel(this.minPriority());\n    },\n    \n    /**\n     * Logger factory that gets a logger related to a specified category name.\n     * If such logger does not exist it is created.\n     * A unique instance is always maintained for each logger name.\n     * This method can potentially cause a memory leak as once a Logger \n     * is created it will never be dismissed. It is expected that the number of \n     * categories within a single application is somewhat limited and in any case\n     * not growing with time.\n     *\n     * @param {String} category The name of the desired log category. \n     *\n     * @return {Logger} The desired Logger instance.\n     */\n    getLogger: function(category) {\n      if ( !this.logInstances[category] ) {\n        this.logInstances[category] = new SimpleLogger(this, category);\n        if (this.appenders.length > 0)\n          this.logInstances[category].setLevel(this.minPriority());\n      }\n      return this.logInstances[category];\n    },\n    \n\n    \n    /**\n     * Publish a log message on all SimpleLogAppender object instances added to this SimpleLoggerProvider so far.\n     * \n     * @param {String} category The category name that produced the given message.\n     * @param {String} level The logging level of the given message. It should be one of DEBUG INFO WARN ERROR FATAL\n     * constants values. \n     * @param {*} mex The message to be logged. It could be a String instance, an Error instance or any other\n     * object, provided that it has a toString method.\n     * \n     */\n    dispatchLog: function(category, level, mex) {\n      var header = logHeader();\n      var priority = SimpleLogLevels.priority(level);\n      for (var i=0; i<this.appenders.length; i++) {\n        if ( SimpleLogLevels.priority(this.appenders[i].getLevel()) <= priority ) {\n          if (this.checkCategoryFilter(this.appenders[i],category)) {\n            this.appenders[i].log(category, level, mex, header);\n          }\n        }\n      }\n    }\n  };\n  \n  //google closure exports\n  SimpleLoggerProvider.prototype[\"addLoggerAppender\"] = SimpleLoggerProvider.prototype.addLoggerAppender;\n  SimpleLoggerProvider.prototype[\"removeLoggerAppender\"] = SimpleLoggerProvider.prototype.removeLoggerAppender;\n  SimpleLoggerProvider.prototype[\"getLogger\"] = SimpleLoggerProvider.prototype.getLogger;\n  SimpleLoggerProvider.prototype[\"dispatchLog\"] = SimpleLoggerProvider.prototype.dispatchLog;\n  \n  return SimpleLoggerProvider;\n})();\n\n\n//JSDOC_IGNORE_END"],"names":["LogMessages","dummy","SecondLevelMultiMetaPushRealMaxFrequencyManager","subscription","firstLevelSubscription","FirstLevelMultiMetaPushRealMaxFrequencyManager","multiMetaPushRealMaxFrequency","Frequency","FlatPushRealMaxFrequencyManager","frequency","NameDescriptor","val","_callSuperConstructor","name","ListDescriptor","list","reverseList","i","length","len","Descriptor","subDescriptor","ItemUpdate","itemPos","itemName","_isSnapshot","fieldDescriptor","updateValues","SecondLevelSubscriptionListener","parentTable","itemRef","relKey","itemReference","LightstreamerEngine","conf","options","details","sharing","engineHandler","dontDieFor","mpnManager","_configuration","Configuration","setBroadcaster","_connection","ConnectionDetails","_policy","ConnectionOptions","lastStatus","pushPages","PushPageCollectionHandler","isPossible","sharedStatus","createSharedStatus","Executor","packTask","dispose","bridge","related","channels","createChannelsManager","addListener","id","getId","idPivot","Global","sessionHandler","SessionHandler","bindLocalClient","Constants","MAIN_CLIENT","connectionRequested","doConnect","owner","ppHandler","objectId","objectIdCounter","sessionLogger","status","_OFF$1","statusPhase","clientIP","session","frozen","NOT_FROZEN","pushPagesHandler","policyBean","connectionBean","engineId","getEngineId","slowing","SlowingHandler","pEvents","PushEvents","EnvironmentStatus","addUnloadHandler","exportForceReload","disableXSXHRTime","controlHandler","ControlConnectionHandler","sendMessageHandler","SendMessageHandler","nBindAfterCreate","EvalQueue","engId","equeue","hasFailed","LS_window","LS_u","LS_w","LS_e","LS_svrname","LS_n","LS_s","LS_o","LS_l","LS_MPNREG","LS_MPNOK","LS_MPNDEL","dequeueAction","generateClosure","messageCaptureEnabled","capturedMessages","TlcpServerMessage","msg","fields","split","connOptions","active","messagePhase","sequences","unorderedMap","unorderedSeqNum","SendMessageBridge","_phase","_seqData","_num","_sequence","_ack","seqData","num","sequence","phase","_owner","waitingAck","LastBatch","request","encoder","batch","skipCors","mpnQueue","hbQueue","destroyQueue","logQueue","controlQueue","messageQueue","conn","connectionList","requestLimit","grantedReverseHeartbeatInterval","currentReverseHeartbeatInterval","typeFlag","lastBatch","fakeSyncError","wsConn","requestListenerMap","resetConnectionList","_reset","refTime","meanElaborationDelay","hugeFlag","SessionWS","isPolling","forced","handler","handlerPhase","originalSession","sessionRecovery","arguments","wsPhase","WS_OFF","openWSPhase","forceEarlyWSOff","SessionHTTP","activeConnection","myGlass","chosenConnection","createList","Hourglass","needStopHourGlass","ConnectionSelector","connList","blockXDomainRequest","blockCORS","localList","point","XHRStreamingConnection","parser","constr","XHRConnection","error","response","cachedSenderStatus","sender","sendPhase","isOpen","onErrorImpl","myFrameHandler","AjaxFrameHandler","path","ajaxTimeoutPhase","Helpers","randomG","Environment","isBrowserDocument","window","ActiveXObject","XMLHttpRequest","NO_INIT","DISABLED","aframeId","nextAFrame","frameName","initTouches","attachToGlobal","FrameConnection","target","Utils","sanitizeIFrameName","callPhase","formConnection","IFrameHandler","getFrameWindow","FormConnection","_target","loadPhase","LegacyEncoder","QueryStringEncoder","FakeNotifyConnection","IEXSXHRConnection","xDomainReqInstance","progresses","StreamAsStringHandler","progress","Session","cbOk","onStreamResponse","cbErr","onStreamError","cbEnd","onStreamEnd","dataNotificationCount","_OFF","phaseCount","push_phase","evalQueue","lastKATO","workedBefore","serverSentBW","sentTime","reconnectTimeout","lastKATask","reset","serverBusy","isRecoveryDisabled","preparingRecovery","bindCount","sessionId","sessionServerAddress","serverAddressCache","ignoreServerAddressCache","recoveryBean","RecoveryBean","Assertions","assert","isBrowser","that","onlineHandler","this.onlineHandler","timeLeftMs","sessionRecoveryTimeout","closeSession","CLOSED_ON_SERVER","RECOVERY_SCHEDULED","launchTimeout","addEventListener","e","ctor0","ctor2","invariant","ForceRebindTutor","_cause","WSEncoder","wsConnection","engine","configuration","sessionPhase","sessionAlive","clientsCount","subscriptions","page2Tables","cleanTask","addRepetitiveTask","cleanThread","addBeforeUnloadHandler","SubscriptionChangeTutor","tableNum","ph","changingParams","effort","currentTimeout","SubscribeTutor","UnsubscribeTutor","Tutor","discarded","timeoutMs","getFixedTimeout","forceBindTimeout","MIN_TIMEOUT","exportMethods","SubscriptionsHandler","nextId","tableInfosFromId","tableIdsFromNum","generationNumber","promisesFromId","promiseQueuesFromId","eh","MessageProxy","lastMessageListener","pendingMessageListeners","pendingMessages","pendingMessagesOnNetwork","pendingMLCount","queuedMessages","List","ServerConnection","_load","_loadName","HTTPEncoder","Encoder","Request","_path","_file","_data","_method","cookieFlag","extraHeaders","setPath","setFile","setData","setMethod","setCookieFlag","setExtraHeaders","NewEngineHandler","client","engineType","serverAddress","DEFAULT_SERVER","serverSocketName","serverInstanceAddress","password","user","adapterSet","varNames","contentLength","idleTimeout","keepaliveInterval","requestedMaxBandwidth","pollingInterval","stalledTimeout","retryDelay","initRetryDelay","initConnectTimeout","firstRetryMaxDelay","slowingEnabled","forcedTransport","cookieHandlingRequired","serverInstanceAddressIgnored","reverseHeartbeatInterval","earlyWSOpenEnabled","spinFixTimeout","httpExtraHeaders","spinFixEnabled","httpExtraHeadersOnSessionCreationOnly","corsXHREnabled","xDomainStreamingEnabled","switchCheckTimeout","remoteAdapterStatusObserver","ConnectTimeoutCounter","delay","RetryDelayCounter","toClone","noNotificationList","Bean","orig","parent","broadcastSimples","copySettings","CallDefinition","wantsResponse","addSessionPhase","ControlRequest","_type","relatedKey","retryingOrHost","retFalse","retTrue","UpdateCopy","args","reuse","copiedArgs","changedFields","parseInt","l","UNCHANGED","toString","push","SubscriptionStatus","pageNum","addBody","deleteBody","pendingChange","sentSubscription","pendingSubscription","pendingChangePhase","pendingUnsubscription","WebSocketConnection","wsSession","streamLogger","isDebugLogEnabled","logDebug","webSocketInstance","openRequest","openPhase","exePhase","openFailure","openEvent","serverInUse","openEventFired","defaultSessionId","wsEncoder","getWebSocket","_url","indexOf","replace","NodeWS","cookie","getGlobalCookiesForNode","cookies","forEach","cookie_i","headers","JS_PROTOCOL","WebSocket","MozWebSocket","disableClass","printObj","obj","s","p","XSXHRConnection","xhrInstance","status0Disabled","getCallback","cb","executeTask","getCallback$1","retFalse$1","resetMaybeOnline","mp","maybePhase","maybeOnline","OFFLINE_CHECKS_PROTECTION","ControlRequestBatch","_batchType","queue","keys","batchType","messageNextKey","myParseInt","field","errorMsg","n","isNaN","Error","toStr","STREAMING_WS","SWITCHING_STREAMING_WS","POLLING_WS","SWITCHING_POLLING_WS","STREAMING_HTTP","SWITCHING_STREAMING_HTTP","POLLING_HTTP","SWITCHING_POLLING_HTTP","END","printObj$1","NewPushPageHandler","ls_sbc","enableSharing","IllegalStateException","isMaster","MpnManager","eventManager","onSessionStart","onSessionClose","message","prototype","join","isBrowserDocumentVar","navigator","document","isWebWorkerVar","importScripts","isNodeJSVar","process","test","execPath","node","v8","versions","getElementById","isNodeJS","isWebWorker","isOther","browserDocumentOrDie","TRIM_REGEXP","COMMA","DOT","getTimeStamp","getTime","Date","max","Math","round","random","trim","str","getNumber","commaAsDecimalSeparator","Number","isArray","addEvent","evnt","attachEvent","removeEvent","removeEventListener","detachEvent","handleError5","REFRESH_STATUS_INTERVAL","REFRESH_STATUS_INTERVAL_TOLERANCE","STOP_SEARCH_TIMEOUT","FRAME_NAME_INDEX","TIMESTAMP_INDEX","HOST_INDEX","BUILD_INDEX","PROTOCOL_INDEX","BLOB_INDEX","NULL_VALUE","ALONE_CHECK_TIMEOUT","WORKER_BRIDGE_GLOBAL","FRAME_BRIDGE_GLOBAL","PROMISE_TIMEOUT","PROMISE_FAILURE","BUILD","LIBRARY_VERSION","LIBRARY_NAME","LIBRARY_TAG","LS_CID","PAGE_PROTOCOL","location","protocol","STREAM","PROTOCOL","SESSION","REQUESTS","SUBSCRIPTIONS","MESSAGES","ACTIONS","SHARING","CROSSTAB","STATS","MPN","STORAGE_PREFIX","LIGHTSTREAMER_PATH","_UNORDERED_MESSAGES","CONNECTING","CONNECTED","SENSE","WS_STREAMING","HTTP_STREAMING","STALLED","WS_POLLING","HTTP_POLLING","DISCONNECTED","WILL_RETRY","TRYING_RECOVERY","WS_ALL","HTTP_ALL","RAW","DISTINCT","COMMAND","MERGE","MASTER","TLCP_VERSION","getSimpleUACheckFunction","checkString","resultVar","INIT_VALUE","LOW_UA","getChainedANDFunction","funs","getVersionedFunction","preCheckFunction","versionExtractionFunction","browserVersion","requestedVersion","orLowerFlag","getExtractVersioByRegexpFunction","regexp","res","exec","getNotFunction","f","userAgent","toLowerCase","khtmlVar","BrowserDetection","isProbablyRekonq","isProbablyAWebkit","isProbablyPlaystation","isProbablyChrome","isProbablyAKhtml","childNodes","all","taintEnabled","accentColorName","isProbablyKonqueror","isProbablyIE","isProbablyEdge","isProbablyFX","isProbablyOldOpera","hasOperaGlobal","opera","getOperaVersion","version","verStr","isProbablyAndroidBrowser","isProbablyOperaMobile","isProbablyApple","getChainedORFunction","data","add","newEl","remove","remEl","find","splice","contains","el","asArray","concat","clean","getEventClosure","toCheck","toSet","toExe","methodName","elToExe","_e","asynchSingleEventExecution","setTimeout","executeLater","what","when","who","how","apply","DOMloaded","isDOMLoaded","onunloadFunctions","onloadFunctions","onbeforeunloadFunctions","names","onloadDone","onloadInprogress","unloaded","unloading","preunloading","reverse","isLoaded","isUnloaded","isUnloading","addOnloadHandler","isPreOnload","isPreUnload","removeOnloadHandler","removeUnloadHandler","removeBeforeUnloadHandler","attachToWindow","closeFun","beforeCloseFun","readyState","toUpperCase","asynchExecution","controlReadyStateLoad","controlLoadTimeout","isInBody","done","readyFun","checkDOM","controlOperaLoad","getElementsByTagName","body","Lightstreamer","wstatus","exportGlobal","exportId","exportName","exportVal","prefix","gName","hasGlobal","getGlobal","cleanGlobal","cleanName","inThere","cleanAllGlobals","localSharedEngines","addSharableEngine","lsEngine","sharedEngines","removeSharableEngine","getSharableEngine","engineName","OpenAjax","hub","registerLibrary","ls","DEFAULT_GENERATE_TICK","sortFun","a","b","time","orderId","doTick","pendingGeneratedTick","execute","doInit","timer","clearInterval","postMessage","generateTickExecution","origin","postMessageHandler","event","nextTick","setInterval","step","last","now","toBeExecuted","newStuffFlag","sort","exeNow","shift","fun","toBeRepeated","t","addPackedTimedTask","resetAt","RESET_TIME","hostname","port","getQueueLength","context","params","task","repetitive","err","stack","interval","addTimedTask","stopRepetitiveTask","modifyTaskParam","index","newParam","modifyAllTaskParams","extParams","delayTask","useParams","LoggerProxy","toWrap","setWrappedInstance","emptyFun","placeholder","wrappedLogger","logFatal","mex","isFatalLogEnabled","logArguments","fatal","exc","isFatalEnabled","logError","isErrorLogEnabled","logErrorExc","isErrorEnabled","logWarn","isWarnLogEnabled","warn","isWarnEnabled","logInfo","isInfoLogEnabled","info","isInfoEnabled","debug","isDebugEnabled","_start","_line","element","charAt","IllegalArgumentException","logInstances","currentLoggerProvider","LoggerManager","setLoggerProvider","newLoggerProvider","getLogger","NOT_LOGGER_PROVIDER","cat","getLoggerProxy","resolve","removeDot","removeMinus","requestIdCounter","subscriptionIdCounter","isOffline","onLine","canUseLocalStorage","localStorage","getItem","setItem","x","y","removeItem","getDomain","domain","hasDefaultDomain","host","copyByValue","_value","arr","String","NaN","extendObj","core","extension","_name","getReverse","map","argumentsToArray","pop","tmp","parseSetCookieHeader","cookieDefs","it","next","expiresAttribute","ch","nameValue","attribute","match","console","nextRequestId","nextSubscriptionId","defer","rej","Promise","reject","doCall","o","tc","Inheritance","subClass","superClass","lightExtension","checkAliases","proto","_callSuperMethod","ownerClass","toCall","Setter","checkPositiveNumber","newVal","canBeZero","canBeDecimal","checkBool","notStrictFalse","getPropName","prop","simpleSetter","propName","broadcastSetting","notifyChange","heavySetter","_parent","notifyOptionChange","original","sl","forEachProperty","call","log","resetRetryDelay","currentRetryDelay","increaseRetryDelay","retryAttempt","maxRetryDelay","minRetryDelay","resetConnectTimeout","currentConnectTimeout","increaseConnectTimeout","connectAttempt","maxConnectTimeout","increaseConnectTimeoutToMax","connectTimeout","minConnectTimeout","connConstants","realMaxBandwidth","setContentLength","getContentLength","setIdleTimeout","getIdleTimeout","setKeepaliveInterval","getKeepaliveInterval","setRequestedMaxBandwidth","maxBandwidth","maxBandwidthTmp","getRequestedMaxBandwidth","getRealMaxBandwidth","setPollingInterval","getPollingInterval","setReconnectTimeout","getReconnectTimeout","setStalledTimeout","getStalledTimeout","setConnectTimeout","getConnectTimeout","getRetryDelay","setCurrentConnectTimeout","getCurrentConnectTimeout","setRetryDelay","setFirstRetryMaxDelay","getFirstRetryMaxDelay","setSlowingEnabled","isSlowingEnabled","setForcedTransport","WRONG_FORCED_TRANSPORT","getForcedTransport","setServerInstanceAddressIgnored","isServerInstanceAddressIgnored","setCookieHandlingRequired","isCookieHandlingRequired","setEarlyWSOpenEnabled","isEarlyWSOpenEnabled","setReverseHeartbeatInterval","getReverseHeartbeatInterval","setHttpExtraHeaders","headersObj","headersStr","getHttpExtraHeaders","headerObj","headersArray","setHttpExtraHeadersOnSessionCreationOnly","isHttpExtraHeadersOnSessionCreationOnly","setSessionRecoveryTimeout","getSessionRecoveryTimeout","hasHttpExtraHeaders","sessionCreation","extractHttpExtraHeaders","setXDomainStreamingEnabled","isXDomainStreamingEnabled","setCorsXHREnabled","isCorsXHREnabled","setForceBindTimeout","_timeout","getForceBindTimeout","setSwitchCheckTimeout","getSwitchCheckTimeout","setSpinFixTimeout","getSpinFixTimeout","setSpinFixEnabled","_enabled","getSpinFixEnabled","installRemoteAdapterStatusObserver","metadataErrorCode","dataAdapterName","statusItemName","reconnectMaxDelay","logger","failures","VOID","ASSERT","getFailures","compareArrays","arr1","expected","sameOrder","failInternal","genMap","verifySuccess","method","param","compareFun","verify","verifyException","verifyNotNull","val1","verifyValue","val2","ok","c1","c2","verifyDiffValue","strict","verifyOk","verifyNotOk","fail","expectingException","flag","ret","protocolLogger","LSVersionParam","validMachinaName","validHost","validIP","validIPv6","verifyServerAddress","endSch","startPort","lastIndexOf","extractPort","substring","endHost","toTest","endIp","readUrl","url","urlParts","schemaEnd","schema","pathStart","portStart","extractPortStart","writeUrl","address","portStarts","completeControlLink","extractFrom","controlLink","baseUrl","clUrl","fullClUrl","getPushCommand","pushPhase","isCreate","oldSession","reconnectionCause","askCL","askDomain","LSContextParams","domainParam","requestedIdleTimeout","requestedPollingInterval","LSUserParams","lsUrl","encodeURIComponent","getRecoveryCommand","sessionRecoveryProg","getDestroyParams","reason","getForceRebindParams","rebindCause","_delay","getLogRequestParams","buildNum","getConstraintParams","getPushPath","suffix","BIND_SESSION","getRecoveryPath","getCreateSessionExtraPath","setCID","protLoc","portEnds","clientIp","setServerAddress","substr","_valid","RequestsHelper","getServerAddress","setAdapterSet","getAdapterSet","setUser","getUser","setPassword","getServerInstanceAddress","getServerSocketName","getSessionId","getClientIp","createCaller","definition","r","simple","NO_RESPONSE","NOT_BOUND","simpleWithResponse","WANTS_RESPONSE","simpleWithResponseAndTimeout","SESSION_BOUND","sessionWithResponse","sessionWithResponseAndTimeout","simpleWithSession","methods","onClientConfigurationChange","callConnect","callDisconnect","pong","subscribeTable","unsubscribeTable","updateSubscriptionParams","forwardMessage","forwardLog","clientDeath","callDisconnectAndReconnect","sharingLogger","setPushPageHandler","pushpageHandler","setEngineId","setSessionPhase","onEngineConfigurationChange","objClass","onSessionEnd","sessionEnd","sessionStart","onEngineDeath","suiciding","noHopeToAttachToAnotherEngine","engineMourningRoom","checkDeath","onEngineDying","onServerError","serverError","onStatusChange","newStatus","cacheEngineStatus","onSubscription","tableCode","keyPos","commandPos","numOfSubscribedItems","numOfSubscribedFields","tables","subscriptionEvent","onSubscriptionError","code","errorEvent","onUnsubscription","unsubscriptionEvent","onEndOfSnapshot","item","onEndOfSnapshotEvent","onUpdate","snap","updatePage","onLostUpdates","losts","onLostUpdatesEvent","onClearSnapshot","onClearSnapshotEvent","onMessageDiscarded","prog","messages","messageDiscarded","onMessageDenied","_code","messageDenied","onMessageError","messageError","onMessageComplete","messageComplete","onMessageOnNetwork","messageOnNetwork","ping","onServerKeepalive","onSubscriptionReconf","doSubscriptionReconf","StandardHandler","_GET","_POST","getFile","getUrl","getData","getUrlWithParams","clone","isRelativeRequest","isSameDomain","theDomain","prot","isSameProtocol","rgx","RegExp","_RGX1","_RGX2","isCrossSite","refDomain","isCrossProtocol","aboutBlank","requestsLogger","ADD","REMOVE","CONSTRAINT","MESSAGE","LOG","DESTROY","FORCE_REBIND","HEARTBEAT","CHANGE_SUB","req","JSON","stringify","getKey","initRequest","cookieRequired","getBatchType","SEND_MESSAGE","SEND_LOG","CONTROL","getExt","ext","encode","first","getLength","controlRequest","firstRequest","requestType","notifyAborted","encodeMessageRequest","encodeDestroyRequest","encodeHeartbeatRequest","encodeLogRequest","encodeControlRequest","expand","unquotedParam","encodeRequest","extraParams","encodeUnqRequest","wrapUp","requestData","getFixedOverhead","getInvisibleOverhead","MEX_PARAM","unique","ws","require","xhrc","urlModule","BASIC_ENCODER","attachPublicStaticMethods","ServerConnection.attachPublicStaticMethods","_class","isAvailable","areCookiesGuaranteed","attachEngineId","isStreamEnabled","canUseCustomHeaders","_close","sessionLoad","responseCallback","errorCallback","connectionEndCallback","getEncoder","cookieArray","cookieJarContents","splitArray","parse","pathname","addGlobalCookiesForNode","cond","assertNotNull","assertNull","assertEquals","implies","switchEngineHandler","getMessageListenerProxy","listener","getListener","listenerProg","getOriginalMessage","wasSentOnNetwork","cleanMessageListeners","clearQueuedMessages","_elements","messageAbort","enqueueMessage","timeout","fireEvent","handleAllWaitingMessages","listenerProxy","subscriptionsLogger","addATable","tableIn","_id","onAdd","passTableToEngine","removeATable","subscriptionOut","tNum","tableNumber","isSubscribing","isPushing","onRemove","subscriptionChanging","isActive","tableId","enqueueToPromise","isPaused","tableNumPromise","getRequestParams","onSubmission","onTableNumber","action","promise","actionPhase","handleAllWaitingTables","pauseTable","_table","isOff","onPause","subTableFlag","pauseAllTables","callTableByNum","tableInfo","sub","update","_item","lostUpdates","endOfSnapshot","clearSnapshot","serverDeny","kPos","cPos","itms","flds","onStartPush","configure","AsymList","EventDispatcher","initDispatcher","theListeners","synchEvents","aListener","listening","dispatchToOneListener","removeListener","getListeners","useSynchEvents","useSynch","evt","dispatchToOneListenerExecution","dispatchEvent","toRet","simulateSilence","PushEvents.simulateSilence","silence","changeSession","currentIdForProg","currentProg","arg3","keepaliveIntervalDefault","requestLimitLength","onPushEvent","winPhase","isReqerr","onErrorEvent","its","onControlEvent","m","alert","onServerName","deviceId","adapterName","onMPNREG","lsSubId","pnSubId","onMPNOK","onMPNDEL","preliminaryCheck","_ok","processCountableNotification","sessionProg","onDataNotification","onOKReceived","onLoopReceived","onSyncError","cause","onError41","onServerSentBandwidth","onSyncReceived","onProg","onEnd","onPROGCounterMismatch","onKeepalive","onUpdateReceived","onMessageErrorEvent","messageCode","seq","count","onMessageDeny","isReqerrFromMsg","onTableError","forwardError","onMessageAck","onMessageOk","onMpnRegisterOK","onMpnSubscribeOK","onMpnUnsubscribeOK","notifySender","failed","doRecovery","onTimeout","discard","isWaitingUnsubscription","notifySenderName","isWaitingSubscription","subscriptionSent","isWaitingSubscriptionReconfNotification","sendUpdateSubscriptionParams","getSessionPhase","checkSessionPhase","pPhase","checkConnectionPool","onlyMeCount","getNumberOfConnectionsToServer","getPushServerAddress","cleanAll","forEachPushPage","callback","onNewPushPage","ppId","pp","value","getStatus","onPushPageLost","relatedTables","removeTable","getPushPageHandlerFromTableNumber","getPushPageHandler","notifyNewStatus","onSubscriptionReconfEvent","handleTable","pageH","isSessionOpenOrRecovering","reqs","getControlParams","tutor","sendSubscription","sendUnsubscription","rPhase","reqParams","sendSubscriptionChange","notifyEngineIsDying","notifyEngineDeath","pps","notifyServerError","unloadEvent","preUnloadEvent","_body","commonParams","MAD_LIMIT","madLimit","madCreates","lastTime","firstTime","oldMadCreates","oldLastTime","oldFirstTime","MadTester","init","incMadTest","nowTime","rollbackLastMadTest","canMakeRequest","fileName","expandWithSessionId","disabled","disabledFor","WebSocketConnection.disableClass","forAddress","restoreClass","WebSocketConnection.restoreClass","isDisabledClass","WebSocketConnection.isDisabledClass","WSClass","CLOSED","isReadyToSend","close","__e","off","openSocket","openWSTimeout","onmessage","this.webSocketInstance.onmessage","onPartialResponse","onerror","this.webSocketInstance.onerror","onErrorResponse","onclose","this.webSocketInstance.onclose","closeEv","onCloseResponse","onopen","this.webSocketInstance.onopen","onOpenEvent","sendFirstRequest","isConnectedToServer","_send","updatePhase","send","firstSentNotification","closeCode","setDefaultSessionId","forceRebind","recovery","recoveryTimestampMs","startRecovery","old","restoreTimeLeft","maxTimeMs","statusStrings","CREATING","CREATED","FIRST_PAUSE","FIRST_BINDING","BINDING","RECEIVING","STALLING","_STALLED","PAUSE","SLEEP","switchForced","switchRequired","cachedRequiredBW","switchCause","slowRequired","changePhaseType","newType","statusChanged","incPushPhase","getHighLevelStatus","getFirstConnectedStatus","getConnectedHighLevelStatus","isReceivingAnswer","isStreamingSession","createSession","oldSessionId","openOnServer","OPEN_ON_SERVER","NO_RECOVERY_SCHEDULED","prepareSlowing","bindSession","handleReverseHeartbeat","requestSwitch","newHPhase","createMachine","switchMachine","requestSlow","slowMachine","prepareForSync","resetSync","force","startReverseHeartbeats","stopReverseHeartbeats","closeReason","alreadyClosedOnServer","noRecoveryScheduled","onObsoleteControlLink","sendDestroySession","shutdown","resetTimers","justSleep","doPause","serverSentPause","pauseToUse","getRealPollingInterval","timeoutType","usedTimeout","coreCause","tCause","recoverSession","sleepCause","retry","onSessionGivesUp","testPollSync","timeoutForStalled","timeoutForReconnect","shouldGiveUpTrying","mustClose","formatArgs","closedOnServer","possibleLoop","tryRecovery","serverBusyError","calculateRetryDelay","ceil","onLoop","garbageCollection","onEvent","timeoutForExecution","timeoutForStalling","createSent","getEvalQueue","bindSent","getBindTimeout","triggerAfter","timeoutCause","refInterval","diff","spent","calculateReconnectTimeout","spentTime","ct","toCheckPhase","_enqueue","fromWS","unableToOpen","evaluationError","onSlowRequested","onSlowRequired","onSynchOk","PERMISSION_TO_FAIL","newSession","lastUsedAddress","addressToUse","onNewControlLink","startSync","changeBandwidth","onChangeRequestLimitLength","onSessionBound","onIPReceived","secs","syncCheck","onSessionError","errorCode","onMetadataAdapterError","onFatalError","forwardREQERR","listenerCallback","forwardERROR","disconnectAndReconnect","getDelay","addRequest","requestListener","onREQOK","onREQERR","forwardDestroyRequestToTransport","query","onRegisterOK","onSubscribeOK","onUnsubscribeOK","extractNewData","_stream","isComplete","endIndex","newData","streamProgress","streamComplete","HAVE_HTTP_STATUS","CONSIDER_STATUS_0_UNABLE_TO_OPEN","NodeXHR","doesWork","withCredentials","abort","loadCB","onreadystatechange","open","setRequestHeader","isHttpStatusOk","responseText","notifyEnd","canStream","XDomainRequest","respCompleteEvent","errorCB","asyncError","timeoutCB","progressCB","progressEvent","onload","ontimeout","onprogress","completed","DEFAULT_SRC","handledFrames","createFrame","src","bodyEl","iFrame","createElement","style","visibility","height","width","display","appendChild","contentWindow","frames","createIfNull","disposeFrame","removeChild","removeFrames","QUERY_STRING","LEGACY_ENCODER","formToUse","generateForm","formEl","queryString","submit","deleteForm","formLifeSpan","formObj","acceptCharset","type","_el","parentNode","_closeImpl","_loadImpl","frameRef","loadByForm","Dismissable","touchPhase","inUse","TOUCH_TIMEOUT","verifyTouches","dismiss","touch","createdFrames","getAjaxFrame","AjaxFrameHandler.getAjaxFrame","serverAndServerUrlPath","onAjaxFrameReady","retrying","LOADING_AGAIN","LOADING_FRAME","isReady","localTimeoutPhase","_command","ajReq","frameLoader","frameTimeout","ajaxFrameTimeout","giveUp","giveUpTimeout","READY","GIVE_UP","disable","isDisabled","sendXHR","senderObject","onReadyStateChangeImpl","_ee","cleanRef","COMM_START","xhrCanStream","superCall","disableWS","ConnectionSelector.disableWS","disableXHRs","ConnectionSelector.disableXHRs","STREAMING_LIST","strList","CONTROL_LIST","POLL_LIST","useRealCallbacks","ConnectionSelector.useRealCallbacks","_instance","isGood","ConnectionSelector.isGood","serverToUse","areCookiesRequired","hasExtraHeaders","_list","hasNext","getNext","prepare","streamingClass","hgFrameName","stopHourGlass","stopHourGlassExe","stopDelay","createSessionExecution","disableCorsCheck","MAYBE_ONLINE_TIMEOUT","executeConnection","noImplAvailable","bindCause","fixSpin","bindSessionExecution","generateRequest","_serverToUse","pushCommand","retryMethod","connRequest","assignWS","targetName","classTU","needsHourglassTrick","onCorsError","changeWSPhase","newPhase","openWS","WS_OPEN","WS_INADEQUATE","WS_LIGHT_FAIL","WS_FAIL","firstSend","WS_ALIVE","oPhase","OFF","RECOVERY_SCHEDULED$1","addSyncRequest","momentum","maxMean","isLate","lateVal","millis","testSync","syncProblem","diffTime","currTime","hugeDelay","addRequestInternal","tKey","currentReq","currentSeq","addUniqueRequestInternal","addRequestToBatch","preventOverride","REVERSE_HB_KEY","CONSTRAINT_KEY","FORCE_REBIND_KEY","CHANGE_SUB_KEY","MPN_KEY","queuedRequest","substituteRequest","removeRequestByKey","newRequest","removeRequestByIndex","_index","getRequestObject","phNames","_IDLE","_STANDBY","_WAITING","setRequestLimit","newLimit","newInterval","sendReverseHeartbeat","sc","changeStatus","caller","reqQueues","dequeue","ASYNC_DEQUEUE","addRequestListener","addRequestExe","checkPhase","addToProperBatch","controlRequestObj","SYNC_DEQUEUE","sync","dequeueControlRequests","security","SECURITY_LIMIT","outcome","sendBatch","selectAndSendBatch","REQ_EMPTY","SEND_LATER","WAIT_CONN_DELAY","NO_CONN","notifySenders","SENT_HTTP","WAIT_RESP_DELAY","SENT_WS","c","queueToSend","ilen","j","jlen","mainRequest","sent","customizeRequest","setPhase","onReadyForNextRequest","connToUse","setEncoder","fill","needsNewEncode","overflow","refill","isEmpty","_responseText","sentPhase","enqueueControlResponse","reqId","getAndRemoveRequestListener","lengthLimit","nextEncodedReq","expectedFinalLength","nextExpectedLength","dismissing","sentReq","sentOnNetwork","noAckMessageSent","checkMessagePhase","resend","messagesLogger","activate","sendExe","_message","messageNum","needsProg","mapUnordered","msgData","realProg","resolveUnorderedNum","removeFromUnorderedMap","ack","_clear","listenerInfo","_complete","notifyDiscarded","notifyDenied","notifyError","unquote","decodeURIComponent","getField","getFieldUnquoted","EncodingUtils","getFieldAsInt","getFieldAsFloat","parseFloat","jobToDo","parseText","stillValid","d","dequeueAll","text","lines","line","processUpdate","processREQOK","processSUBOK","processSUBCMD","processUNSUB","processCONOK","processSERVNAME","processCLIENTIP","processCONS","processLOOP","processPROG","processCONERR","processREQERR","processERROR","processMSGDONE","processMSGFAIL","processEOS","processCS","processOV","processCONF","processPROBE","processSYNC","processEND","processMPNREG","processMPNOK","processMPNDEL","table","updates","parseUpdates","totalItems","totalFields","cmdPos","reqLimit","keepAlive","serverName","rawBandWidth","maxBandWidth","loopMs","getRequestListener","errCode","errMsg","lost","rawFrequency","mode","tableIndex","itemIndex","fieldsIndex","unchangedMarker","values","fieldStart","fieldEnd","unquoted","CREATE_FALLS","GIVEUP_FALLS","FROZEN_CHECK","SLOW_FALLS","SWITCHING_STATUSES","fromAPI","isAlive","changeTransport","isTransportForced","isComboForced","isHTTP","createOrSwitchSession","nextPH","retryCause","strOrPoll","STREAMING_SESSION","POLLING_SESSION","wsOrHttp","WS_SESSION","HTTP_SESSION","_reason","avoidSwitch","switchSession","FROZEN","startSwitchTimeout","resetControlHandlers","currSessionId","YES_RECOVERY","prepareNewSessionInstance","isForced","prevSession","chosenClass","switchType","stop","AVOID_SWITCH","switchTimeout","connectionsEnableFlagsChanged","NO_RECOVERY","notifyLSStatus","newIP","sendAMessage","delayTimeout","sendLog","delBody","changeBody","txtResponse","setEngineHandler","doDisconnect","doDisconnectAndReconnect","checkClientHealth","subscribe","unsubscribe","i$4","eHandler","doChangeTransport","ft","doConnectForced","removeConnectionToServerFlag","addConnectionToServerFlag","oldStatus","cs","pageId","onItemLostUpdates","shouldDispatch","sonLostUpdates","sonServerDeny","onItemUpdate","updateInfo","getItemPos","setSecondLevelSchemaSize","convertMultiSonUpdate","hasSubTable","fatherTable","newArgs","newLen","getFullSchemaSize","keyCode","commandCode","unchangedMap","actionsLogger","getItemName","getValue","fieldNameOrPos","arrPos","toPos","isUnchanged","isValueChanged","isSnapshot","forEachChangedField","iterator","getName","newV","forEachField","fieldPos","getPos","getFullSize","setSubDescriptor","setSize","getComposedString","fromSub","pos","getOriginal","Matrix","inputMatrix","matrix","insert","insObject","row","column","get","del","insertRow","insRow","getRow","delRow","getEntireMatrix","forEachElement","forEachElementInRow","forEachRow","rowElements","col","isGTE","otherFrequency","equals","oldRealMaxFrequency","realMaxFrequency","configureMultiMetaPushRealMaxFrequency","maxFrequency","subTables","secondLevelSubscription","onDeleteSecondLevelSubscription","realMaxFrequencyManager","checkItemNames","_array","head","NO_VALID_ARRAY","NO_SPACE","NO_NUMBER","NO_EMPTY","checkFieldNames","NO_SCHEMA_NOR_LIST","NO_GROUP_NOR_LIST","USE_GET_ITEM_GROUP","USE_GET_ITEMS","USE_GET_FIELD_SCHEMA","USE_GET_FIELDS","MAX_BUF_EXC","MAX_FREQ_EXC","YES_FIELDS_NO_ITEMS","NO_VALID_FIELDS","Subscription","subscriptionMode","items","modeCheck","INVALID_MODE","_mode","fieldSchema","fieldList","itemDescriptor","itemGroup","itemList","isRequiredSnapshot","requestParams","dataAdapter","_selector","_end","requestedBufferSize","requestedMaxFrequency","oldValuesByItem","oldValuesByKey","tablePhaseType","TABLE_OFF","tablePhase","sCount","onCount","setBehavior","METAPUSH","SIMPLE","underDataAdapter","subFieldDescriptor","subFieldSchema","subFieldList","subMode","ValidationUtils","setItems","setFields","SnapshotManager","firstUpdate","eosReceived","state","SnapshotManagerState","NO_UPDATE_RECEIVED","cleanData","snapshotByItem","MULTIMETAPUSH","behavior","nGen","notAliveCheck","NO_ITEMS","NO_FIELDS","TABLE_PAUSED","TABLE_WAITING","TABLE_SUBSCRIBING","unsub","onEndPush","isAliveCheck","removeSubTables","TABLE_PUSHING","setServerSentMetapushFields","key","removeSubTable","removeItemSubTables","generateMaxFrequencyParam","rbs","setSchemaReadMetapushFields","IS_ALIVE","NOT_ALIVE","secondLevelCheck","NO_SECOND_LEVEL","commandCheck","NO_COMMAND","isWaiting","isSubscribed","getItems","setItemGroup","groupName","getItemGroup","getFields","setFieldSchema","schemaName","getFieldSchema","getMode","setDataAdapter","getDataAdapter","setSelector","selector","getSelector","setRequestedMaxFrequency","freq","ILLEGAL_FREQ_EXC","getRequestedMaxFrequency","setRequestedBufferSize","size","getRequestedBufferSize","setRequestedSnapshot","required","RAW_NO_SNAPSHOT","REQ_SNAP_EXC","NUMERIC_DISTINCT_ONLY","getRequestedSnapshot","setCommandSecondLevelFields","prepareSecondLevel","getCommandSecondLevelFields","NO_SUB_SCHEMA_NOR_LIST","setCommandSecondLevelFieldSchema","getCommandSecondLevelFieldSchema","setCommandSecondLevelDataAdapter","getCommandSecondLevelDataAdapter","itemIdentifier","fieldIdentifier","toItemPos","toFieldPos","getCommandValue","keyValue","getKeyPosition","getCommandPosition","full","itemNameOrPos","nameOrPos","descriptor","fromMultison","_key","organizeMPUpdate","handleMultiTableSubscriptions","updateStructure","updateObj","struct","fillInUnchanged","_field","fieldInArgs","item_key","newL","itemCommand","subTableExists","addSubTable","makeSubTable","parentSubscription","st","INVALID_SECOND_LEVEL_KEY","subList","SnapshotManager.prototype.update","ONE_UPDATE_RECEIVED","MORE_THAN_ONE_UPDATE_RECEIVED","SnapshotManager.prototype.endOfSnapshot","snapshotRequested","SnapshotManager.prototype.snapshotRequested","SnapshotManager.prototype.isSnapshot","LightstreamerClient","connectionOptions","connectionDetails","enableSharingPhase","sharingPhase","uID","uniqueIDCounter","lastEngineStatus","checkEngineTask","usedEngines","ext_alpha_numeric","addCookies","LightstreamerClient.addCookies","uri","cookieList","getCookies","LightstreamerClient.getCookies","cookieValues","LightstreamerClient.setLoggerProvider","provider","LIB_NAME","LIB_VERSION","initPhase","newEh","setEnginePhase","clearEngineHandler","master","search","inst","mpnRequested","enableSharingExec","sharingRequested","nowSearching","findEngine","noHope","setupOwnEngine","getCheckedEngineList","suicided","aloneTimeout","newSharing","convertToElectionVersion","disconnect","connect","NO_ADDRESS","asynchConnect","asynchDisconnect","sendMessage","enqueueWhileDisconnected","INVALID_SEQUENCE","asyncSendMessage","getLsEngine","_status","logStr","getSubscriptions","origMap","lsEnginePromise","registerForMpn","device","mpnDevice","subscribeMpn","coalescing","getNotificationFormat","unsubscribeMpn","unsubscribeMpnSubscriptions","filter","unsubscribeFilter","getMpnSubscriptions","toArray","findMpnSubscription","subscriptionId","findSubscription","handleRemoteAdapterStatus","adapterSub","logLevel","SimpleLogLevels","priority","level","SimpleLogAppender","category","myLevel","catFilter","myLoggerProvider","loggerProvider","forceLogLevelUpdate","composeLine","header","getLevel","setLevel","getCategoryFilter","setCategoryFilter","BufferAppender","historyDim","buffer","extractLog","sep","getLog","maxRows","_dump","RemoteAppender","lsClient","waiting","_client","_flush","syncCall","sendObj","extractLogForNetwork","sepBefore","dump","messageStrings","LoggerManager.resolve","getMessage","LogMessages.getMessage","ConsoleAppender","FunctionAppender","functionToCall","objectToApplyTo","SimpleLogger","logProvider","minLevel","dispatchLog","SimpleLoggerProvider","appenders","minPriority","min","champion","setLoggerLevel","checkCategoryFilter","_appender","allAppenderCategories","appenderFilter","addLoggerAppender","logAppender","removeLoggerAppender","getHours","getMinutes","getSeconds","getMilliseconds"],"mappings":"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"}