"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountAPI = exports.ActivityType = exports.ActivityStatus = exports.ActionType = exports.Channel = exports.TransactionType = exports.AccountType = exports.AccountStatus = void 0;
var AccountStatus;
(function (AccountStatus) {
    AccountStatus["DISABLED"] = "DISABLED";
    AccountStatus["ENABLED"] = "ENABLED";
    AccountStatus["SUSPENDED_FROM_DEALING"] = "SUSPENDED_FROM_DEALING";
})(AccountStatus = exports.AccountStatus || (exports.AccountStatus = {}));
var AccountType;
(function (AccountType) {
    AccountType["CFD"] = "CFD";
    AccountType["PHYSICAL"] = "PHYSICAL";
    AccountType["SPREADBET"] = "SPREADBET";
})(AccountType = exports.AccountType || (exports.AccountType = {}));
var TransactionType;
(function (TransactionType) {
    TransactionType["ALL"] = "ALL";
    TransactionType["ALL_DEAL"] = "ALL_DEAL";
    TransactionType["DEPOSIT"] = "DEPOSIT";
    TransactionType["WITHDRAWAL"] = "WITHDRAWAL";
})(TransactionType = exports.TransactionType || (exports.TransactionType = {}));
var Channel;
(function (Channel) {
    Channel["DEALER"] = "DEALER";
    Channel["MOBILE"] = "MOBILE";
    Channel["PUBLIC_FIX_API"] = "PUBLIC_FIX_API";
    Channel["PUBLIC_WEB_API"] = "PUBLIC_WEB_API";
    Channel["SYSTEM"] = "SYSTEM";
    Channel["WEB"] = "WEB";
})(Channel = exports.Channel || (exports.Channel = {}));
var ActionType;
(function (ActionType) {
    ActionType["LIMIT_ORDER_AMENDED"] = "LIMIT_ORDER_AMENDED";
    ActionType["LIMIT_ORDER_DELETED"] = "LIMIT_ORDER_DELETED";
    ActionType["LIMIT_ORDER_FILLED"] = "LIMIT_ORDER_FILLED";
    ActionType["LIMIT_ORDER_OPENED"] = "LIMIT_ORDER_OPENED";
    ActionType["LIMIT_ORDER_ROLLED"] = "LIMIT_ORDER_ROLLED";
    ActionType["POSITION_CLOSED"] = "POSITION_CLOSED";
    ActionType["POSITION_DELETED"] = "POSITION_DELETED";
    ActionType["POSITION_OPENED"] = "POSITION_OPENED";
    ActionType["POSITION_PARTIALLY_CLOSED"] = "POSITION_PARTIALLY_CLOSED";
    ActionType["POSITION_ROLLED"] = "POSITION_ROLLED";
    ActionType["STOP_LIMIT_AMENDED"] = "STOP_LIMIT_AMENDED";
    ActionType["STOP_ORDER_AMENDED"] = "STOP_ORDER_AMENDED";
    ActionType["STOP_ORDER_DELETED"] = "STOP_ORDER_DELETED";
    ActionType["STOP_ORDER_FILLED"] = "STOP_ORDER_FILLED";
    ActionType["STOP_ORDER_OPENED"] = "STOP_ORDER_OPENED";
    ActionType["STOP_ORDER_ROLLED"] = "STOP_ORDER_ROLLED";
    ActionType["UNKNOWN"] = "UNKNOWN";
    ActionType["WORKING_ORDER_DELETED"] = "WORKING_ORDER_DELETED";
})(ActionType = exports.ActionType || (exports.ActionType = {}));
var ActivityStatus;
(function (ActivityStatus) {
    ActivityStatus["ACCEPTED"] = "ACCEPTED";
    ActivityStatus["REJECTED"] = "REJECTED";
    ActivityStatus["UNKNOWN"] = "UNKNOWN";
})(ActivityStatus = exports.ActivityStatus || (exports.ActivityStatus = {}));
var ActivityType;
(function (ActivityType) {
    ActivityType["EDIT_STOP_AND_LIMIT"] = "EDIT_STOP_AND_LIMIT";
    ActivityType["POSITION"] = "POSITION";
    ActivityType["SYSTEM"] = "SYSTEM";
    ActivityType["WORKING_ORDER"] = "WORKING_ORDER";
})(ActivityType = exports.ActivityType || (exports.ActivityType = {}));
class AccountAPI {
    constructor(apiClient) {
        this.apiClient = apiClient;
    }
    /**
     * Returns a list of accounts belonging to the logged-in client.
     *
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=553
     */
    getAccounts() {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = AccountAPI.URL.ACCOUNTS;
            const response = yield this.apiClient.get(resource);
            return response.data;
        });
    }
    /**
     * Returns the account activity history. The first element in the array is the latest activity. The last element is the oldest activity.
     *
     * @param PositionCreateRequest - The Information to create the Position
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=543
     */
    getActivityHistory(activityHistoryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = AccountAPI.URL.HISTORY_ACTIVITY;
            const response = yield this.apiClient.get(resource, {
                headers: {
                    VERSION: '3',
                },
                params: activityHistoryRequest,
            });
            return response.data;
        });
    }
    /**
     * Returns the account transaction history.
     *
     * @param PositionCreateRequest - The Information to create the Position
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=525
     */
    getTransactionHistory(transactionHistoryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = AccountAPI.URL.HISTORY_TRANSACTIONS;
            const response = yield this.apiClient.get(resource, {
                headers: {
                    VERSION: '2',
                },
                params: transactionHistoryRequest,
            });
            return response.data;
        });
    }
}
exports.AccountAPI = AccountAPI;
AccountAPI.URL = {
    ACCOUNTS: '/accounts/',
    HISTORY_ACTIVITY: '/history/activity/',
    HISTORY_TRANSACTIONS: '/history/transactions',
};
//# sourceMappingURL=AccountAPI.js.map