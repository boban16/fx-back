"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const nock_1 = __importDefault(require("nock"));
const APIClient_1 = require("../APIClient");
const AccountAPI_1 = require("./AccountAPI");
describe('AccountAPI', () => {
    describe('getAccounts', () => {
        it('returns all accounts', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, nock_1.default)(APIClient_1.APIClient.URL_DEMO)
                .get(AccountAPI_1.AccountAPI.URL.ACCOUNTS)
                .reply(200, JSON.stringify({
                accounts: [
                    {
                        accountAlias: null,
                        accountId: 'ABCDEF',
                        accountName: 'CFD',
                        accountType: 'CFD',
                        balance: {
                            available: 20.0,
                            balance: 20.0,
                            deposit: 0.0,
                            profitLoss: 0.0,
                        },
                        canTransferFrom: true,
                        canTransferTo: true,
                        currency: 'EUR',
                        preferred: true,
                        status: 'ENABLED',
                    },
                ],
            }));
            const getAccounts = yield global.client.rest.account.getAccounts();
            expect(getAccounts.accounts[0].accountId).toBe('ABCDEF');
            expect(getAccounts.accounts[0].status).toBe(AccountAPI_1.AccountStatus.ENABLED);
            expect(getAccounts.accounts[0].balance.available).toBe(20.0);
        }));
    });
    describe('getTransactionHistory', () => {
        it('returns the transaction history', () => __awaiter(void 0, void 0, void 0, function* () {
            const transactionHistoryRequest = {
                maxSpanSeconds: 100000000,
            };
            (0, nock_1.default)(APIClient_1.APIClient.URL_DEMO)
                .get(AccountAPI_1.AccountAPI.URL.HISTORY_TRANSACTIONS + '?maxSpanSeconds=' + transactionHistoryRequest.maxSpanSeconds)
                .reply(200, JSON.stringify({
                metadata: {
                    pageData: {
                        pageNumber: 1,
                        pageSize: 20,
                        totalPages: 1,
                    },
                    size: 2,
                },
                transactions: [
                    {
                        cashTransaction: false,
                        closeLevel: '31578.1',
                        currency: 'E',
                        date: '2021-01-28',
                        dateUtc: '2021-01-28T06:55:35',
                        instrumentName: 'Bitcoin (E1)',
                        openDateUtc: '2021-01-28T06:13:45',
                        openLevel: '31897.1',
                        period: '-',
                        profitAndLoss: 'E-63.80',
                        reference: '4FUBFVBB',
                        size: '+0.20',
                        transactionType: 'TRADE',
                    },
                    {
                        cashTransaction: false,
                        closeLevel: '0',
                        currency: 'E',
                        date: '2021-01-28',
                        dateUtc: '2021-01-28T02:37:44',
                        instrumentName: 'Long-Zinsen für US/Kanad. Aktien 27/01/21 $. umgerechnet bei 0,8314',
                        openDateUtc: '2021-01-28T02:37:44',
                        openLevel: '-',
                        period: '-',
                        profitAndLoss: 'E-0.15',
                        reference: '23146230',
                        size: '-',
                        transactionType: 'WITH',
                    },
                ],
            }));
            const getTransactionHistory = yield global.client.rest.account.getTransactionHistory(transactionHistoryRequest);
            expect(getTransactionHistory.metadata.size).toBe(2);
            expect(getTransactionHistory.transactions[0].instrumentName).toBe('Bitcoin (E1)');
            expect(getTransactionHistory.transactions[0].reference).toBe('4FUBFVBB');
        }));
    });
    describe('getActivityHistory', () => {
        it('returns the activity history', () => __awaiter(void 0, void 0, void 0, function* () {
            var _a;
            const activityHistoryRequest = {
                detailed: true,
                from: '2021-01-01T00:00:00',
                to: '2021-01-28T00:00:00',
            };
            (0, nock_1.default)(APIClient_1.APIClient.URL_DEMO)
                .get(AccountAPI_1.AccountAPI.URL.HISTORY_ACTIVITY +
                '?from=' +
                activityHistoryRequest.from +
                '&to=' +
                activityHistoryRequest.to +
                '&detailed=' +
                activityHistoryRequest.detailed)
                .reply(200, JSON.stringify({
                activities: [
                    {
                        channel: 'PUBLIC_WEB_API',
                        date: '2021-01-27T11:10:59',
                        dealId: 'DIAAAAE39UG9VA6',
                        description: 'Position eröffnet: 39UG9VA6',
                        details: {
                            actions: [
                                {
                                    actionType: 'POSITION_OPENED',
                                    affectedDealId: 'DIAAAAE39UG9VA6',
                                },
                            ],
                            currency: 'USD',
                            dealReference: 'MGSTPB4KFN744S3',
                            direction: 'BUY',
                            goodTillDate: null,
                            guaranteedStop: false,
                            level: 886.05,
                            limitDistance: null,
                            limitLevel: null,
                            marketName: 'Tesla Motors Inc (All Sessions)',
                            size: 1,
                            stopDistance: null,
                            stopLevel: null,
                            trailingStep: null,
                            trailingStopDistance: null,
                        },
                        epic: 'UD.D.TSLA.CASH.IP',
                        period: '-',
                        status: 'ACCEPTED',
                        type: 'POSITION',
                    },
                ],
                metadata: {
                    paging: {
                        next: null,
                        size: 1,
                    },
                },
            }));
            const getActivityHistory = yield global.client.rest.account.getActivityHistory(activityHistoryRequest);
            expect(getActivityHistory.metadata.paging.size).toBe(1);
            expect(getActivityHistory.activities[0].epic).toBe('UD.D.TSLA.CASH.IP');
            expect((_a = getActivityHistory.activities[0].details) === null || _a === void 0 ? void 0 : _a.actions[0].affectedDealId).toBe('DIAAAAE39UG9VA6');
        }));
    });
});
//# sourceMappingURL=AccountAPI.test.js.map