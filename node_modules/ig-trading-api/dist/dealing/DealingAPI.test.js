"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const nock_1 = __importDefault(require("nock"));
const APIClient_1 = require("../APIClient");
const DealingAPI_1 = require("./DealingAPI");
describe('DealingAPI', () => {
    describe('getAllOpenPositions', () => {
        it('returns all open positions', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, nock_1.default)(APIClient_1.APIClient.URL_DEMO)
                .get(DealingAPI_1.DealingAPI.URL.POSITIONS)
                .reply(200, JSON.stringify({
                positions: [
                    {
                        market: {
                            bid: null,
                            delayTime: 0,
                            epic: 'SE.D.PFE.CASH.IP',
                            expiry: '-',
                            high: 40.49,
                            instrumentName: 'Pfizer Inc (All Sessions)',
                            instrumentType: 'SHARES',
                            low: 38.24,
                            marketStatus: 'EDITS_ONLY',
                            netChange: 0.18,
                            offer: null,
                            percentageChange: 0.45,
                            scalingFactor: 100,
                            streamingPricesAvailable: false,
                            updateTime: '22:59:58',
                            updateTimeUTC: '21:59:58',
                        },
                        position: {
                            contractSize: 1,
                            controlledRisk: false,
                            createdDate: Date(),
                            createdDateUTC: Date(),
                            currency: 'EUR',
                            dealId: '12345',
                            dealReference: '54321',
                            direction: 'BUY',
                            level: 20.0,
                            limitLevel: null,
                            size: 1,
                            stopLevel: null,
                            trailingStep: null,
                            trailingStopDistance: null,
                        },
                    },
                ],
            }));
            const getPositions = yield global.client.rest.dealing.getAllOpenPositions();
            expect(getPositions.positions.length).toBe(1);
            expect(getPositions.positions[0].market.epic).toBe('SE.D.PFE.CASH.IP');
            expect(getPositions.positions[0].position.dealReference).toBe('54321');
        }));
    });
    describe('getPosition', () => {
        it('returns an open position', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, nock_1.default)(APIClient_1.APIClient.URL_DEMO)
                .get(DealingAPI_1.DealingAPI.URL.POSITIONS + '12345')
                .reply(200, JSON.stringify({
                contractSize: 1,
                controlledRisk: false,
                createdDate: Date(),
                createdDateUTC: Date(),
                currency: 'EUR',
                dealId: '12345',
                dealReference: '54321',
                direction: 'BUY',
                level: 20.0,
                limitLevel: null,
                size: 1,
                stopLevel: null,
                trailingStep: null,
                trailingStopDistance: null,
            }));
            const getPosition = yield global.client.rest.dealing.getPosition('12345');
            expect(getPosition.dealId).toBe('12345');
            expect(getPosition.dealReference).toBe('54321');
            expect(getPosition.level).toBe(20.0);
        }));
    });
    describe('createPosition', () => {
        it('creates a position', () => __awaiter(void 0, void 0, void 0, function* () {
            const createPositionRequest = {
                currencyCode: 'USD',
                direction: DealingAPI_1.Direction.BUY,
                epic: 'UD.D.TSLA.CASH.IP',
                expiry: '-',
                forceOpen: true,
                guaranteedStop: false,
                level: 900.4,
                orderType: DealingAPI_1.PositionOrderType.LIMIT,
                size: 1,
            };
            (0, nock_1.default)(APIClient_1.APIClient.URL_DEMO)
                .post(DealingAPI_1.DealingAPI.URL.POSITIONS_OTC, {
                currencyCode: 'USD',
                direction: 'BUY',
                epic: 'UD.D.TSLA.CASH.IP',
                expiry: '-',
                forceOpen: true,
                guaranteedStop: false,
                level: 900.4,
                orderType: 'LIMIT',
                size: 1,
            })
                .reply(200, JSON.stringify({
                dealReference: '54321',
            }));
            const createPosition = yield global.client.rest.dealing.createPosition(createPositionRequest);
            expect(createPosition.dealReference).toBe('54321');
        }));
    });
    describe('closePosition', () => {
        it('closes a position', () => __awaiter(void 0, void 0, void 0, function* () {
            const closePositionRequest = {
                dealId: '12345',
                direction: DealingAPI_1.Direction.SELL,
                expiry: '-',
                level: 860.4,
                orderType: DealingAPI_1.PositionOrderType.LIMIT,
                size: 1,
            };
            (0, nock_1.default)(APIClient_1.APIClient.URL_DEMO)
                .post(DealingAPI_1.DealingAPI.URL.POSITIONS_OTC, {
                dealId: '12345',
                direction: 'SELL',
                expiry: '-',
                level: 860.4,
                orderType: 'LIMIT',
                size: 1,
            }, {
                reqheaders: {
                    _method: 'DELETE',
                },
            })
                .reply(200, JSON.stringify({
                dealReference: '54321',
            }));
            const closePosition = yield global.client.rest.dealing.closePosition(closePositionRequest);
            expect(closePosition.dealReference).toBe('54321');
        }));
    });
    describe('updatePosition', () => {
        it('updates a position', () => __awaiter(void 0, void 0, void 0, function* () {
            const updatePositionRequest = {
                limitLevel: 950.4,
            };
            const dealId = '12345';
            (0, nock_1.default)(APIClient_1.APIClient.URL_DEMO)
                .put(DealingAPI_1.DealingAPI.URL.POSITIONS_OTC + dealId, {
                limitLevel: 950.4,
            })
                .reply(200, JSON.stringify({
                dealReference: '54321',
            }));
            const updatePosition = yield global.client.rest.dealing.updatePosition(dealId, updatePositionRequest);
            expect(updatePosition.dealReference).toBe('54321');
        }));
    });
    describe('confirmTrade', () => {
        it('confirms a trade', () => __awaiter(void 0, void 0, void 0, function* () {
            const dealReference = {
                dealReference: '54321',
            };
            (0, nock_1.default)(APIClient_1.APIClient.URL_DEMO)
                .get(DealingAPI_1.DealingAPI.URL.CONFIRMS + dealReference.dealReference)
                .reply(200, JSON.stringify({
                affectedDeals: [
                    {
                        dealId: '12345',
                        status: 'OPENED',
                    },
                ],
                date: Date(),
                dealId: '12345',
                dealReference: '54321',
                dealStatus: 'ACCEPTED',
                direction: 'BUY',
                epic: 'UD.D.TSLA.CASH.IP',
                expiry: '-',
                guaranteedStop: false,
                level: 900.4,
                limitDistance: null,
                limitLevel: null,
                profit: null,
                profitCurrency: 'USD',
                reason: 'Some reason',
                size: 1,
                status: 'OPEN',
                stopDistance: null,
                stopLevel: null,
                trailingStop: false,
            }));
            const confirmedPosition = yield global.client.rest.dealing.confirmTrade(dealReference);
            expect(confirmedPosition.dealId).toBe('12345');
            expect(confirmedPosition.dealStatus).toBe(DealingAPI_1.DealStatus.ACCEPTED);
            expect(confirmedPosition.epic).toBe('UD.D.TSLA.CASH.IP');
            expect(confirmedPosition.level).toBe(900.4);
            expect(confirmedPosition.affectedDeals[0].status).toBe(DealingAPI_1.AffectedDealStatus.OPENED);
        }));
    });
    describe('getAllOrders', () => {
        it('gets all orders', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, nock_1.default)(APIClient_1.APIClient.URL_DEMO)
                .get(DealingAPI_1.DealingAPI.URL.WORKINGORDERS)
                .reply(200, JSON.stringify({
                workingOrders: [
                    {
                        marketData: {
                            bid: null,
                            delayTime: 0,
                            epic: 'UD.D.TSLA.CASH.IP',
                            expiry: '-',
                            high: 40.49,
                            instrumentName: 'Tesla Inc',
                            instrumentType: 'SHARES',
                            low: 38.24,
                            marketStatus: 'EDITS_ONLY',
                            netChange: 0.18,
                            offer: null,
                            percentageChange: 0.45,
                            scalingFactor: 100,
                            streamingPricesAvailable: false,
                            updateTime: '22:59:58',
                            updateTimeUTC: '21:59:58',
                        },
                        workingOrderData: {
                            createdDate: Date(),
                            createdDateUTC: Date(),
                            currencyCode: 'USD',
                            dealId: '12345',
                            direction: 'BUY',
                            dma: false,
                            epic: 'UD.D.TSLA.CASH.IP',
                            goodTillDate: null,
                            goodTillDateISO: null,
                            guaranteedStop: false,
                            limitDistance: 2000,
                            orderLevel: false,
                            orderSize: 1,
                            orderType: 'LIMIT',
                            stopDistance: 1000,
                            timeInForce: 'GOOD_TILL_CANCELLED',
                        },
                    },
                ],
            }));
            const getOrders = yield global.client.rest.dealing.getAllOrders();
            expect(getOrders.workingOrders[0].workingOrderData.dealId).toBe('12345');
            expect(getOrders.workingOrders[0].workingOrderData.epic).toBe('UD.D.TSLA.CASH.IP');
            expect(getOrders.workingOrders[0].marketData.epic).toBe('UD.D.TSLA.CASH.IP');
        }));
    });
    describe('createOrder', () => {
        it('creates an order', () => __awaiter(void 0, void 0, void 0, function* () {
            const createOrderRequest = {
                currencyCode: 'USD',
                direction: DealingAPI_1.Direction.BUY,
                epic: 'UD.D.TSLA.CASH.IP',
                expiry: '-',
                forceOpen: true,
                guaranteedStop: false,
                level: 811.4,
                size: 1,
                timeInForce: DealingAPI_1.OrderTimeInForce.GOOD_TILL_CANCELLED,
                type: DealingAPI_1.OrderType.LIMIT,
            };
            (0, nock_1.default)(APIClient_1.APIClient.URL_DEMO)
                .post(DealingAPI_1.DealingAPI.URL.WORKINGORDERS_OTC, {
                currencyCode: 'USD',
                direction: 'BUY',
                epic: 'UD.D.TSLA.CASH.IP',
                expiry: '-',
                forceOpen: true,
                guaranteedStop: false,
                level: 811.4,
                size: 1,
                timeInForce: 'GOOD_TILL_CANCELLED',
                type: 'LIMIT',
            })
                .reply(200, JSON.stringify({
                dealReference: '54321',
            }));
            const createOrder = yield global.client.rest.dealing.createOrder(createOrderRequest);
            expect(createOrder.dealReference).toBe('54321');
        }));
    });
    describe('deleteOrder', () => {
        it('closes an order', () => __awaiter(void 0, void 0, void 0, function* () {
            const dealId = '12345';
            (0, nock_1.default)(APIClient_1.APIClient.URL_DEMO)
                .post(DealingAPI_1.DealingAPI.URL.WORKINGORDERS_OTC + dealId, {}, {
                reqheaders: {
                    _method: 'DELETE',
                },
            })
                .reply(200, JSON.stringify({
                dealReference: '54321',
            }));
            const deleteOrder = yield global.client.rest.dealing.deleteOrder(dealId);
            expect(deleteOrder.dealReference).toBe('54321');
        }));
        it('fails to delete an order', () => __awaiter(void 0, void 0, void 0, function* () {
            const dealId = '12345';
            (0, nock_1.default)(APIClient_1.APIClient.URL_DEMO)
                .post(DealingAPI_1.DealingAPI.URL.WORKINGORDERS_OTC + dealId, {}, {
                reqheaders: {
                    _method: 'DELETE',
                },
            })
                .reply(403);
            global.client.rest.defaults['axios-retry'] = {
                retries: 1,
            };
            yield expectAsync(global.client.rest.dealing.deleteOrder(dealId)).toBeRejected();
        }));
        it('retries when being rate limited', () => __awaiter(void 0, void 0, void 0, function* () {
            const dealId = '12345';
            (0, nock_1.default)(APIClient_1.APIClient.URL_DEMO)
                .post(DealingAPI_1.DealingAPI.URL.WORKINGORDERS_OTC + dealId, {}, {
                reqheaders: {
                    _method: 'DELETE',
                },
            })
                .reply(403, JSON.stringify({
                errorCode: 'error.public-api.exceeded-api-key-allowance',
            }));
            const amountOfRetries = 2;
            global.client.rest.defaults['axios-retry'] = {
                retries: amountOfRetries,
            };
            try {
                yield global.client.rest.dealing.deleteOrder(dealId);
                fail('Expected error');
            }
            catch (error) {
                const axiosError = error;
                expect(axiosError.isAxiosError).toBe(true);
                // Any typing because of: https://github.com/softonic/axios-retry/pull/174
                expect(axiosError.config['axios-retry'].retryCount).toBe(amountOfRetries);
            }
        }), 10000);
        it('tries to init a trading session when no session was created', () => __awaiter(void 0, void 0, void 0, function* () {
            const dealId = '12345';
            (0, nock_1.default)(APIClient_1.APIClient.URL_DEMO)
                .post(DealingAPI_1.DealingAPI.URL.WORKINGORDERS_OTC + dealId, {}, {
                reqheaders: {
                    _method: 'DELETE',
                },
            })
                .reply(401, JSON.stringify({
                errorCode: 'error.security.client-token-missing',
            }));
            const amountOfRetries = 0;
            const apiClient = new APIClient_1.APIClient(APIClient_1.APIClient.URL_DEMO, {
                apiKey: 'local-demo-api-key',
                password: 'local-demo-password',
                username: 'local-demo-username',
            });
            apiClient.rest.defaults['axios-retry'] = {
                retries: amountOfRetries,
            };
            const createSession = spyOn(apiClient.rest.login, 'createSession').and.callFake(() => { });
            try {
                yield apiClient.rest.dealing.deleteOrder(dealId);
                fail('Expected error');
            }
            catch (error) {
                expect(createSession).toHaveBeenCalledTimes(1);
            }
        }));
        it('fails to automatically init a trading session if username and password are not supplied', () => __awaiter(void 0, void 0, void 0, function* () {
            const dealId = '12345';
            (0, nock_1.default)(APIClient_1.APIClient.URL_DEMO)
                .post(DealingAPI_1.DealingAPI.URL.WORKINGORDERS_OTC + dealId, {}, {
                reqheaders: {
                    _method: 'DELETE',
                },
            })
                .reply(401, JSON.stringify({
                errorCode: 'error.security.client-token-missing',
            }));
            const amountOfRetries = 0;
            const apiClient = new APIClient_1.APIClient(APIClient_1.APIClient.URL_DEMO, {
                apiKey: 'local-demo-api-key',
            });
            apiClient.rest.defaults['axios-retry'] = {
                retries: amountOfRetries,
            };
            const createSession = spyOn(apiClient.rest.login, 'createSession').and.callFake(() => { });
            try {
                yield apiClient.rest.dealing.deleteOrder(dealId);
                fail('Expected error');
            }
            catch (error) {
                const expectedError = error;
                expect(createSession).not.toHaveBeenCalled();
                expect(expectedError.message).toBe('Cannot fulfill request because there is no active session and username & password have not been provided.');
            }
        }));
    });
    describe('updateOrder', () => {
        it('updates an order', () => __awaiter(void 0, void 0, void 0, function* () {
            const dealId = '12345';
            const updateOrderRequest = {
                level: 519.1,
                timeInForce: DealingAPI_1.OrderTimeInForce.GOOD_TILL_CANCELLED,
                type: DealingAPI_1.OrderType.LIMIT,
            };
            (0, nock_1.default)(APIClient_1.APIClient.URL_DEMO)
                .put(DealingAPI_1.DealingAPI.URL.WORKINGORDERS_OTC + dealId, {
                level: 519.1,
                timeInForce: 'GOOD_TILL_CANCELLED',
                type: 'LIMIT',
            })
                .reply(200, JSON.stringify({
                dealReference: '54321',
            }));
            const updateOrder = yield global.client.rest.dealing.updateOrder(dealId, updateOrderRequest);
            expect(updateOrder.dealReference).toBe('54321');
        }));
    });
});
//# sourceMappingURL=DealingAPI.test.js.map