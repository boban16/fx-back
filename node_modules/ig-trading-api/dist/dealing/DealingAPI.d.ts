import { AxiosInstance } from 'axios';
import { Market } from '../market';
export declare enum Direction {
    BUY = "BUY",
    SELL = "SELL"
}
export declare enum PositionOrderType {
    LIMIT = "LIMIT",
    MARKET = "MARKET",
    QUOTE = "QUOTE"
}
export declare enum PositionTimeInForce {
    EXECUTE_AND_ELIMINATE = "EXECUTE_AND_ELIMINATE",
    FILL_OR_KILL = "FILL_OR_KILL"
}
export declare enum OrderType {
    LIMIT = "LIMIT",
    STOP = "STOP"
}
export declare enum OrderTimeInForce {
    GOOD_TILL_CANCELLED = "GOOD_TILL_CANCELLED",
    GOOD_TILL_DATE = "GOOD_TILL_DATE"
}
export declare enum AffectedDealStatus {
    AMENDED = "AMENDED",
    DELETED = "DELETED",
    FULLY_CLOSED = "FULLY_CLOSED",
    OPENED = "OPENED",
    PARTIALLY_CLOSED = "PARTIALLY_CLOSED"
}
export declare enum DealStatus {
    ACCEPTED = "ACCEPTED",
    REJECTED = "REJECTED"
}
export declare enum Status {
    AMENDED = "AMENDED",
    CLOSED = "CLOSED",
    DELETED = "DELETED",
    OPEN = "OPEN",
    PARTIALLY_CLOSED = "PARTIALLY_CLOSED"
}
export interface Position {
    contractSize: number;
    controlledRisk: boolean;
    createdDate: Date;
    createdDateUTC: Date;
    currency: string;
    dealId: string;
    dealReference: string;
    direction: Direction;
    level: number;
    limitLevel?: number;
    size: number;
    stopLevel?: number;
    trailingStep?: number;
    trailingStopDistance?: number;
}
export interface PositionResponse {
    market: Market;
    position: Position;
}
export interface PositionListResponse {
    positions: PositionResponse[];
}
export interface PositionCreateRequest {
    currencyCode: string;
    direction: Direction;
    epic: string;
    expiry: string;
    forceOpen: Boolean;
    goodTillDate?: string;
    guaranteedStop: Boolean;
    level?: number;
    limitDistance?: number;
    limitLevel?: number;
    orderType: PositionOrderType;
    size: number;
    stopDistance?: number;
    stopLevel?: number;
    timeInForce?: PositionTimeInForce;
}
export interface PositionCloseRequest {
    dealId?: string;
    direction: Direction;
    epic?: string;
    expiry: string;
    level: number;
    orderType: PositionOrderType;
    quoteId?: string;
    size: number;
    timeInForce?: PositionTimeInForce;
}
export interface PositionUpdateRequest {
    limitLevel?: number;
    stopLevel?: number;
    trailingStop?: Boolean;
    trailingStopDistance?: number;
    trailingStopIncrement?: number;
}
export interface Order {
    createdDate: Date;
    createdDateUTC: Date;
    currencyCode: string;
    dealId: string;
    direction: Direction;
    dma: boolean;
    epic: string;
    goodTillDate?: Date;
    goodTillDateISO?: Date;
    guaranteedStop: boolean;
    limitDistance: number;
    orderLevel: number;
    orderSize: number;
    orderType: OrderType;
    stopDistance: number;
    timeInForce: OrderTimeInForce;
}
export interface OrderResponse {
    marketData: Market;
    workingOrderData: Order;
}
export interface OrderListResponse {
    workingOrders: OrderResponse[];
}
export interface OrderCreateRequest {
    currencyCode: string;
    direction: Direction;
    epic: string;
    expiry: string;
    forceOpen: Boolean;
    goodTillDate?: Date;
    guaranteedStop: Boolean;
    level: number;
    limitDistance?: number;
    limitLevel?: number;
    size: number;
    stopDistance?: number;
    stopLevel?: number;
    timeInForce: OrderTimeInForce;
    type: OrderType;
}
export interface OrderUpdateRequest {
    goodTillDate?: Date;
    level: number;
    limitDistance?: number;
    limitLevel?: number;
    stopDistance?: number;
    stopLevel?: number;
    timeInForce: OrderTimeInForce;
    type: OrderType;
}
export interface DealReferenceResponse {
    dealReference: string;
}
export interface AffectedDeal {
    dealId: string;
    status: AffectedDealStatus;
}
export interface DealConfirmation {
    affectedDeals: AffectedDeal[];
    date: Date;
    dealId: string;
    dealReference: string;
    dealStatus: DealStatus;
    direction: Direction;
    epic: string;
    expiry: string;
    guaranteedStop: boolean;
    level: number;
    limitDistance?: number;
    limitLevel?: number;
    profit?: number;
    profitCurrency?: string;
    reason: string;
    size: number;
    status: Status;
    stopDistance?: number;
    stopLevel?: number;
    trailingStop: boolean;
}
export declare class DealingAPI {
    private readonly apiClient;
    static readonly URL: {
        CONFIRMS: string;
        POSITIONS: string;
        POSITIONS_OTC: string;
        WORKINGORDERS: string;
        WORKINGORDERS_OTC: string;
    };
    constructor(apiClient: AxiosInstance);
    /**
     * Returns all open positions for the active account.
     *
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=545
     */
    getAllOpenPositions(): Promise<PositionListResponse>;
    /**
     * Returns an open position for the active account by deal identifier.
     *
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=541
     */
    getPosition(dealId: String): Promise<Position>;
    /**
     * Creates an OTC position.
     *
     * @param PositionCreateRequest - The Information to create the Position
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=542
     */
    createPosition(createPositionRequest: PositionCreateRequest): Promise<DealReferenceResponse>;
    /**
     * Closes an OTC position.
     *
     * @param PositionCloseRequest - The Information to close the Position
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=542
     */
    closePosition(closePositionRequest: PositionCloseRequest): Promise<DealReferenceResponse>;
    /**
     * Updates an OTC position.
     *
     * @param PositionUpdateRequest - The Information to close the Position
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=542
     */
    updatePosition(dealId: String, updatePositionRequest: PositionUpdateRequest): Promise<DealReferenceResponse>;
    /**
     * Returns a deal confirmation for the given deal reference.
     *
     * @param dealReference - The dealReference of the deal to be retrieved
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=546
     */
    confirmTrade(dealReference: DealReferenceResponse): Promise<DealConfirmation>;
    /**
     * Returns all open working orders for the active account.
     *
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=555
     */
    getAllOrders(): Promise<OrderListResponse>;
    /**
     * Creates an OTC working order.
     *
     * @param OrderCreateRequest - The Information to create the Order
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=533
     */
    createOrder(createOrderRequest: OrderCreateRequest): Promise<DealReferenceResponse>;
    /**
     * Deletes an OTC working order.
     *
     * @param DealId - The Id of the working order which should be deleted
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=526
     */
    deleteOrder(dealId: String): Promise<DealReferenceResponse>;
    /**
     * Updates an OTC working order.
     *
     * @param DealId - The Id of the working order which should be updated
     * @param OrderUpdateRequest - The Information to update the Working Order
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=526
     */
    updateOrder(dealId: String, orderRequest: OrderUpdateRequest): Promise<DealReferenceResponse>;
}
