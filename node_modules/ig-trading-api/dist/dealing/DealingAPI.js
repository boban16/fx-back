"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DealingAPI = exports.Status = exports.DealStatus = exports.AffectedDealStatus = exports.OrderTimeInForce = exports.OrderType = exports.PositionTimeInForce = exports.PositionOrderType = exports.Direction = void 0;
var Direction;
(function (Direction) {
    Direction["BUY"] = "BUY";
    Direction["SELL"] = "SELL";
})(Direction = exports.Direction || (exports.Direction = {}));
var PositionOrderType;
(function (PositionOrderType) {
    PositionOrderType["LIMIT"] = "LIMIT";
    PositionOrderType["MARKET"] = "MARKET";
    PositionOrderType["QUOTE"] = "QUOTE";
})(PositionOrderType = exports.PositionOrderType || (exports.PositionOrderType = {}));
var PositionTimeInForce;
(function (PositionTimeInForce) {
    PositionTimeInForce["EXECUTE_AND_ELIMINATE"] = "EXECUTE_AND_ELIMINATE";
    PositionTimeInForce["FILL_OR_KILL"] = "FILL_OR_KILL";
})(PositionTimeInForce = exports.PositionTimeInForce || (exports.PositionTimeInForce = {}));
var OrderType;
(function (OrderType) {
    OrderType["LIMIT"] = "LIMIT";
    OrderType["STOP"] = "STOP";
})(OrderType = exports.OrderType || (exports.OrderType = {}));
var OrderTimeInForce;
(function (OrderTimeInForce) {
    OrderTimeInForce["GOOD_TILL_CANCELLED"] = "GOOD_TILL_CANCELLED";
    OrderTimeInForce["GOOD_TILL_DATE"] = "GOOD_TILL_DATE";
})(OrderTimeInForce = exports.OrderTimeInForce || (exports.OrderTimeInForce = {}));
var AffectedDealStatus;
(function (AffectedDealStatus) {
    AffectedDealStatus["AMENDED"] = "AMENDED";
    AffectedDealStatus["DELETED"] = "DELETED";
    AffectedDealStatus["FULLY_CLOSED"] = "FULLY_CLOSED";
    AffectedDealStatus["OPENED"] = "OPENED";
    AffectedDealStatus["PARTIALLY_CLOSED"] = "PARTIALLY_CLOSED";
})(AffectedDealStatus = exports.AffectedDealStatus || (exports.AffectedDealStatus = {}));
var DealStatus;
(function (DealStatus) {
    DealStatus["ACCEPTED"] = "ACCEPTED";
    DealStatus["REJECTED"] = "REJECTED";
})(DealStatus = exports.DealStatus || (exports.DealStatus = {}));
var Status;
(function (Status) {
    Status["AMENDED"] = "AMENDED";
    Status["CLOSED"] = "CLOSED";
    Status["DELETED"] = "DELETED";
    Status["OPEN"] = "OPEN";
    Status["PARTIALLY_CLOSED"] = "PARTIALLY_CLOSED";
})(Status = exports.Status || (exports.Status = {}));
class DealingAPI {
    constructor(apiClient) {
        this.apiClient = apiClient;
    }
    /**
     * Returns all open positions for the active account.
     *
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=545
     */
    getAllOpenPositions() {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = DealingAPI.URL.POSITIONS;
            const response = yield this.apiClient.get(resource, {
                headers: {
                    VERSION: '2',
                },
            });
            return response.data;
        });
    }
    /**
     * Returns an open position for the active account by deal identifier.
     *
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=541
     */
    getPosition(dealId) {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = DealingAPI.URL.POSITIONS + dealId;
            const response = yield this.apiClient.get(resource, {
                headers: {
                    VERSION: '2',
                },
            });
            return response.data;
        });
    }
    /**
     * Creates an OTC position.
     *
     * @param PositionCreateRequest - The Information to create the Position
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=542
     */
    createPosition(createPositionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = DealingAPI.URL.POSITIONS_OTC;
            const response = yield this.apiClient.post(resource, createPositionRequest, {
                headers: {
                    VERSION: '2',
                },
            });
            return response.data;
        });
    }
    /**
     * Closes an OTC position.
     *
     * @param PositionCloseRequest - The Information to close the Position
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=542
     */
    closePosition(closePositionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = DealingAPI.URL.POSITIONS_OTC;
            const response = yield this.apiClient.post(resource, closePositionRequest, {
                headers: {
                    _method: 'DELETE',
                },
            });
            return response.data;
        });
    }
    /**
     * Updates an OTC position.
     *
     * @param PositionUpdateRequest - The Information to close the Position
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=542
     */
    updatePosition(dealId, updatePositionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = DealingAPI.URL.POSITIONS_OTC + dealId;
            const response = yield this.apiClient.put(resource, updatePositionRequest, {
                headers: {
                    VERSION: '2',
                },
            });
            return response.data;
        });
    }
    /**
     * Returns a deal confirmation for the given deal reference.
     *
     * @param dealReference - The dealReference of the deal to be retrieved
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=546
     */
    confirmTrade(dealReference) {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = DealingAPI.URL.CONFIRMS + dealReference.dealReference;
            const response = yield this.apiClient.get(resource);
            return response.data;
        });
    }
    /**
     * Returns all open working orders for the active account.
     *
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=555
     */
    getAllOrders() {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = DealingAPI.URL.WORKINGORDERS;
            const response = yield this.apiClient.get(resource, {
                headers: {
                    VERSION: '2',
                },
            });
            return response.data;
        });
    }
    /**
     * Creates an OTC working order.
     *
     * @param OrderCreateRequest - The Information to create the Order
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=533
     */
    createOrder(createOrderRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = DealingAPI.URL.WORKINGORDERS_OTC;
            const response = yield this.apiClient.post(resource, createOrderRequest, {
                headers: {
                    VERSION: '2',
                },
            });
            return response.data;
        });
    }
    /**
     * Deletes an OTC working order.
     *
     * @param DealId - The Id of the working order which should be deleted
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=526
     */
    deleteOrder(dealId) {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = DealingAPI.URL.WORKINGORDERS_OTC + dealId;
            const response = yield this.apiClient.post(resource, {}, {
                headers: {
                    VERSION: '2',
                    _method: 'DELETE',
                },
            });
            return response.data;
        });
    }
    /**
     * Updates an OTC working order.
     *
     * @param DealId - The Id of the working order which should be updated
     * @param OrderUpdateRequest - The Information to update the Working Order
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=526
     */
    updateOrder(dealId, orderRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = DealingAPI.URL.WORKINGORDERS_OTC + dealId;
            const response = yield this.apiClient.put(resource, orderRequest, {
                headers: {
                    VERSION: '2',
                },
            });
            return response.data;
        });
    }
}
exports.DealingAPI = DealingAPI;
DealingAPI.URL = {
    CONFIRMS: '/confirms/',
    POSITIONS: '/positions/',
    POSITIONS_OTC: '/positions/otc/',
    WORKINGORDERS: '/workingorders/',
    WORKINGORDERS_OTC: '/workingorders/otc/',
};
//# sourceMappingURL=DealingAPI.js.map