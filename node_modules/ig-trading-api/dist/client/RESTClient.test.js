"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require(".");
const APIClient_1 = require("../APIClient");
const nock_1 = __importDefault(require("nock"));
const login_1 = require("../login");
describe('RESTClient', () => {
    function createRESTClient() {
        return new _1.RESTClient(APIClient_1.APIClient.URL_DEMO, '');
    }
    describe('defaults', () => {
        it('supports overriding the timeout limit', () => {
            const rest = createRESTClient();
            rest.defaults.timeout = 2500;
            expect(rest.defaults.timeout).toBe(2500);
        });
    });
    describe('interceptors', () => {
        beforeAll(() => {
            (0, nock_1.default)(APIClient_1.APIClient.URL_DEMO)
                .persist()
                .defaultReplyHeaders({
                CST: 'test',
                'X-SECURITY-TOKEN': 'test',
            })
                .get(login_1.LoginAPI.URL.SESSION + '?fetchSessionTokens=true')
                .reply(200, JSON.stringify({}));
            (0, nock_1.default)(APIClient_1.APIClient.URL_DEMO)
                .persist()
                .post(login_1.LoginAPI.URL.SESSION)
                .query(true)
                .reply(200, JSON.stringify({
                accountId: 'ABC123',
                clientId: '133721337',
                lightstreamerEndpoint: 'https://demo-apd.marketdatasystems.com',
                oauthToken: {
                    access_token: '6ba8e2bd-1337-40e5-9299-68f60474f986',
                    expires_in: '60',
                    refresh_token: '83c056b8-1337-46d3-821d-92a1dffd7f1e',
                    scope: 'profile',
                    token_type: 'Bearer',
                },
                timezoneOffset: 1,
            }));
        });
        it('supports custom HTTP interceptors', () => __awaiter(void 0, void 0, void 0, function* () {
            const rest = createRESTClient();
            const onRequest = jasmine.createSpy('onRequest').and.callFake((config) => config);
            const myInterceptor = rest.interceptors.request.use(onRequest);
            yield rest.login.createSession('test-user', 'test-password');
            expect(onRequest).toHaveBeenCalledTimes(2);
            rest.interceptors.request.eject(myInterceptor);
            yield rest.login.createSession('test-user', 'test-password');
            expect(onRequest).toHaveBeenCalledTimes(2);
        }));
    });
});
//# sourceMappingURL=RESTClient.test.js.map