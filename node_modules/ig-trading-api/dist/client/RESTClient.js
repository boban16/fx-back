"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RESTClient = void 0;
const axios_1 = __importDefault(require("axios"));
const login_1 = require("../login");
const market_1 = require("../market");
const dealing_1 = require("../dealing");
const account_1 = require("../account");
const axios_retry_1 = __importDefault(require("axios-retry"));
class RESTClient {
    constructor(baseURL, apiKey) {
        this.apiKey = apiKey;
        this.auth = {};
        this.httpClient = axios_1.default.create({
            baseURL: baseURL,
        });
        function isAuthorization(candidate) {
            return typeof candidate !== 'string';
        }
        if (isAuthorization(this.apiKey)) {
            this.auth = this.apiKey;
        }
        (0, axios_retry_1.default)(this.httpClient, {
            retries: Infinity,
            retryCondition: (error) => {
                var _a, _b;
                const errorCode = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.errorCode;
                switch (errorCode) {
                    case 'error.public-api.exceeded-api-key-allowance':
                        // Got rate limited
                        return true;
                    case 'error.security.oauth-token-invalid':
                        // Security token expired
                        void this.login.refreshToken();
                        return true;
                    case 'error.security.client-token-missing':
                        // Trading session has not been initialized
                        const { username, password } = this.auth;
                        if (username && password) {
                            void this.login.createSession(this.auth.username, this.auth.password);
                            return true;
                        }
                        throw new Error(`Cannot fulfill request because there is no active session and username & password have not been provided.`);
                    default:
                        return true;
                }
            },
            retryDelay: axios_retry_1.default.exponentialDelay,
        });
        this.httpClient.interceptors.request.use((config) => __awaiter(this, void 0, void 0, function* () {
            const updatedHeaders = Object.assign(Object.assign({}, config.headers), { 'X-IG-API-KEY': isAuthorization(this.apiKey) ? `${this.apiKey.apiKey}` : this.apiKey });
            const { accessToken, accountId, securityToken, clientSessionToken } = this.auth;
            if (config.url === login_1.LoginAPI.URL.SESSION && config.method === 'put') {
                // Edge case to switch accounts which doesn't work with Bearer tokens
                updatedHeaders['X-SECURITY-TOKEN'] = `${securityToken}`;
                updatedHeaders.CST = `${clientSessionToken}`;
            }
            else {
                if (accessToken) {
                    updatedHeaders.Authorization = `Bearer ${accessToken}`;
                }
                else if (securityToken && clientSessionToken) {
                    updatedHeaders['X-SECURITY-TOKEN'] = securityToken;
                    updatedHeaders.CST = clientSessionToken;
                }
                if (accountId) {
                    updatedHeaders['IG-ACCOUNT-ID'] = accountId;
                }
            }
            config.headers = updatedHeaders;
            return config;
        }));
        this.login = new login_1.LoginAPI(this.httpClient, this.auth);
        this.market = new market_1.MarketAPI(this.httpClient);
        this.dealing = new dealing_1.DealingAPI(this.httpClient);
        this.account = new account_1.AccountAPI(this.httpClient);
    }
    get defaults() {
        return this.httpClient.defaults;
    }
    get interceptors() {
        return this.httpClient.interceptors;
    }
}
exports.RESTClient = RESTClient;
//# sourceMappingURL=RESTClient.js.map