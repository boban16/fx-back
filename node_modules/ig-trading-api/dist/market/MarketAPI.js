"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarketAPI = exports.MarketStatus = exports.TrailingStopPreference = exports.MarketOrderPreference = exports.InstrumentUnit = exports.InstrumentType = void 0;
const prices_1 = require("./prices");
var InstrumentType;
(function (InstrumentType) {
    InstrumentType["BUNGEE_COMMODITIES"] = "BUNGEE_COMMODITIES";
    InstrumentType["BUNGEE_CURRENCIES"] = "BUNGEE_CURRENCIES";
    InstrumentType["BUNGEE_INDICES"] = "BUNGEE_INDICES";
    InstrumentType["COMMODITIES"] = "COMMODITIES";
    InstrumentType["CURRENCIES"] = "CURRENCIES";
    InstrumentType["INDICES"] = "INDICES";
    InstrumentType["OPT_COMMODITIES"] = "OPT_COMMODITIES";
    InstrumentType["OPT_CURRENCIES"] = "OPT_CURRENCIES";
    InstrumentType["OPT_INDICES"] = "OPT_INDICES";
    InstrumentType["OPT_RATES"] = "OPT_RATES";
    InstrumentType["OPT_SHARES"] = "OPT_SHARES";
    InstrumentType["RATES"] = "RATES";
    InstrumentType["SECTORS"] = "SECTORS";
    InstrumentType["SHARES"] = "SHARES";
    InstrumentType["SPRINT_MARKET"] = "SPRINT_MARKET";
    InstrumentType["TEST_MARKET"] = "TEST_MARKET";
    InstrumentType["UNKNOWN"] = "UNKNOWN";
})(InstrumentType = exports.InstrumentType || (exports.InstrumentType = {}));
var InstrumentUnit;
(function (InstrumentUnit) {
    InstrumentUnit["AMOUNT"] = "AMOUNT";
    InstrumentUnit["CONTRACTS"] = "CONTRACTS";
    InstrumentUnit["SHARES"] = "SHARES";
})(InstrumentUnit = exports.InstrumentUnit || (exports.InstrumentUnit = {}));
var MarketOrderPreference;
(function (MarketOrderPreference) {
    MarketOrderPreference["AVAILABLE_DEFAULT_OFF"] = "AVAILABLE_DEFAULT_OFF";
    MarketOrderPreference["AVAILABLE_DEFAULT_ON"] = "AVAILABLE_DEFAULT_ON";
    MarketOrderPreference["NOT_AVAILABLE"] = "NOT_AVAILABLE";
})(MarketOrderPreference = exports.MarketOrderPreference || (exports.MarketOrderPreference = {}));
var TrailingStopPreference;
(function (TrailingStopPreference) {
    TrailingStopPreference["AVAILABLE"] = "AVAILABLE";
    TrailingStopPreference["NOT_AVAILABLE"] = "NOT_AVAILABLE";
})(TrailingStopPreference = exports.TrailingStopPreference || (exports.TrailingStopPreference = {}));
var MarketStatus;
(function (MarketStatus) {
    MarketStatus["CLOSED"] = "CLOSED";
    MarketStatus["EDITS_ONLY"] = "EDITS_ONLY";
    MarketStatus["OFFLINE"] = "OFFLINE";
    MarketStatus["ON_AUCTION"] = "ON_AUCTION";
    MarketStatus["ON_AUCTION_NO_EDITS"] = "ON_AUCTION_NO_EDITS";
    MarketStatus["SUSPENDED"] = "SUSPENDED";
    MarketStatus["TRADEABLE"] = "TRADEABLE";
})(MarketStatus = exports.MarketStatus || (exports.MarketStatus = {}));
class MarketAPI {
    constructor(apiClient) {
        this.apiClient = apiClient;
        this.price = new prices_1.PriceAPI(apiClient);
    }
    /**
     * Returns all markets matching the search term.
     *
     * @param searchTerm - The term to be used in the search
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=547
     */
    searchMarkets(searchTerm) {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = `${MarketAPI.URL.MARKETS}?searchTerm=${searchTerm}`;
            const response = yield this.apiClient.get(resource);
            return response.data;
        });
    }
    /**
     * Returns all nodes (market categories) in the market navigation hierarchy.
     *
     * @param nodeId - The identifier of the node to browse
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=550
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=544
     */
    getMarketCategories(nodeId) {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = nodeId ? `${MarketAPI.URL.MARKETNAVIGATION}/${nodeId}` : MarketAPI.URL.MARKETNAVIGATION;
            const response = yield this.apiClient.get(resource);
            return response.data;
        });
    }
    getMarketDetails(epic) {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = Array.isArray(epic)
                ? `${MarketAPI.URL.MARKETS}?epics=${encodeURIComponent(epic.join(','))}`
                : `${MarketAPI.URL.MARKETS}/${epic}`;
            const response = yield this.apiClient.get(resource);
            return response.data;
        });
    }
}
exports.MarketAPI = MarketAPI;
MarketAPI.URL = {
    MARKETNAVIGATION: `/marketnavigation`,
    MARKETS: `/markets`,
};
//# sourceMappingURL=MarketAPI.js.map