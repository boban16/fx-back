"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PriceAPI = exports.ResolutionInMillis = exports.Resolution = void 0;
const querystring_1 = __importDefault(require("querystring"));
var Resolution;
(function (Resolution) {
    Resolution["DAY"] = "DAY";
    Resolution["HOUR"] = "HOUR";
    Resolution["HOUR_2"] = "HOUR_2";
    Resolution["HOUR_3"] = "HOUR_3";
    Resolution["HOUR_4"] = "HOUR_4";
    Resolution["MINUTE"] = "MINUTE";
    Resolution["MINUTE_10"] = "MINUTE_10";
    Resolution["MINUTE_15"] = "MINUTE_15";
    Resolution["MINUTE_2"] = "MINUTE_2";
    Resolution["MINUTE_3"] = "MINUTE_3";
    Resolution["MINUTE_30"] = "MINUTE_30";
    Resolution["MINUTE_5"] = "MINUTE_5";
    Resolution["MONTH"] = "MONTH";
    Resolution["SECOND"] = "SECOND";
    Resolution["WEEK"] = "WEEK";
})(Resolution = exports.Resolution || (exports.Resolution = {}));
var ResolutionInMillis;
(function (ResolutionInMillis) {
    ResolutionInMillis[ResolutionInMillis["DAY"] = 86400000] = "DAY";
    ResolutionInMillis[ResolutionInMillis["HOUR"] = 3600000] = "HOUR";
    ResolutionInMillis[ResolutionInMillis["HOUR_2"] = 7200000] = "HOUR_2";
    ResolutionInMillis[ResolutionInMillis["HOUR_3"] = 10800000] = "HOUR_3";
    ResolutionInMillis[ResolutionInMillis["HOUR_4"] = 14400000] = "HOUR_4";
    ResolutionInMillis[ResolutionInMillis["MINUTE"] = 60000] = "MINUTE";
    ResolutionInMillis[ResolutionInMillis["MINUTE_10"] = 600000] = "MINUTE_10";
    ResolutionInMillis[ResolutionInMillis["MINUTE_15"] = 900000] = "MINUTE_15";
    ResolutionInMillis[ResolutionInMillis["MINUTE_2"] = 120000] = "MINUTE_2";
    ResolutionInMillis[ResolutionInMillis["MINUTE_3"] = 180000] = "MINUTE_3";
    ResolutionInMillis[ResolutionInMillis["MINUTE_30"] = 1800000] = "MINUTE_30";
    ResolutionInMillis[ResolutionInMillis["MINUTE_5"] = 300000] = "MINUTE_5";
    ResolutionInMillis[ResolutionInMillis["MONTH"] = 2419200000] = "MONTH";
    ResolutionInMillis[ResolutionInMillis["SECOND"] = 1000] = "SECOND";
    ResolutionInMillis[ResolutionInMillis["WEEK"] = 604800000] = "WEEK";
})(ResolutionInMillis = exports.ResolutionInMillis || (exports.ResolutionInMillis = {}));
class PriceAPI {
    constructor(apiClient) {
        this.apiClient = apiClient;
    }
    /**
     * Returns historical prices between given dates.
     *
     * @note Uses the v3 API response
     * @param epic - Instrument identifier
     * @param resolution - Time resolution
     * @param startDate - Start date as ISO 8601 string, i.e. "2021-01-15T00:00:00.000Z"
     * @param endDate - End date as ISO 8601 string, i.e. "2021-01-16T00:00:00.000Z"
     * @param pageSize - Number of candles per page of results (defaults to 0, no pagination)
     * @param pageNumber - Page of results to return (pagination)
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=521
     */
    getPricesBetweenDates(epic, resolution, startDate, endDate, pageSize = 0, pageNumber = 1) {
        return __awaiter(this, void 0, void 0, function* () {
            const qs = querystring_1.default.stringify({
                from: startDate,
                pageNumber,
                pageSize,
                resolution,
                to: endDate,
            });
            const resource = `${PriceAPI.URL.PRICES}/${epic}?${qs}`;
            const response = yield this.apiClient.get(resource, { headers: { Version: 3 } });
            return response.data;
        });
    }
    /**
     * Returns historical prices for a particular instrument.
     *
     * @param epic - Instrument identifier
     * @param resolution - Time resolution
     * @param pointCount - Limits the number of price points (not applicable if a date range has been specified)
     * @param pageSize - Number of candles per page of results (defaults to 0, no pagination)
     * @param pageNumber - Page of results to return (pagination)
     */
    getPrices(epic, resolution, pointCount, pageSize = 0, pageNumber = 1) {
        return __awaiter(this, void 0, void 0, function* () {
            const qs = querystring_1.default.stringify({
                max: pointCount,
                pageNumber,
                pageSize,
                resolution,
            });
            const resource = `${PriceAPI.URL.PRICES}/${epic}?${qs}`;
            const response = yield this.apiClient.get(resource, { headers: { Version: 3 } });
            return response.data;
        });
    }
}
exports.PriceAPI = PriceAPI;
PriceAPI.URL = {
    PRICES: '/prices',
};
//# sourceMappingURL=PriceAPI.js.map